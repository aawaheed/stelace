{
	"info": {
		"name": "Stelace Platform APIs",
		"description": "Stelace API lets you build and run any type of platform without the hassle of maintaining and scaling some heavy backend. \n\nOur Search, Automation and Web Platform tooling APIs have been engineered for growth and focus on flexibility.\n\nPlease have a look at to our [higher-level docs](https://stelace.com/docs).\n\nStelace API is organized around REST with predictable resource-oriented URLs.\n\nOur API accepts both JSON and form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Versioning",
			"item": [],
			"description": "When we make backwards-incompatible changes to any of our endpoints, we release a new dated version like `2019-05-20`.\n\nWe assign the last API version to your account during your first request. All subsequent requests will use it, unless you override the API version.\n\n- You can change the API version globally in Stelace Dashboard.\n- You can set the API version on a specific request, using `x-stelace-version` header.\n\nThe last version is `2019-05-20`.\n\nBreaking changes introduced by dated versions are listed in *Changelog section*.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Errors",
			"item": [],
			"description": "Stelace uses conventional HTTP response codes for the success or failure of an API request. 2xx range codes indicate success. 4xx errors indicate that the request has failed given the information provided. 5xx range code errors indicate an error on our servers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Request IDs",
			"item": [],
			"description": "Each API request has an associated request identifier. You can find this identifier via the header `x-request-id` in the response. If you need to contact us about a specific request, please provide the request identifier to speed up investigations.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Pagination, sorting and filtering",
			"item": [],
			"description": "Stelace API enables pagination via `nbResultsPerPage` and `page`, and sorting as well with `orderBy` (field to sort) and `order` (sort direction) parameters.\n\nMost of list endpoints accept parameters to filter on Object IDs. If multiple IDs are accepted, you can use the following formats unless stated otherwise:\n- single ID: `id=id1`\n- array of IDs:`id[]=id1&id[]=id2`\n- comma-separated IDs `id=id1,id2`",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API access",
			"item": [],
			"description": "Stelace provides an access control to prevent unauthorized use of the API. This access control uses permissions protecting all endpoints.\n\nIf a user is authenticated via an external authentication provider, permissions are retrieved from the JWT token (see Authentication section).\n\nUnauthenticated requests are covered by the role \"public\". You can refer to the *Role API* for more details. Here's the list of those permissions:\n- `asset:list:all`\n- `asset:read:all`\n- `assetType:list:all`\n- `assetType:read:all`\n- `auth:login`\n- `availability:list:all`\n- `availability:read:all`\n- `category:list:all`\n- `category:read:all`\n- `config:read`\n- `customAttribute:list:all`\n- `customAttribute:read:all`\n- `entry:list:all`\n- `entry:read:all`\n- `event:create:all`\n- `password:reset`\n- `rating:stats:all`\n- `rating:list:all`\n- `rating:read:all`\n- `role:list:all`\n- `role:read:all`\n- `search:list:all`\n- `signal:create`\n- `transaction:preview:all`\n- `user:list:all`\n- `user:read:all`\n- `user:create`\n\nPermissions have the following form: `resource:action(:target)`.\n\nFor instance if a user has the permission `asset:edit`, she can modify her assets and only hers. Admin users should have the permission `asset:edit:all`, allowing them to edit assets owned by all users.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "API keys",
					"item": [
						{
							"name": "Get API key list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/api-keys?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=apik_aHZQps1I3a1gJYz2I3a,apik_SVBQps1I3a1gJYz2I3a&type=custom&createdDate=2019-01-01&updatedDate=2019-01-01",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"api-keys"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `name`, `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "apik_aHZQps1I3a1gJYz2I3a,apik_SVBQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										},
										{
											"key": "type",
											"value": "custom",
											"description": "String: api key type"
										},
										{
											"key": "createdDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "updatedDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										}
									]
								},
								"description": "All parameters are optional.\n\n**Permission**:\n\n- apiKey:list:all"
							},
							"response": [
								{
									"name": "Get API key list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/api-keys",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"api-keys"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get API key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/api-keys/:apiKeyId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"api-keys",
										":apiKeyId"
									],
									"variable": [
										{
											"key": "apiKeyId",
											"value": "apik_aHZQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: API key ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- apiKey:read - the API key can only read itself\n- apiKey:read:all - read all API keys"
							},
							"response": [
								{
									"name": "Get API key",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/api-keys/apik_aHZQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"api-keys",
												"apik_aHZQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"apik_aHZQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Custom api key\",\n    \"key\": \"custom_test_OIJfxxxxxxxxxxxxxxxxd232\",\n    \"roles\": [],\n    \"permissions\": [\n        \"asset:create:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create API key",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Custom api key",
											"description": "String [required]: Name to easily identify the key",
											"type": "text"
										},
										{
											"key": "roles",
											"value": "[]",
											"description": "Array of String (Default: `[]`): List of roles associated to this API key. Use roles' values instead of IDs (e.g. `['dev']`)",
											"type": "text"
										},
										{
											"key": "permissions",
											"value": "['asset:create:all']",
											"description": "Array of String (Default: `[]`): List of permissions associated to this API key. To associate all permissions (only use it in safe environment), use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "readNamespaces",
											"value": "[]",
											"description": "Array of String (Default: `[]`): List of namespaces for reading objects associated to this role. To associate all namespaces, use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "editNamespaces",
											"value": "[]",
											"description": "Array of String (Default: `[]`): List of namespaces for editing objects associated to this role. To associate all namespaces, use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "",
											"description": "String [required]: Provide your own type of key. The only restriction is that the type should be composed of alphanumeric characters with length between 5 and 10",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/api-keys",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"api-keys"
									]
								},
								"description": "The API key value is returned in plain text only immediately upon creation.\n\nAny GET or PATCH request will then return an object with obfuscated `key` value.\n\n#### API key access\n\nRoles and permissions can be attached to an API key, defining which actions it can perform.\n\nIf you assign roles to API keys, they will inherit corresponding permissions, read namespaces and edit namespaces.\n\nAssigning permissions allows a more granular access definition.\n\nYou can also directly add namespaces to the API keys without creating roles. To learn more about namespaces, please refer to the *Metadata* section.\n\n**Permission**:\n\n- apiKey:create:all"
							},
							"response": [
								{
									"name": "Create API key",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Custom api key\",\n    \"roles\": [],\n    \"permissions\": [\n    \t\"asset:create:all\"\t\n    ]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/api-keys",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"api-keys"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"apik_aHZQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Custom api key\",\n    \"key\": \"custom_test_OIJfxxxxxxxxxxxxxxxxd232\",\n    \"roles\": [],\n    \"permissions\": [\n        \"asset:create:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update API key",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Custom api key",
											"description": "String: Name to easily identify the key",
											"type": "text"
										},
										{
											"key": "roles",
											"value": "[]",
											"description": "Array of String: List of roles associated to this API key. Use roles' values instead of IDs (e.g. `['dev']`)",
											"type": "text"
										},
										{
											"key": "permissions",
											"value": "['asset:create:all']",
											"description": "Array of String: List of permissions associated to this API key. To associate all permissions (only use it in safe environment), use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "readNamespaces",
											"value": "[]",
											"description": "Array of String: List of namespaces for reading objects associated to this role. To associate all namespaces, use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "editNamespaces",
											"value": "[]",
											"description": "Array of String: List of namespaces for editing objects associated to this role. To associate all namespaces, use `['*']` as value.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/api-keys/:apiKeyId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"api-keys",
										":apiKeyId"
									],
									"variable": [
										{
											"key": "apiKeyId",
											"value": "apik_aHZQps1I3a1gJYz2I3a",
											"description": "String: API key ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- apiKey:edit - the API key can only edit itself\n- apiKey:edit:all - edits all API keys"
							},
							"response": [
								{
									"name": "Update API key",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Custom api key\",\n    \"roles\": [],\n    \"permissions\": [\n    \t\"asset:create:all\"\t\n    ]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/api-keys/apik_aHZQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"api-keys",
												"apik_aHZQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"apik_aHZQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Custom api key\",\n    \"key\": \"custom_test_OIJfxxxxxxxxxxxxxxxxd232\",\n    \"roles\": [],\n    \"permissions\": [\n        \"asset:create:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete API key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/api-keys/:apiKeyId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"api-keys",
										":apiKeyId"
									],
									"variable": [
										{
											"key": "apiKeyId",
											"value": "apik_aHZQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: API key ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- apiKey:remove - the API key can only remove itself\n- apiKey:remove:all - removes all API keys"
							},
							"response": [
								{
									"name": "Delete API key",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/api-keys/:apiKeyId",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"api-keys",
												":apiKeyId"
											],
											"variable": [
												{
													"key": "apiKeyId",
													"value": "apik_aHZQps1I3a1gJYz2I3a",
													"description": "String: API key ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "There are two types of API keys: _secret_ and _publishable_ API keys. The API key you use to authenticate a request also determines whether the request is in _live_ or _test_ environment.\n\nPublishable API keys only identify your platform. Users must authenticate themselves before accessing protected resources.\n\nSecret API keys enable developers or applications to perform any action without being authenticated as a user.\n\n__Secret API keys carry all permissions and should never be stored in public-facing code such as mobile app, Github project or client-side JavaScript.__\n\nIf exposing a key to the outside world is necessary, please create keys with custom `type` and restricted permissions.\n\n_Note: Permissions restricted to the current user (resource:action) cannot be applied to an API key because it doesn't represent a user. For instance, specifying the permission `asset:edit` won't work but `asset:edit:all` will._",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Platform User authentication",
					"item": [
						{
							"name": "Login user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "john@example.com",
											"description": "String [required]",
											"type": "text"
										},
										{
											"key": "password",
											"value": "secretPassword",
											"description": "String [required]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/auth/login",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "**Permission**:\n\n- auth:login"
							},
							"response": [
								{
									"name": "Login user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"john@example.com\",\n    \"password\": \"secretPassword\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/auth/login",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"tokenType\": \"Bearer\",\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c3JfV0hsZlFwczFJM2ExZ0pZejJJM2EiLCJyb2xlcyI6WyJhZG1pbiIsInVzZXIiLCJzZWxsZXIiXSwibG9nZ2VkQXQiOjE1MzE5ODYxNTAsImlhdCI6MTUzMTk4NjE1MCwiZXhwIjoxNTMxOTkzMzUwfQ.yT-tttiswTWhY9Jinjpcvz121ihxbCisxHe2BIaeByE\",\n    \"refreshToken\": \"e139c780-f336-4fbe-b77c-29bd46a1a244\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\"\n}"
								}
							]
						},
						{
							"name": "Refresh token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "refreshToken",
											"value": "e139c780-f336-4fbe-b77c-29bd46a1a244",
											"description": "String [required]: the refresh token you get after login",
											"type": "text"
										},
										{
											"key": "grantType",
											"value": "refreshToken",
											"description": "String [required]: \"refreshToken\" is currently the only allowed value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/auth/token",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"token"
									]
								},
								"description": "The refresh token expires in 14 days by default.\n\nCustom duration setting will be available soon in Stelace Dashboard."
							},
							"response": [
								{
									"name": "Refresh token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"grantType\": \"refreshToken\",\n\t\"refreshToken\": \"e139c780-f336-4fbe-b77c-29bd46a1a244\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/auth/token",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"tokenType\": \"Bearer\",\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c3JfV0hsZlFwczFJM2ExZ0pZejJJM2EiLCJyb2xlcyI6WyJhZG1pbiIsInVzZXIiLCJzZWxsZXIiXSwibG9nZ2VkQXQiOjE1MzE5ODYxNTAsImlhdCI6MTUzMTk4NjE1MCwiZXhwIjoxNTMxOTkzMzUwfQ.yT-tttiswTWhY9Jinjpcvz121ihxbCisxHe2BIaeByE\"\n}"
								}
							]
						},
						{
							"name": "Logout user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "refreshToken",
											"value": "e139c780-f336-4fbe-b77c-29bd46a1a244",
											"description": "String [required]: the refresh token you get after login",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/auth/logout",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": [
								{
									"name": "Logout user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"refreshToken\": \"e139c780-f336-4fbe-b77c-29bd46a1a244\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/auth/logout",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"success\": true\n}"
								}
							]
						}
					],
					"description": "Users that are created via the *User API* can login with their username and password.\n\nAfter a successful authentication, Stelace will generate and return the access token you should use with every request and refresh token to handle expiration.\n\nNote that we cryptographically salt and hash every password. You still have to ensure you send credentials over properly secured HTTPS connection.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Check information",
					"item": [
						{
							"name": "Check information",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "apiKey",
											"value": "seck_test_rylx3ebUg0bNs1HkJKlqNHkI",
											"description": "String: provide `apiKey` or `authorization`. It can be any key (publishable, secret or custom).",
											"type": "text"
										},
										{
											"key": "authorization",
											"value": "",
											"description": "String: provide `apiKey` or `authorization`. This is the header authorization that is usually sent to Stelace API to identifies the platform and/or the authenticated user.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/auth/check",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"check"
									]
								},
								"description": "The endpoint accepts one parameter which can be an `apiKey` or a header `authentication` that is usually sent to Stelace API.\n\nHere's an example of a valid authentication information, the provided information is a secret API key:\n```js\n{\n    \"valid\": true, // authentication information validity\n    \n    // Below properties are null if the provided information is invalid\n    \n    \"apiKey\": { // API key information decrypted\n        \"type\": \"seck\",\n        \"env\": \"test\",\n        \"platformId\": \"2\",\n        \"zone\": \"s\",\n        \"hasValidFormat\": true\n    },\n    \n    // Following properties are non-null if the header `authentication` holds user information (e.g. after login)\n    \n    // If not null, it is the decrypted `accessToken` (property returned from the login response)\n    \"user\": null,\n    \n    // Boolean that express if the decrypted authentication token is expired or not\n    // Please note that the token expiration and the authentication validity are independent.\n    \"tokenExpired\": null\n}\n```"
							},
							"response": [
								{
									"name": "Check information",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"apiKey\": \"seck_test_rylx3ebUg0bNs1HkJKlqNHkI\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/auth/check",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"check"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"valid\": true,\n    \"apiKey\": {\n        \"type\": \"seck\",\n        \"env\": \"test\",\n        \"platformId\": \"2\",\n        \"zone\": \"s\",\n        \"hasValidFormat\": true\n    },\n    \"user\": null,\n    \"tokenExpired\": null\n}"
								}
							]
						}
					],
					"description": "Stelace API provides a mean to verify and decrypt authentication information.\n\nThis is especially useful if some custom logic needs to be implemented in external systems (e.g. serverless architecture).\nYou can restrict users who are able to trigger this logic by inspecting the authentication information\n(e.g. some transaction logic can only be triggered by users that are part of the transaction).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "OAuth2 (SSO / social login)",
					"item": [
						{
							"name": "Login",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/auth/sso/:publicPlatformId/:provider",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"sso",
										":publicPlatformId",
										":provider"
									],
									"variable": [
										{
											"key": "publicPlatformId",
											"value": "e12_test",
											"type": "string",
											"description": "String: Public Platform ID available in [Stelace Dashboard](https://stelace.com/dashboard/configuration)"
										},
										{
											"key": "provider",
											"value": "github",
											"type": "string",
											"description": "String: SSO provider name. It should be map to a key from the private config object `stelace.ssoConnections`"
										}
									]
								},
								"description": "This endpoint doesn't need any public key as the `publicPlatformId` is provided in the URL.\n\nIt is intended to be hit by end users via a link to initiate the external authentication login process."
							},
							"response": [
								{
									"name": "Login",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/auth/sso/e12_test/github",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"sso",
												"e12_test",
												"github"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Login callback",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/auth/sso/:publicPlatformId/:provider/callback",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"sso",
										":publicPlatformId",
										":provider",
										"callback"
									],
									"variable": [
										{
											"key": "publicPlatformId",
											"value": "e12_test",
											"type": "string",
											"description": "String: Public Platform ID available in [Stelace Dashboard](https://stelace.com/dashboard/configuration)"
										},
										{
											"key": "provider",
											"value": "github",
											"type": "string",
											"description": "String: SSO provider name. It should be map to a key from the private config object `stelace.ssoConnections`"
										}
									]
								},
								"description": "This endpoint doesn't need any public key as the `publicPlatformId` is provided in the URL.\n\nAfter a successful external authentication login, the authorization server will redirect the end user back to this endpoint.\n\nYou need to add this URL to the allowed list of login redirect URLs in the OAuth provider dashboard (generally referred to `Authorization callback URLs` or `Authorised redirect URIs`).\n"
							},
							"response": [
								{
									"name": "Login callback",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/auth/sso/e12_test/github/callback",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"sso",
												"e12_test",
												"github",
												"callback"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Stelace auth tokens",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "code",
											"value": "e139c780-f336-4fbe-b77c-29bd46a1a244",
											"description": "String [required]: the code retrieved from `afterAuthenticationUrl` query parameters",
											"type": "text"
										},
										{
											"key": "grantType",
											"value": "authorizationCode",
											"description": "String [required]: \"authorizationCode\" is the only allowed value",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/auth/token",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"auth",
										"token"
									]
								},
								"description": "This endpoint lets you get `accessToken` and `refreshToken` to use with Stelace API after a successful SSO login.\n\nYou need to provide a `code` that can only be retrieved as a URL query parameter added to `afterAuthenticationUrl` set in platform private configuration, where users are redirected after successful login."
							},
							"response": [
								{
									"name": "Get Stelace auth tokens",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{publishApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"grantType\": \"authorizationCode\",\n\t\"code\": \"e139c780-f336-4fbe-b77c-29bd46a1a244\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/auth/token",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"auth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"tokenType\": \"Bearer\",\n    \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c3JfV0hsZlFwczFJM2ExZ0pZejJJM2EiLCJyb2xlcyI6WyJhZG1pbiIsInVzZXIiLCJzZWxsZXIiXSwibG9nZ2VkQXQiOjE1MzE5ODYxNTAsImlhdCI6MTUzMTk4NjE1MCwiZXhwIjoxNTMxOTkzMzUwfQ.yT-tttiswTWhY9Jinjpcvz121ihxbCisxHe2BIaeByE\",\n    \"refreshToken\": \"e139c780-f336-4fbe-b77c-29bd46a1a244\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\"\n}"
								}
							]
						},
						{
							"name": "Update built-in OAuth providers configuration in private config",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "stelace",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  ssoConnections",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "    [connectionName]",
											"value": "",
											"description": "String: key of `ssoConnections`, supported built-in OAuth provider: 'github', 'facebook' or 'google'. This key is used as `provider` parameter in Stelace SSO endpoints. Object with keys below",
											"type": "text"
										},
										{
											"key": "      protocol",
											"value": "oauth2",
											"description": "String [required]: `oauth2` is the only allowed value for built-in OAuth provider",
											"type": "text"
										},
										{
											"key": "      clientId",
											"value": "someClientId",
											"description": "String: SSO connection authentication `clientId`",
											"type": "text"
										},
										{
											"key": "      clientSecret",
											"value": "someClientSecret",
											"description": "String: SSO connection authentication `clientSecret`",
											"type": "text"
										},
										{
											"key": "      afterAuthenticationUrl",
											"value": "https://myapp.com",
											"description": "String: Redirect to this URL after a successful or failed SSO login",
											"type": "text"
										},
										{
											"key": "      scope",
											"value": "email name",
											"description": "String: List of scopes to provide to SSO server",
											"type": "text"
										},
										{
											"key": "      active",
											"value": "true",
											"description": "Boolean (Default: `false`): If false, this SSO connection will be inactive",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/config/private",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config",
										"private"
									]
								}
							},
							"response": [
								{
									"name": "Update email configuration in private config",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"stelace\": {\n\t\t\"ssoConnections\": {\n\t\t\t\"github\": {\n\t\t\t\t\"protocol\": \"oauth2\",\n\t\t\t\t\"authorizationQueryParams\": {\n\t\t\t\t\t\"allow_signup\": true\n\t\t\t\t},\n\t\t\t\t\"clientId\": \"someClientId\",\n\t\t\t\t\"clientSecret\": \"someClientSecret\",\n\t\t\t\t\"afterAuthenticationUrl\": \"https://myapp.com\",\n\t\t\t\t\"userInfoMapping\": {\n\t\t\t\t\t\"firstname\": \"custom_object.first_name\",\n\t\t\t\t\t\"metadata.lastname\": \"family_name\"\n\t\t\t\t},\n\t\t\t\t\"scope\": \"email name\",\n\t\t\t\t\"active\": true\n\t\t\t}\n\t\t}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/config/private",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"config",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"stelace\": {\n\t\t\"ssoConnections\": {\n\t\t\t\"github\": {\n\t\t\t\t\"protocol\": \"oauth2\",\n\t\t\t\t\"authorizationQueryParams\": {\n\t\t\t\t\t\"allow_signup\": true\n\t\t\t\t},\n\t\t\t\t\"clientId\": \"someClientId\",\n\t\t\t\t\"clientSecret\": \"someClientSecret\",\n\t\t\t\t\"afterAuthenticationUrl\": \"https://myapp.com\",\n\t\t\t\t\"userInfoMapping\": {\n\t\t\t\t\t\"firstname\": \"custom_object.first_name\",\n\t\t\t\t\t\"metadata.lastname\": \"family_name\"\n\t\t\t\t},\n\t\t\t\t\"scope\": \"email name\",\n\t\t\t\t\"active\": true\n\t\t\t}\n\t\t}\n    }\n}"
								}
							]
						}
					],
					"description": "Stelace API enables external authentication via Single Sign-On using OAuth2/OpenID. Popular authentication services are pre-configured for social login: Facebook, Google, Github. Enterprise access is needed for custom configuration support.\n\nSSO configuration is specified via the endpoint private config.\n\nCurrently only the grant type [`authorizationCode` flow](https://tools.ietf.org/html/rfc6749#section-1.3) is supported.\n\nLogin via SSO has the following steps:\n1. The user clicks on a link for SSO login in your application.\n2. This link redirects her to Stelace SSO login URL (whose endpoint is `/auth/sso/:publicPlatformId/:provider`) which builds an authorization request to the authorization server.\n3. The user authenticates herself on the authorization server login page and accepts the permissions needed by configured scope.\n4. The authorization server redirects her to Stelace SSO login callback URL which will perform checks and if the login is successful, Stelace API will retrieve access token from authorization server and create a user if she doesn't already exist (matching on authorization server user ID).\n5. The user is redirected to `afterAuthenticationUrl` (your application).\n    \n    5.1. If the login is successful, the query parameter `status` with the value 'success' and the query parameter `code` will be appended to this URL.\n    \n    5.2. However if there was an error, then the query parameter `status` with the value 'serverError' or 'configError' and the query parameter `details` will be appended.\n\n6. With this code, the client-side will request Stelace authentication tokens (access and refresh tokens). Those tokens are the same as if they were generated via the internal login process.\n7. Congratulations, the user is now connected to Stelace API!\n\nYou can now use all Stelace REST API endpoints, in particular using [stelace.js SDK](https://stelace.com/docs/sdk) in browser environment, including standard logout endpoint when your user decides to leave your platform.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Stelace API uses API keys to authenticate requests. \n\nTest mode secret keys have the prefix `seck_test_` and live mode secret keys have the prefix `seck_live_`.\n\nAuthentication to the API is performed via specific authentication headers.\nThere are 2 ways to authenticate your requests:\n\n#### Secret API key\n\nYou need to perform a [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication) with the API key as username and nothing as password.\n\nLet's suppose you have the API key `seck_test_rylx3ebUg0bNs1HkJKlqNHkI`. Add the character `:` at the end of the string as in `seck_test_rylx3ebUg0bNs1HkJKlqNHkI:` and encode this in base64. Prefix the whole with the word `Basic` + a space. Now you get your `Authentication` header: `Basic c2Vja190ZXN0X3J5bHgzZWJVZzBiTnMxSGtKS2xxTkhrSTo=`.\n\n#### Publishable API key (+ user access token)\n\nThe user access token is obtained after a successful login. The authentication header is simply: `Stelace-V1 apiKey=publishable_api_key, token=user_access_token` (replace `publishable_api_key` and `user_access_token` with your real values, not need encode them).\n\n*Please note that if you're using Javascript, take a look at the official [Javascript SDK](https://github.com/stelace/stelace.js). This is automatically handled for you.*\n\n\nAPI requests without authentication will fail.\n\n\nA sandbox test API key is included in Stelace API reference so you can test any example right away.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Metadata",
			"item": [],
			"description": "Most models have `metadata` and `platformData` fields you can use to store and handle your own metadata. Stelace won’t make any internal use of this additional data, except when explicitly mentioned in this documentation, using reserved namespaces.\n\n**If you need to use additional data to index and filter assets in search, please refer to *Custom Attributes*** in *Asset API*.\n\n\n`metadata` allows you to add any custom information you need to run your platform.\n\nAn object's `metadata` has the same access rules than the object itself.\nIf a user has a read access to an object, then she can read the object's `metadata`. If she has a create or edit access, she can edit the `metadata`.\n\n\n##### Platform Data\n\nOn the other hand, `platformData` is designed to only be readable but not editable by platform users. Plase refer to our [docs](https://stelace.com/docs/metadata) for some examples.\n\nTo modify the `platformData` of an object, you should have enough permissions to access the object itself (like `metadata`), _and_ the specific permission **platformData:edit:all**.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Namespaces",
			"item": [],
			"description": "`metadata` and `platformData` are readable by anyone having appropriate permissions.\n\nThough you may want to reveal information to a group of specific users only, or depending on some context.\n\nNamespaces are subsets of `metadata` and `platformData` that are readable and editable if some conditions are fulfilled.\n\nLet’s have a look at data attributes of the following User:\n\n```\n{\n  ...\n  metadata: {\n    customBoolean: true,\n    ...\n    _myNamespace: {\n      customDescription: 'test'\n    },\n    _myNamespace2: {\n      age: 25\n    }\n  },\n  platformData: {\n    someAttribute: false\n  }\n}\n```\n\nThis user has two namespaces: \"myNamespace\" and \"myNamespace2\" in `metadata` and none in `platformData`. Please notice the character \"_\" preceding the namespace name, showing that the object value is a namespace object, not a simple nested object.\n\nNote: `metadata` and `platformData` can have different namespaces.\n\nIf a user doesn't have the right to see a namespace for an object, the whole namespace will be removed from the response. However if a user attempts to edit a namespace they can’t, a 403 error will be returned. We'll see below how to define namespace visibility.\n\n\n##### Default namespaces\n\nFor objects `user` and `asset`, we provide two reserved namespaces `_private` and `_protected` you can use with Assets and Users.\n\n**\"Private\" namespace**\n\nPrivate namespace is only readable and editable by the owner of the object:\n- for User object: the user herself\n- for Asset object: the owner\n\nIt can be used to store any personal information (like identity or bank account number) that should not be visible by other Users.\n\nNote: Some User object attributes have the \"private\" visibility even if they aren't in `metadata._private` object.\nHere's the list of these attributes:\n- `username`\n- `firstname`\n- `lastname`\n- `email`\n\n**\"Protected\" namespace**\n\nProtected namespace lets you reveal information to other parties based on Transaction status.\n\nFor instance, if you want to reveal the some User’s phone only after Transaction validation, you can save a `phone` attribute in `metadata._protected` of this User object. We'll see below how to customize the Transaction visibility step.\n\n\"Protected\" namespace is editable by the owner of the object and readable by other Users with the following conditions:\n- for User object: any User that have a Transaction passing the visibility step with the User\n- for Asset object: any User that have a Transaction passing the visibility step with the Asset owner\n\nNote: The \"protected\" namespace is not displayed when the endpoint returns a list of objects (`/users`, `/assets`).\n\n\n##### Custom namespaces\n\nIf the default namespaces aren't sufficient, you can define your own custom namespaces. Update the attributes `readNamespaces` and `editNamespaces` in Role and API Key objects, without the leading underscore.\n\nLet's suppose you want to store some analytics data that should only be visible to the role \"analyst\". You could add the namespace \"analytics\" to the `readNamespaces` and `editNamespaces` arrays of \"analyst\" Role object.\n\n```\n{\n  value: 'analyst',\n  customRole: true,\n  readNamespaces: [..., 'analytics'],\n  editNamespaces: [..., 'analytics'],\n  ...\n}\n```\n\nNow any \"analyst\" User can read and edit any object data stored in \"analytics\" namespace.\n\n\n##### Customize the Transaction visibility step\n\nBy default, the \"protected\" namespace is revealed once the Transaction reaches the status \"validated\", meaning that the namespace is still revealed even if the Transaction status changes afterwards. If you need to customize this visibility step, you need to update the Asset Type.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Configuration",
			"item": [
				{
					"name": "Get config",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/config",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config"
							]
						},
						"description": "**Permissions**:\n\n- config:read"
					},
					"response": [
						{
							"name": "Get config",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/config",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n    \t\"roles\": {\n    \t\t\"whitelist\": [\"user\", \"provider\"],\n    \t\t\"default\": [\"user\"]\n    \t},\n    \t\"tokenCheckRedirectUrl\": null,\n    \t\"search\": {\n    \t\t\"maxDistance\": 100000\n    \t}\n    },\n    \"custom\": {\n    \t\n    },\n    \"theme\": {\n    \t\n    }\n}"
						}
					]
				},
				{
					"name": "Update config",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "stelace",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  roles",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "    whitelist",
									"value": "[]",
									"description": "Array of Object: Specify the roles a user can provide at creation (c.f. create user). If empty, it will be considered as `['user', 'provider']`",
									"type": "text"
								},
								{
									"key": "    default",
									"value": "['user']",
									"description": "Array of Object: Specify the roles to assign to a user if no roles are provided at creation (c.f. create user). If empty, it will be considered as `['user', 'provider']`",
									"type": "text"
								},
								{
									"key": "instant",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  currency",
									"value": "USD",
									"description": "String: Default currency that will be applied to created transactions if there is no asset's currency",
									"type": "text"
								},
								{
									"key": "custom",
									"value": "{}",
									"description": "Object: You can store any data you need in this object (e.g. Google Analytics ID)",
									"type": "text"
								},
								{
									"key": "theme",
									"value": "{}",
									"description": "Object: Used in upcoming Stelace theming",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/config",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config"
							]
						},
						"description": "Multiple config values can be updated at once.\n\nYou can just pass the parameters to update rather than the whole config object with your PATCH request, exactly like any other Stelace PATCH endpoint.\n\n**Permissions**:\n\n- config:edit"
					},
					"response": [
						{
							"name": "Update config",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stelace\": {\n        \"roles\": {\n            \"default\": [\n                \"user\"\n            ]\n        },\n        \"search\": {\n            \"maxDistance\": 100000\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{apiBase}}/config",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n        \"roles\": {\n            \"whitelist\": [\n                \"user\",\n                \"provider\"\n            ],\n            \"default\": [\n                \"user\"\n            ]\n        },\n        \"tokenCheckRedirectUrl\": null,\n        \"search\": {\n            \"maxDistance\": 100000\n        }\n    },\n    \"custom\": {},\n    \"theme\": {}\n}"
						}
					]
				},
				{
					"name": "Get private config",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/config/private",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config",
								"private"
							]
						},
						"description": "Contrary to the default config, the private config is used to store values that shouldn't be displayed to client-side.\n\n**Permissions**:\n\n- config:read:all"
					},
					"response": [
						{
							"name": "Get private config",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/config/private",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config",
										"private"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n\t\t\"email\": {\n        \t\"host\": \"smtp.example.com\",\n        \t\"port\": 465,\n        \t\"secure\": false,\n        \t\"ignoreTLS\": false,\n        \t\"requireTLS\": true,\n        \t\"auth\": {\n        \t\t\"user\": \"someUser\",\n        \t\t\"pass\": \"secretPassword\"\n        \t},\n        \t\"defaults\": {\n        \t\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n        \t\t\"cc\": \"cc@example.com\",\n        \t\t\"bcc\": \"bcc1@example.com,bcc2@example.com\",\n        \t\t\"replyTo\": \"awesome@service.com\"\n        \t}\n        },\n        \"workflow\": {\n    \t\t\"contexts\": {\n    \t\t\t\"contextName\": {\n    \t\t\t\t\"SOME_STRING\": \"test\",\n    \t\t\t\t\"A_NUMBER\": 150\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n}"
						}
					]
				},
				{
					"name": "Update private config",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "stelace",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  email",
									"value": "{}",
									"description": "Object: please consult the section *Update email configuration in private config* in the Email API",
									"type": "text"
								},
								{
									"key": "  workflow",
									"value": "{}",
									"description": "Object: please consult the section *Update workflow environment variables in private config* in the Workflow API",
									"type": "text"
								},
								{
									"key": "  ssoConnections",
									"value": "{}",
									"description": "Object: please consult the section *Update built-in OAuth providers configuration in private config* in the OAuth2 (SSO / social login)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/config/private",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config",
								"private"
							]
						},
						"description": "Multiple private config values can be updated at once.\n\nYou can just pass the parameters to update rather than the whole config object with your PATCH request, exactly like any other Stelace PATCH endpoint.\n\n**Permissions**:\n\n- config:edit:all"
					},
					"response": [
						{
							"name": "Update private config",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stelace\": {\n\t\t\"email\": {\n        \t\"host\": \"smtp.example.com\",\n        \t\"port\": 465,\n        \t\"secure\": false,\n        \t\"ignoreTLS\": false,\n        \t\"requireTLS\": true,\n        \t\"auth\": {\n        \t\t\"user\": \"someUser\",\n        \t\t\"pass\": \"secretPassword\"\n        \t},\n        \t\"defaults\": {\n        \t\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n        \t\t\"cc\": \"cc@example.com\",\n        \t\t\"bcc\": \"bcc1@example.com,bcc2@example.com\",\n        \t\t\"replyTo\": \"awesome@service.com\"\n        \t}\n        },\n        \"workflow\": {\n    \t\t\"contexts\": {\n    \t\t\t\"contextName\": {\n    \t\t\t\t\"SOME_STRING\": \"test\",\n    \t\t\t\t\"A_NUMBER\": 150\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/config/private",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config",
										"private"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n\t\t\"email\": {\n        \t\"host\": \"smtp.example.com\",\n        \t\"port\": 465,\n        \t\"secure\": false,\n        \t\"ignoreTLS\": false,\n        \t\"requireTLS\": true,\n        \t\"auth\": {\n        \t\t\"user\": \"someUser\",\n        \t\t\"pass\": \"secretPassword\"\n        \t},\n        \t\"defaults\": {\n        \t\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n        \t\t\"cc\": \"cc@example.com\",\n        \t\t\"bcc\": \"bcc1@example.com,bcc2@example.com\",\n        \t\t\"replyTo\": \"awesome@service.com\"\n        \t}\n        },\n        \"workflow\": {\n    \t\t\"contexts\": {\n    \t\t\t\"contextName\": {\n    \t\t\t\t\"SOME_STRING\": \"test\",\n    \t\t\t\t\"A_NUMBER\": 150\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n}"
						}
					]
				}
			],
			"description": "The Configuration API lets you manage general platform settings, particularly useful if you rely on Stelace Command or one of our Stelace Instant [starter kits](https://stelace.com/docs/getting-started).",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User API",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Get user list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=usr_WHlfQps1I3a1gJYz2I3a,usr_Y0tfQps1I3a1gJYz2I3a&type&createdDate=2019-01-01&updatedDate=2019-01-01&query=Nausicaa&userOrganizationId=org_WHlfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `name`, `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "usr_WHlfQps1I3a1gJYz2I3a,usr_Y0tfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma-separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										},
										{
											"key": "type",
											"value": null,
											"description": "String (Default: `user`): Filter on the user type (possible values: `user`, `organization`, `all`)"
										},
										{
											"key": "createdDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "updatedDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "query",
											"value": "Nausicaa",
											"description": "String: Filter users on `username`, `email`, `firstName`, `lastName` and `displayName`. This is a strict match, case-insensitive."
										},
										{
											"key": "userOrganizationId",
											"value": "org_WHlfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma-separated IDs: Filter users belonging to these organizations"
										}
									]
								},
								"description": "Returns the list of all users created, in sorted order, the most recent user appearing first.\n\nAll parameters are optional.\n\n**Permission**:\n\n- user:list:all - can list all users\n"
							},
							"response": [
								{
									"name": "Get user list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users/:userId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: user ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- user:read - can read oneself as authenticated user\n- user:read:all - can read every single user"
							},
							"response": [
								{
									"name": "Get user",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users/usr_WHlfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"usr_WHlfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"description\": \"Car lover\",\n    \"organizations\": {},\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\"\n}"
								}
							]
						},
						{
							"name": "Create user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "john@example.com",
											"description": "String [required]: The user identifier for login (must be unique). Can be anything: email, phone, nickname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "secretPassword",
											"description": "String [required]: User password (should have at least 8 characters). This field will never be displayed.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Car lover",
											"description": "String (Default: `null`):  User's description.",
											"type": "text"
										},
										{
											"key": "displayName",
											"value": "John",
											"description": "String (Default: `null`): The name that is publicly displayed",
											"type": "text"
										},
										{
											"key": "firstname",
											"value": "John",
											"description": "String (Default: `null`): User's firstname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Locke",
											"description": "String (Default: `null`): User's lastname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "john@example.com",
											"description": "String (Default: `null`): User's email (private namespace). This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "roles",
											"value": "",
											"description": "String (Default: `['user', 'provider']`): User's roles, needs the permission `user:config:all` to change roles",
											"type": "text"
										},
										{
											"key": "type",
											"value": "",
											"description": "String (Default: `user`): The user type define if the user is a person or an organization. To create an organization, the user must be authenticated as she will be assigned as the first user in the organization",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/users",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Created user is granted with `user` and `provider` roles by default.\n\nPlease refer to the *Role API* section for more details.\n\n**Permissions**:\n\n- user:create - can create a user while not being authenticated\n- user:create:all - can create other users on their behalf, as authenticated user (or not)"
							},
							"response": [
								{
									"name": "Create user",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"Car lover\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/users",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"Car lover\",\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"organizations\": {},\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update user",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "john@example.com",
											"description": "String: The user identifier for login (must be unique). Can be anything: email, phone, nickname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Car lover",
											"description": "String:  User's description.",
											"type": "text"
										},
										{
											"key": "displayName",
											"value": "John",
											"description": "String: The name that is publicly displayed",
											"type": "text"
										},
										{
											"key": "firstname",
											"value": "John",
											"description": "String: User's firstname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Locke",
											"description": "String: User's lastname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "john@example.com",
											"description": "String: User's email. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "roles",
											"value": "",
											"description": "String: User's roles, needs the permission `user:config:all` to change roles",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/users/:userId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "String: user ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- user:edit - can edit own authenticated user object\n- user:edit:all - can edit other users on their behalf"
							},
							"response": [
								{
									"name": "Update user",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"username\": \"john@example.com\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"Car lover\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/users/usr_WHlfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"usr_WHlfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"Car lover\",\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"organizations\": {},\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users/:userId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: user ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- user:remove - can remove own user\n- user:remove:all - can remove any user on their behalf"
							},
							"response": [
								{
									"name": "Delete user",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users/:userId",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "usr_WHlfQps1I3a1gJYz2I3a",
													"description": "String: user ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Check username availability",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users/check-availability?username=john%40example.com",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										"check-availability"
									],
									"query": [
										{
											"key": "username",
											"value": "john%40example.com",
											"description": "String [required]: Provide the encoded URL-safe username to check its availability"
										}
									]
								},
								"description": "The username is unique across users so you may want to use this endpoint to check if a username is available during your registration process.\n\n\n**Permission**:\n\n- user:list:all"
							},
							"response": [
								{
									"name": "Check username availability",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users/check-availability?username=john%40example.com",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"check-availability"
											],
											"query": [
												{
													"key": "username",
													"value": "john%40example.com"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n  \"available\": true\n}"
								}
							]
						}
					]
				},
				{
					"name": "Password",
					"item": [
						{
							"name": "Change password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "currentPassword",
											"value": "secretPassword",
											"description": "String [required]",
											"type": "text"
										},
										{
											"key": "newPassword",
											"value": "newPassword",
											"description": "String [required]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/password/change",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"password",
										"change"
									]
								},
								"description": "Users must be authenticated to use this endpoint."
							},
							"response": [
								{
									"name": "Change password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"currentPassword\": \"secretPassword\",\n\t\"newPassword\": \"newPassword\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/password/change",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"password",
												"change"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"success\": true\n}"
								}
							]
						},
						{
							"name": "Request a password reset",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "username",
											"value": "john@example.com",
											"description": "String [required]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/password/reset/request",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"password",
										"reset",
										"request"
									]
								},
								"description": "A user whose password is lost can go through this two-step process to get a new one:\n\n1. The user provides her own `username`. A reset token is created and emitted in the `password__reset_requested` Event object. It can be retrieved via Webhooks, Workflows or Event API. This token has to be securely sent to the user (email or phone).\n2. The user submits this token with a new password.\n\nPlease note that in `live` environment this endpoint will also return a success response if username does not exist. You can rely on username availability endpoint to customize your UI if your `public` role has `user:list:all` permission and you’re not concerned about [username enumeration](https://www.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_%28OWASP-AT-002%29).\n\n**Permission**:\n\n- password:reset"
							},
							"response": [
								{
									"name": "Request a password reset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"username\": \"john@example.com\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/password/reset/request",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"password",
												"reset",
												"request"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"success\": true\n}"
								}
							]
						},
						{
							"name": "Confirm a password reset",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "resetToken",
											"value": "fdsq456f7e8r9123",
											"description": "String [required]: reset token retrieved from the event `password__reset_requested`",
											"type": "text"
										},
										{
											"key": "newPassword",
											"value": "newPassword",
											"description": "String [required]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/password/reset/confirm",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"password",
										"reset",
										"confirm"
									]
								},
								"description": "This endpoint must be called no later than 15 minutes after `resetToken` was requested, for security reasons."
							},
							"response": [
								{
									"name": "Confirm a password reset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resetToken\": \"fdsq456f7e8r9123\",\n\t\"newPassword\": \"newPassword\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/password/reset/confirm",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"password",
												"reset",
												"confirm"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"success\": true\n}"
								}
							]
						}
					]
				},
				{
					"name": "Organization",
					"item": [
						{
							"name": "Create organization",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "description",
											"value": "Car lover",
											"description": "String (Default: `null`): Organization description.",
											"type": "text"
										},
										{
											"key": "displayName",
											"value": "John",
											"description": "String (Default: `null`): The name that is publicly displayed",
											"type": "text"
										},
										{
											"key": "firstname",
											"value": "John",
											"description": "String (Default: `null`): Organization contact's firstname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Locke",
											"description": "String (Default: `null`): Organization contact's lastname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "john@example.com",
											"description": "String (Default: `null`): Organization contact's email (private namespace). This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "organization",
											"description": "String: The only value accepted is `organization`",
											"type": "text"
										},
										{
											"key": "organizations",
											"value": "{ org_xC3ZlGs1Jo71gb2G0Jo7: {} }",
											"description": "Object (Default: `{}`): Specify the parent organization (only one ID is accepted). If the permission `organization:create:all` is missing, the `orgOwnerId` must belong to the parent organization or an ancestor of this parent organization. Please refer to the endpoint **Update user's organizations** for more details",
											"type": "text"
										},
										{
											"key": "orgOwnerId",
											"value": "",
											"description": "String: Automatically set to the current user if authenticated. Must be defined otherwise.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/users",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users"
									]
								},
								"description": "Unlike the standard User object, username and password cannot be provided to create an Organization.\n\nSome User needs to be authenticated before creating an Organization that will automatically be joined upon creation.\n\n\n**Permissions**:\n\n- organization:create - can create an organization as current user\n- organization:create:all - can create an organization as any user\n"
							},
							"response": [
								{
									"name": "Create organization",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"displayName\": \"Car Corp\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"John Locke's company\",\n    \"type\": \"organization\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/users",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"org_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"John Lockes' company\",\n    \"type\": \"organization\",\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"organizations\": {\n        \"org_xC3ZlGs1Jo71gb2G0Jo7\": {}\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update organization",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "description",
											"value": "Car lover",
											"description": "String: Organization description",
											"type": "text"
										},
										{
											"key": "displayName",
											"value": "John",
											"description": "String: The name that is publicly displayed",
											"type": "text"
										},
										{
											"key": "firstname",
											"value": "John",
											"description": "String: Organization contact's firstname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "Locke",
											"description": "String: Organization contact's lastname. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "email",
											"value": "john@example.com",
											"description": "String: Organization contact's email. This field has the private namespace visibility. Please refer to *Metadata section* for more details.",
											"type": "text"
										},
										{
											"key": "roles",
											"value": "",
											"description": "String: Organization's roles, needs the permission `user:config:all` to change roles",
											"type": "text"
										},
										{
											"key": "orgOwnerId",
											"value": "",
											"description": "String: Organization owner userId. Only the authenticated current owner of the organization can update this without `user:edit:all` permission.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/users/:organizationId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":organizationId"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "org_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: organization ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- user:edit - can edit an organization only if the user belongs to it or an ancestor of it\n- user:edit:all - can edit any organization"
							},
							"response": [
								{
									"name": "Update organization",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"John Lockes' company\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/users/org_WHlfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"org_WHlfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"org_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"John Lockes' company\",\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"organizations\": {\n        \"org_xC3ZlGs1Jo71gb2G0Jo7\": {}\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete organization",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users/:organizationId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":organizationId"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "org_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: organization ID"
										}
									]
								},
								"description": "To remove an organization, it must have no child organization. All members will automatically leave the organization before removal, but you have to ensure that the organization does not own any Asset.\n\n**Permissions**:\n\n- user:remove - can remove an organization as its owner\n- user:remove:all - can remove any organization"
							},
							"response": [
								{
									"name": "Delete organization",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users/:organizationId",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												":organizationId"
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "org_WHlfQps1I3a1gJYz2I3a",
													"description": "String: organization ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add user to an organization or update roles within",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "roles",
											"value": "[]",
											"description": "Array of String: Define the roles the user will take if she authenticates as the organization via the header `x-stelace-organization-id`.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/users/:userId/organizations/:organizationId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":userId",
										"organizations",
										":organizationId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: user ID"
										},
										{
											"key": "organizationId",
											"value": "org_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: organization ID"
										}
									]
								},
								"description": "You can specify Roles granted to the User within an Organization. The User will join the Organization if not a member yet.\n\n**Permissions**:\n\n- user:configOrganization - can configure User Roles within Organization if the User making the request already belongs to the selected Organization or a parent Organization\n- user:configOrganization:all - can configure any User Roles within any Organization, including Users not belonging to the Organization yet. In other words, you can make any user join any organization with this permission."
							},
							"response": [
								{
									"name": "Add user into organization or update her roles into it",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "x-stelace-organization-id",
												"value": "org_WHlfQps1I3a1gJYz2I3a"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"roles\": [\"user\", \"provider\"]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/users/usr_WHlfQps1I3a1gJYz2I3a/organizations/org_WHlfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"usr_WHlfQps1I3a1gJYz2I3a",
												"organizations",
												"org_WHlfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"displayName\": \"John\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Locke\",\n    \"email\": \"john@example.com\",\n    \"description\": \"Car lover\",\n    \"roles\": [\n        \"user\",\n        \"provider\"\n    ],\n    \"organizations\": {\n        \"org_WHlfQps1I3a1gJYz2I3a\": {\n            \"roles\": [\n                \"user\",\n                \"provider\"\n            ]\n        }\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Remove a user from an organization",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/users/:userId/organizations/:organizationId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"users",
										":userId",
										"organizations",
										":organizationId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: user ID"
										},
										{
											"key": "organizationId",
											"value": "org_WHlfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: organization ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- user:configOrganization - can remove a user from an organization the current user belongs to, or from a child organization\n- user:configOrganization:all - can remove a user from any organization"
							},
							"response": [
								{
									"name": "Remove a user from an organization",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "x-stelace-organization-id",
												"value": "org_WHlfQps1I3a1gJYz2I3a"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/users/usr_WHlfQps1I3a1gJYz2I3a/organizations/org_WHlfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"users",
												"usr_WHlfQps1I3a1gJYz2I3a",
												"organizations",
												"org_WHlfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Organizations allow your Users to share Assets, Transactions and other objects with a common account.\n\nOrganizations are very similar to Users and rely on the same object. You can reference an Organization id wherever you use a User id.\n\nTo be authenticated as an Organization the current User belongs to, just provide the header 'x-stelace-organization-id' along with the usual User authentication mean.\n\n__Permissions within organizations__\n\nOnce the header 'x-stelace-organization-id' is passed, the user permissions is no more defined by roles directly to user via `user.roles`, but by roles within the specified organization via `user.organizations[organizationId].roles`.\n\nMoreover, the organizations roles act as boundaries. For instance, even if the user has the superpower `dev` role within her organization, if the organization has only the permission `asset:read` via its roles, the user will only be able to read organization asset and does nothing else.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Role API",
			"item": [
				{
					"name": "Get role list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/roles",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "**Permission**:\n\n- role:list:all"
					},
					"response": [
						{
							"name": "Get role list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/roles",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get role",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/roles/:roleId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"roles",
								":roleId"
							],
							"variable": [
								{
									"key": "roleId",
									"value": "role_C5ZIBs105v1gHK1i05v",
									"type": "string",
									"description": "String: role ID"
								}
							]
						},
						"description": "**Permission**:\n\n- role:read:all"
					},
					"response": [
						{
							"name": "Get role",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/roles/role_C5ZIBs105v1gHK1i05v",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"roles",
										"role_C5ZIBs105v1gHK1i05v"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"role_C5ZIBs105v1gHK1i05v\",\n    \"name\": \"Super User\",\n    \"value\": \"super-user\",\n    \"customRole\": true,\n    \"parentId\": null,\n    \"permissions\": [\n        \"asset:read:all\",\n        \"asset:create:all\",\n        \"asset:edit:all\",\n        \"asset:remove:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Super User",
									"description": "String [required]: The role name",
									"type": "text"
								},
								{
									"key": "value",
									"value": "super-user",
									"description": "String [required]: The role value that cannot be changed after the creation. Choose a value that has a meaning as it will be used as reference in other objects (user, api key)",
									"type": "text"
								},
								{
									"key": "parentId",
									"value": "null",
									"description": "String (Default: `null`): The parent role ID. If a role has a `parentId`, it inherits all `permissions`, `readNamespaces` and `editNamespaces`.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "['asset:read:all', 'asset:create:all', 'asset:edit:all', 'asset:remove:all']",
									"description": "Array of String (Default: `[]`): List of permissions associated to this role. To associate all permissions, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "readNamespaces",
									"value": "[]",
									"description": "Array of String (Default: `[]`): List of namespaces for reading objects associated to this role. To associate all namespaces, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "editNamespaces",
									"value": "[]",
									"description": "Array of String (Default: `[]`): List of namespaces for editing objects associated to this role. To associate all namespaces, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/roles",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "**Permission**:\n\n- role:create:all"
					},
					"response": [
						{
							"name": "Create role",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Super User\",\n    \"value\": \"super-user\",\n    \"parentId\": null,\n    \"permissions\": [\n        \"asset:read:all\",\n        \"asset:create:all\",\n        \"asset:edit:all\",\n        \"asset:remove:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": []\n}"
								},
								"url": {
									"raw": "{{apiBase}}/roles",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"role_C5ZIBs105v1gHK1i05v\",\n    \"name\": \"Super User\",\n    \"value\": \"super-user\",\n    \"customRole\": true,\n    \"parentId\": null,\n    \"permissions\": [\n        \"asset:read:all\",\n        \"asset:create:all\",\n        \"asset:edit:all\",\n        \"asset:remove:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update role",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Super User",
									"description": "String: The role name",
									"type": "text"
								},
								{
									"key": "parentId",
									"value": "null",
									"description": "String: The parent role ID. If a role has a `parentId`, it inherits all `permissions`, `readNamespaces` and `editNamespaces`.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "['asset:read:all', 'asset:create:all', 'asset:edit:all', 'asset:remove:all']",
									"description": "Array of String: List of permissions associated to this role. To associate all permissions, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "readNamespaces",
									"value": "[]",
									"description": "Array of String: List of namespaces for reading objects associated to this role. To associate all namespaces, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "editNamespaces",
									"value": "[]",
									"description": "Array of String: List of namespaces for editing objects associated to this role. To associate all namespaces, use `['*']` as value.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/roles/:roleId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"roles",
								":roleId"
							],
							"variable": [
								{
									"key": "roleId",
									"value": "role_C5ZIBs105v1gHK1i05v",
									"description": "String: role ID"
								}
							]
						},
						"description": "**Permission**:\n\n- role:edit:all"
					},
					"response": [
						{
							"name": "Update role",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Super User\",\n    \"parentId\": null,\n    \"permissions\": [\n        \"asset:read:all\",\n        \"asset:create:all\",\n        \"asset:edit:all\",\n        \"asset:remove:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": []\n}"
								},
								"url": {
									"raw": "{{apiBase}}/roles/role_C5ZIBs105v1gHK1i05v",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"roles",
										"role_C5ZIBs105v1gHK1i05v"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"role_C5ZIBs105v1gHK1i05v\",\n    \"name\": \"Super User\",\n    \"value\": \"super-user\",\n    \"customRole\": true,\n    \"parentId\": null,\n    \"permissions\": [\n        \"asset:read:all\",\n        \"asset:create:all\",\n        \"asset:edit:all\",\n        \"asset:remove:all\"\n    ],\n    \"readNamespaces\": [],\n    \"editNamespaces\": [],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete role",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/roles/:roleId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"roles",
								":roleId"
							],
							"variable": [
								{
									"key": "roleId",
									"value": "role_C5ZIBs105v1gHK1i05v",
									"type": "string",
									"description": "String: role ID"
								}
							]
						},
						"description": "**Permission**:\n\n- role:remove:all"
					},
					"response": [
						{
							"name": "Delete role",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/roles/role_C5ZIBs105v1gHK1i05v",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"roles",
										"role_C5ZIBs105v1gHK1i05v"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "You can use Roles to regroup Users with similar access rights, such as marketplace sellers, paying platform subscribers or third-party service providers.\n\nSome Roles are provided by default (`customRole` attribute is false). You can edit them but you can't remove them. However, you can create your own custom Roles that can be removed.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Asset API",
			"item": [
				{
					"name": "Asset Type",
					"item": [
						{
							"name": "Get asset type list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/asset-types",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"asset-types"
									]
								},
								"description": "**Permission**:\n\n- assetType:list:all"
							},
							"response": [
								{
									"name": "Get asset type list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/asset-types",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"asset-types"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get asset type",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/asset-types/:assetTypeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"asset-types",
										":assetTypeId"
									],
									"variable": [
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset type ID"
										}
									]
								},
								"description": "**Permission**:\n\n- assetType:read:all"
							},
							"response": [
								{
									"name": "Get asset type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/asset-types/typ_MGsfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"asset-types",
												"typ_MGsfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"name\": \"Sharing\",\n    \"timeBased\": true,\n    \"infiniteStock\": false,\n    \"pricing\": {\n        \"ownerFeesPercent\": 5,\n        \"takerFeesPercent\": 15\n    },\n    \"timing\": {\n        \"timeUnit\": \"d\",\n        \"maxDuration\": {\n            \"d\": 100\n        },\n        \"minDuration\": {\n            \"d\": 1\n        }\n    },\n    \"bookingProcess\": [],\n    \"namespaces\": {\n        \"visibility\": {\n            \"protected\": [\n                \"confirmed\",\n                \"accepted\"\n            ]\n        }\n    },\n    \"unavailableWhen\": [],\n    \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n    \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create asset type",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Sharing",
											"description": "String [required]: Name to easily identify the asset type",
											"type": "text"
										},
										{
											"key": "timeBased",
											"value": "true",
											"description": "Boolean [required]: If true, dates must be specified for transactions associated with this asset type ",
											"type": "text"
										},
										{
											"key": "infiniteStock",
											"value": "false",
											"description": "Boolean (Default: `false`): If true, assets cannot be unavailable due to quantity",
											"type": "text"
										},
										{
											"key": "pricing",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  ownerFeesPercent",
											"value": "5",
											"description": "Integer (Default: `0`): Fees taken by the platform from the owner. In this example, the owner will get price - 5%.",
											"type": "text"
										},
										{
											"key": "  takerFeesPercent",
											"value": "15",
											"description": "Integer (Default: `0`): Fees taken by the platform from the taker. In this example, the taker will pay price + 15%.",
											"type": "text"
										},
										{
											"key": "timing",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  timeUnit",
											"value": "d",
											"description": "String (Default: `d`): Will be used as time unit for assets if the property `timeBased` is `true`.\n- `m` for minute\n- `h` for hour\n- `d` for day\n- `n` for night\n- `w` for week\n- `M` for month",
											"type": "text"
										},
										{
											"key": "  minDuration",
											"value": "{ d: 1 }",
											"description": "Object (Default: `null`): Provide a duration object (a key for the time unit, a value for the number of time units, only integer accepted).",
											"type": "text"
										},
										{
											"key": "  maxDuration",
											"value": "{ d: 100 }",
											"description": "Object (Default: `null`): Provide a duration object (a key for the time unit, a value for the number of time units, only integer accepted).",
											"type": "text"
										},
										{
											"key": "transactionProcess",
											"value": "{}",
											"description": "Object with keys below (Default: `null`): If `null`, the default transaction process will be used.",
											"type": "text"
										},
										{
											"key": "  initStatus",
											"value": "draft",
											"description": "String [required]: Define the starting status for your custom transaction process",
											"type": "text"
										},
										{
											"key": "  cancelStatus",
											"value": "cancelled",
											"description": "String [required]: Define the cancel status for your custom transaction process that will be applied in cancellation situations",
											"type": "text"
										},
										{
											"key": "  transitions",
											"value": "[{ name: 'complete', from: 'draft', to: 'completed' }, { name: 'cancel', from: '*', to: 'cancelled' }]",
											"description": "Array of Object: Define the transitions that describe your custom transaction process.\nA transition object has the following properties:\n- String `name`: action name, will be used in transaction create transition endpoint\n- String `from`: the transition is allowed only if `from` equals to the current transaction status. The special value `*` can be used to match any status. Can be useful for cancellation situation for instance\n- String `to`: the new transaction status after the transition applies\n- Array of String `actors`: A list of actors allowed to trigger the transition can be speficified for users that don't have the permission `transaction:transition:all`. The possible values are: `owner`, `taker`. If empty, the check won't be applied.",
											"type": "text"
										},
										{
											"key": "namespaces",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  visibility",
											"value": "{ protected: ['confirmed', 'accepted'] }",
											"description": "Object (Default: `{ protected = ['validated'] }`): The key is the namespace name and the value is an array of transaction statuses that defines when the namespace is visible. In this example, the namespace \"protected\" is revealed after the transaction reaches the status 'confirmed' or 'accepted'. Currently only the namespace 'protected' can use this object.",
											"type": "text"
										},
										{
											"key": "unavailableWhen",
											"value": "['validated', 'completed']",
											"description": "Array of String (Default: ['validated', 'completed']): Transactions associated with this asset type will block availability only if they have one of those statuses. It means the asset quantity will be considered as used during the transaction period. However if the transaction status changes and isn't in the list, the transaction won't be considered as blocking the asset quantity anymore (like in cancellation situation).",
											"type": "text"
										},
										{
											"key": "isDefault",
											"value": "false",
											"description": "Boolean (Default: `false`): Define this asset type as the default one. If an asset is created without specifying an `assetTypeId`, the default asset type will be used. By default, it's true if this asset type is the first created one.",
											"type": "text"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Boolean (Default: `true`) If false, asset with this asset type can't be booked via *Transaction API*.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/asset-types",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"asset-types"
									]
								},
								"description": "**Permission**:\n\n- assetType:create:all"
							},
							"response": [
								{
									"name": "Create asset type",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Sharing\",\n    \"timeBased\": true,\n    \"infiniteStock\": false,\n    \"pricing\": {\n        \"ownerFeesPercent\": 5,\n        \"takerFeesPercent\": 15\n    },\n    \"timing\": {\n        \"timeUnit\": \"d\",\n        \"maxDuration\": { \"d\": 100 },\n        \"minDuration\": { \"d\": 1 }\n    },\n    \"transactionProcess\": {\n    \t\"initStatus\": \"draft\",\n    \t\"cancelStatus\": \"cancelled\",\n    \t\"transitions\": [\n    \t\t{ \"name\": \"complete\", \"from\": \"draft\", \"to\": \"completed\" },\n    \t\t{ \"name\": \"cancel\", \"from\": \"*\", \"to\": \"cancelled\" }\n    \t]\n    },\n    \"namespaces\": {\n        \"visibility\": {\n            \"protected\": [\n                \"confirmed\",\n                \"accepted\"\n            ]\n        }\n    },\n    \"unavailableWhen\": [\n    \t\"validated\",\n    \t\"completed\"\n    ],\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{apiBase}}/asset-types",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"asset-types"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"name\": \"Sharing\",\n    \"timeBased\": true,\n    \"infiniteStock\": false,\n    \"pricing\": {\n        \"ownerFeesPercent\": 5,\n        \"takerFeesPercent\": 15\n    },\n    \"timing\": {\n        \"timeUnit\": \"d\",\n        \"maxDuration\": {\n            \"d\": 100\n        },\n        \"minDuration\": {\n            \"d\": 1\n        }\n    },\n    \"transactionProcess\": {\n        \"initStatus\": \"draft\",\n        \"cancelStatus\": \"cancelled\",\n        \"transitions\": [\n            {\n                \"name\": \"complete\",\n                \"from\": \"draft\",\n                \"to\": \"completed\"\n            },\n            {\n                \"name\": \"cancel\",\n                \"from\": \"*\",\n                \"to\": \"cancelled\"\n            }\n        ]\n    },\n    \"namespaces\": {\n        \"visibility\": {\n            \"protected\": [\n                \"confirmed\",\n                \"accepted\"\n            ]\n        }\n    },\n    \"unavailableWhen\": [\n        \"validated\",\n        \"completed\"\n    ],\n    \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n    \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update asset type",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Sharing",
											"description": "String: Name to easily identify the asset type",
											"type": "text"
										},
										{
											"key": "timeBased",
											"value": "true",
											"description": "Boolean: If true, dates must be specified for transactions associated with this asset type ",
											"type": "text"
										},
										{
											"key": "infiniteStock",
											"value": "false",
											"description": "Boolean: If true, assets cannot be unavailable due to quantity",
											"type": "text"
										},
										{
											"key": "pricing",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  ownerFeesPercent",
											"value": "5",
											"description": "Integer: Fees taken by the platform from the owner. In this example, the owner will get price - 5%.",
											"type": "text"
										},
										{
											"key": "  takerFeesPercent",
											"value": "15",
											"description": "Integer: Fees taken by the platform from the taker. In this example, the taker will pay price + 15%.",
											"type": "text"
										},
										{
											"key": "timing",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  timeUnit",
											"value": "d",
											"description": "String: Will be used as time unit for assets if the property `timeBased` is true.\n- `m` for minute\n- `h` for hour\n- `d` for day\n- `n` for night\n- `w` for week\n- `M` for month",
											"type": "text"
										},
										{
											"key": "  minDuration",
											"value": "{ d: 1 }",
											"description": "Object: Provide a duration object (a key for the time unit, a value for the number of time units, only integer accepted).",
											"type": "text"
										},
										{
											"key": "  maxDuration",
											"value": "{ d: 100 }",
											"description": "Object: Provide a duration object (a key for the time unit, a value for the number of time units, only integer accepted).",
											"type": "text"
										},
										{
											"key": "transactionProcess",
											"value": "{}",
											"description": "Object with keys below: If `null`, the default transaction process will be used. The whole transaction process must be provided for update",
											"type": "text"
										},
										{
											"key": "  initStatus",
											"value": "draft",
											"description": "String [required]: Define the starting status for your custom transaction process",
											"type": "text"
										},
										{
											"key": "  cancelStatus",
											"value": "cancelled",
											"description": "String [required]: Define the cancel status for your custom transaction process that will be applied in cancellation situations",
											"type": "text"
										},
										{
											"key": "  transitions",
											"value": "[{ name: 'complete', from: 'draft', to: 'completed' }, { name: 'cancel', from: '*', to: 'cancelled' }]",
											"description": "Array of Object: Define the transitions that describe your custom transaction process.\nA transition object has the following properties:\n- String `name`: action name, will be used in transaction create transition endpoint\n- String `from`: the transition is allowed only if `from` equals to the current transaction status. The special value `*` can be used to match any status. Can be useful for cancellation situation for instance\n- String `to`: the new transaction status after the transition applies\n- Array of String `actors`: A list of actors allowed to trigger the transition can be speficified for users that don't have the permission `transaction:transition:all`. The possible values are: `owner`, `taker`. If empty, the check won't be applied.",
											"type": "text"
										},
										{
											"key": "namespaces",
											"value": "{}",
											"description": "Object with keys below",
											"type": "text"
										},
										{
											"key": "  visibility",
											"value": "{ protected: ['confirmed', 'accepted'] }",
											"description": "Object: The key is the namespace name and the value is an array of transaction statuses that defines when the namespace is visible. In this example, the namespace 'protected' is revealed after the transaction reaches the status 'confirmed' or 'accepted'. Currently only the namespace 'protected' can use this object.",
											"type": "text"
										},
										{
											"key": "unavailableWhen",
											"value": "['validated', 'completed']",
											"description": "Array of String: Transactions associated with this asset type will block availability only if they have one of those statuses. It means the asset quantity will be considered as used during the transaction period. However if the transaction status changes and isn't in the list, the transaction won't be considered as blocking the asset quantity anymore (like in cancellation situation).",
											"type": "text"
										},
										{
											"key": "isDefault",
											"value": "false",
											"description": "Boolean: Define this asset type as the default one. If an asset is created without specifying an `assetTypeId`, the default asset type will be used.",
											"type": "text"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Boolean: If false, asset with this asset type can't be booked via *Transaction API*.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/asset-types/:assetTypeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"asset-types",
										":assetTypeId"
									],
									"variable": [
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset type ID"
										}
									]
								},
								"description": "Caveat: asset types should be updated with care as it impacts existing assets.\n\nWe include snapshot in every transaction object to make sure all goes according to plan during pending transactions.\n\n**Permission**:\n\n- assetType:edit:all"
							},
							"response": [
								{
									"name": "Update asset type",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Sharing\",\n    \"timeBased\": true,\n    \"infiniteStock\": false,\n    \"pricing\": {\n        \"ownerFeesPercent\": 5,\n        \"takerFeesPercent\": 15\n    },\n    \"timing\": {\n        \"timeUnit\": \"d\",\n        \"maxDuration\": { \"d\": 100 },\n        \"minDuration\": { \"d\": 1 }\n    },\n    \"transactionProcess\": {\n    \t\"initStatus\": \"draft\",\n    \t\"cancelStatus\": \"cancelled\",\n    \t\"transitions\": [\n    \t\t{ \"name\": \"complete\", \"from\": \"draft\", \"to\": \"completed\" },\n    \t\t{ \"name\": \"cancel\", \"from\": \"*\", \"to\": \"cancelled\" }\n    \t]\n    },\n    \"namespaces\": {\n        \"visibility\": {\n            \"protected\": [\n                \"confirmed\",\n                \"accepted\"\n            ]\n        }\n    },\n    \"unavailableWhen\": [\n    \t\"validated\",\n    \t\"completed\"\n    ],\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{apiBase}}/asset-types/typ_MGsfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"asset-types",
												"typ_MGsfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"name\": \"Sharing\",\n    \"timeBased\": true,\n    \"infiniteStock\": false,\n    \"pricing\": {\n        \"ownerFeesPercent\": 5,\n        \"takerFeesPercent\": 15\n    },\n    \"timing\": {\n        \"timeUnit\": \"d\",\n        \"maxDuration\": {\n            \"d\": 100\n        },\n        \"minDuration\": {\n            \"d\": 1\n        }\n    },\n    \"transactionProcess\": {\n        \"initStatus\": \"draft\",\n        \"cancelStatus\": \"cancelled\",\n        \"transitions\": [\n            {\n                \"name\": \"complete\",\n                \"from\": \"draft\",\n                \"to\": \"completed\"\n            },\n            {\n                \"name\": \"cancel\",\n                \"from\": \"*\",\n                \"to\": \"cancelled\"\n            }\n        ]\n    },\n    \"namespaces\": {\n        \"visibility\": {\n            \"protected\": [\n                \"confirmed\",\n                \"accepted\"\n            ]\n        }\n    },\n    \"unavailableWhen\": [\n        \"validated\",\n        \"completed\"\n    ],\n    \"active\": true\n}"
								}
							]
						},
						{
							"name": "Delete asset type",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/asset-types/:assetTypeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"asset-types",
										":assetTypeId"
									],
									"variable": [
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset type ID"
										}
									]
								},
								"description": "**Permission**:\n\n- assetType:remove:all"
							},
							"response": [
								{
									"name": "Delete asset type",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/asset-types/typ_MGsfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"asset-types",
												"typ_MGsfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Asset Types let you tune time units and constraints, pricing and duration parameters. Asset Types are required to create Assets.\n\n#### Asset Types examples\n\n![Asset Type examples by use case](https://user-images.githubusercontent.com/12909094/60624678-38a6b880-9de6-11e9-8eb7-ff95c70006da.png)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Asset",
					"item": [
						{
							"name": "Get asset list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/assets?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=ast_2l7fQps1I3a1gJYz2I3a,ast_dmM034s1gi81giDergi8&ownerId=usr_WHlfQps1I3a1gJYz2I3a&categoryId=ctgy_ejQQps1I3a1gJYz2I3a&assetTypeId=typ_MGsfQps1I3a1gJYz2I3a&validated=true&active=true&createdDate=2019-01-01&updatedDate=2019-01-01&quantity=1&price=10",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `name`, `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "ast_2l7fQps1I3a1gJYz2I3a,ast_dmM034s1gi81giDergi8",
											"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										},
										{
											"key": "ownerId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `ownerId`:\n- `ownerId=id1`\n- `ownerId[]=id1&ownerId[]=id2`\n- `ownerId=id1,id2`"
										},
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `categoryId`:\n- `categoryId=id1`\n- `categoryId[]=id1&categoryId[]=id2`\n- `categoryId=id1,id2`"
										},
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `assetTypeId`:\n- `assetTypeId=id1`\n- `assetTypeId[]=id1&assetTypeId[]=id2`\n- `assetTypeId=id1,id2`"
										},
										{
											"key": "validated",
											"value": "true",
											"description": "Boolean, filter on `validated`"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Boolean, filter on `active`"
										},
										{
											"key": "createdDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "updatedDate",
											"value": "2019-01-01",
											"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "quantity",
											"value": "1",
											"description": "Integer or Object:\n- use Integer for exact match: `quantity=1`\n- use an Object for integer range query: `quantity[gte]=1` (fetch all objects with quantity superior than 1). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										},
										{
											"key": "price",
											"value": "10",
											"description": "Number or Object:\n- use Number for exact match: `price=10`\n- use an Object for number range query: `price[gte]=10` (fetch all objects with price superior than 10). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
										}
									]
								},
								"description": "Returns the list of all assets created, in sorted order, the most recent asset appearing first.\n\nAll parameters are optional.\n\nIf a user has the permission `asset:list` but not `asset:list:all`, she has to provide the parameter `ownerId` with her ID as value to get her assets and she must be authenticated.\n\n**Permissions**:\n\n- asset:list - lists assets if the owner is the current user\n- asset:list:all - lists assets from all users\n"
							},
							"response": [
								{
									"name": "Get asset list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/assets",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"assets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get asset",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/assets/:assetId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"variable": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- asset:read - reads an asset if the owner is the current user\n- asset:read:all - reads an asset from all users"
							},
							"response": [
								{
									"name": "Get asset",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/assets/ast_2l7fQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"assets",
												"ast_2l7fQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"name\": \"Delorean\",\n    \"description\": \"The real DeLorean DMC-12\",\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"validated\": true,\n    \"active\": true,\n    \"locations\": [\n        {\n            \"latitude\": 34.099426,\n            \"longitude\": -118.337097\n        }\n    ],\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"price\": 10,\n    \"deposit\": 150,\n    \"currency\": \"USD\",\n    \"customAttributes\": {},\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create asset",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Delorean",
											"description": "String [required]: The asset name is its title.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "The real DeLorean DMC-12",
											"description": "String (Default: `null`):  Asset's description.",
											"type": "text"
										},
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"description": "String (Default: `null`): The category ID to which the asset belongs.",
											"type": "text"
										},
										{
											"key": "ownerId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "String: optional if the request comes from an authenticated user, can be set to any valid user ID when the permission `asset:create:all` is enabled",
											"type": "text"
										},
										{
											"key": "validated",
											"value": "true",
											"description": "Boolean (Default: `true`): The asset has been validated and may be searched on the platform. It has been published.",
											"type": "text"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Boolean (Default: `true`): Assets may be activated, or deactivated, for instance if the owner decides to lock an asset.",
											"type": "text"
										},
										{
											"key": "locations",
											"value": "[{ latitude: 34.099426, longitude: -118.337097 }]",
											"description": "Array of geocoordinate objects (Default: `[]`): Custom properties can be added next to `latitude` and `longitude` properties if needed",
											"type": "text"
										},
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"description": "String: The asset type ID  to which the asset belongs.",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "1",
											"description": "Integer (Default: `1`): The number of existing units. To create an unavailable asset by default, set the quantity to 0. Note: If the asset type associated to this asset has `QUANTITY === 'UNLIMITED'`, then quantity is automatically set to 1 but you can book for any quantity (no quantity issues).",
											"type": "text"
										},
										{
											"key": "price",
											"value": "10",
											"description": "Number (Default: `0`): Price of the asset, per timeUnit if assetType `timeBased` attribute is `true`.",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"description": "String (Default: `null`): Asset's currency.",
											"type": "text"
										},
										{
											"key": "customAttributes",
											"value": "{}",
											"description": "Object (Default: `{}`): Attributes that are searchable via *Search API*",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/assets",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"assets"
									]
								},
								"description": "**Permissions**:\n\n- asset:create - creates an asset for the current user\n- asset:create:all - creates an asset on behalf of other users"
							},
							"response": [
								{
									"name": "Create asset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Delorean\",\n    \"description\": \"The real DeLorean DMC-12\",\n    \"categoryId\": \"d18c8df5-d900-4a76-8c21-4af328035655\",\n    \"validated\": true,\n    \"active\": true,\n    \"locations\": [\n        {\n            \"latitude\": 34.099426,\n            \"longitude\": -118.337097\n        }\n    ],\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"price\": 10,\n    \"currency\": \"USD\",\n    \"customAttributes\": {}\n}"
										},
										"url": {
											"raw": "{{apiBase}}/assets",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"assets"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"name\": \"Delorean\",\n    \"description\": \"The real DeLorean DMC-12\",\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"validated\": true,\n    \"active\": true,\n    \"locations\": [\n        {\n            \"latitude\": 34.099426,\n            \"longitude\": -118.337097\n        }\n    ],\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"price\": 10,\n    \"currency\": \"USD\",\n    \"customAttributes\": {},\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update asset",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Delorean",
											"description": "String: The asset name is its title.",
											"type": "text"
										},
										{
											"key": "description",
											"value": "The real DeLorean DMC-12",
											"description": "String:  Asset's description.",
											"type": "text"
										},
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"description": "String: The category ID to which the asset belongs.",
											"type": "text"
										},
										{
											"key": "validated",
											"value": "true",
											"description": "Boolean: The asset has been validated and may be searched on the platform. It has been published.",
											"type": "text"
										},
										{
											"key": "active",
											"value": "true",
											"description": "Boolean: Assets may be activated, or deactivated, for instance if the owner decides to lock an asset.",
											"type": "text"
										},
										{
											"key": "locations",
											"value": "[{ latitude: 34.099426, longitude: -118.337097 }]",
											"description": "Array of geocoordinate objects: Custom properties can be added next to `latitude` and `longitude` properties if needed",
											"type": "text"
										},
										{
											"key": "assetTypeId",
											"value": "typ_MGsfQps1I3a1gJYz2I3a",
											"description": "String: The asset type ID  to which the asset belongs.",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "1",
											"description": "Integer: The number of existing units. To create an unavailable asset, set the quantity to 0. Note: If the asset type associated to this asset has `QUANTITY === 'UNLIMITED'`, then quantity is automatically set to 1 but you can book for any quantity (no quantity issues).",
											"type": "text"
										},
										{
											"key": "price",
											"value": "10",
											"description": "Number: Price of the asset, per timeUnit if assetType `timeBased` attribute is `true`.",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"description": "String: Asset's currency.",
											"type": "text"
										},
										{
											"key": "customAttributes",
											"value": "{}",
											"description": "Object: Attributes that are searchable via *Search API*",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/assets/:assetId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"variable": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- asset:edit - edits an asset if the owner is the current user\n- asset:edit:all - edits an asset on behalf of other users"
							},
							"response": [
								{
									"name": "Update asset",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Delorean\",\n    \"description\": \"The real DeLorean DMC-12\",\n    \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"validated\": true,\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"price\": 10,\n    \"currency\": \"USD\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/assets/ast_2l7fQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"assets",
												"ast_2l7fQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"name\": \"Delorean\",\n    \"description\": \"The real DeLorean DMC-12\",\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"validated\": true,\n    \"active\": true,\n    \"locations\": [\n        {\n            \"latitude\": 34.099426,\n            \"longitude\": -118.337097\n        }\n    ],\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"price\": 10,\n    \"currency\": \"USD\",\n    \"customAttributes\": {},\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete asset",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/assets/:assetId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"variable": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: asset ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- asset:remove - removes an asset for the current user\n- asset:remove:all - removes an asset on behalf of other users"
							},
							"response": [
								{
									"name": "Delete asset",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/assets/ast_2l7fQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"assets",
												"ast_2l7fQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Assets hold essential attributes such as title, pricing, description, and any other _Custom Attribute_ you may need to run your platform or marketplace.\n\nUse *Search API* to leverage your inventory.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "Get category list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/categories",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"categories"
									]
								},
								"description": "Returns the list of all created categories in alphabetic order.\n\n**Permission**:\n\n- category:list:all"
							},
							"response": [
								{
									"name": "Get category list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/categories",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"categories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get category",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/categories/:categoryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: category ID"
										}
									]
								},
								"description": "**Permission**:\n\n- category:read:all"
							},
							"response": [
								{
									"name": "Get category",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/categories/ctgy_ejQQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"categories",
												"ctgy_ejQQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"name\": \"Cars\",\n    \"parentId\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Cars",
											"description": "String [required]: The name of the category.",
											"type": "text"
										},
										{
											"key": "parentId",
											"value": "null",
											"description": "String (Default: `null`): The parent category ID. If a category has a `parentId` it's a sub-category.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/categories",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"categories"
									]
								},
								"description": "**Permission**:\n\n- category:create:all"
							},
							"response": [
								{
									"name": "Create category",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Cars\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/categories",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"categories"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"name\": \"Cars\",\n    \"parentId\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update category",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Cars",
											"description": "String: The name of the category.",
											"type": "text"
										},
										{
											"key": "parentId",
											"value": "null",
											"description": "String: The parent category ID. If a category has a `parentId` it's a sub-category.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/categories/:categoryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"description": "String: category ID"
										}
									]
								},
								"description": "**Permission**:\n\n- category:edit:all"
							},
							"response": [
								{
									"name": "Update category",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Cars\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/categories/ctgy_ejQQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"categories",
												"ctgy_ejQQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n    \"name\": \"Cars\",\n    \"parentId\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete category",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/categories/:categoryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "ctgy_ejQQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: category ID"
										}
									]
								},
								"description": "**Permission**:\n\n- category:remove:all"
							},
							"response": [
								{
									"name": "Delete category",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/categories/ctgy_ejQQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"categories",
												"ctgy_ejQQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "You may want assets to be organized and searchable by category.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Availability",
					"item": [
						{
							"name": "Get availability graph",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/availabilities?assetId=ast_2l7fQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"availabilities"
									],
									"query": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"description": "String [required]: asset ID"
										}
									]
								},
								"description": "The availability graph endpoint allows you to have a an overview of what is available (Availability API) and what is used (Transaction API).\n\n**Permissions**:\n\n- availability:list - get the availability graph if the current user is the owner of the associated asset\n- availability:list:all - get the availability graph for all assets\n"
							},
							"response": [
								{
									"name": "Get availability graph",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/availabilities?assetId=ast_2l7fQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"availabilities"
											],
											"query": [
												{
													"key": "assetId",
													"value": "ast_2l7fQps1I3a1gJYz2I3a",
													"description": "String: asset ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "",
											"name": "Access-Control-Allow-Credentials",
											"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "",
											"name": "Access-Control-Allow-Headers",
											"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "",
											"name": "Access-Control-Allow-Methods",
											"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*",
											"name": "Access-Control-Allow-Origin",
											"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
										},
										{
											"key": "Access-Control-Expose-Headers",
											"value": "",
											"name": "Access-Control-Expose-Headers",
											"description": "Lets a server whitelist headers that browsers are allowed to access."
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Length",
											"value": "166",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Tue, 24 Apr 2018 14:41:46 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"bf-EA0gU/p+4vJoRX7KUScRuQ\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Server",
											"value": "nginx",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "60",
											"name": "X-RateLimit-Limit",
											"description": "Custom header"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "59",
											"name": "X-RateLimit-Remaining",
											"description": "Custom header"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "1524580966",
											"name": "X-RateLimit-Reset",
											"description": "Custom header"
										}
									],
									"cookie": [],
									"body": "{\n    \"defaultQuantity\": 1,\n    \"totalUsedQuantity\": 1,\n    \"graphDates\": [\n        {\n            \"date\": \"2019-02-12T12:45:32.961Z\",\n            \"usedQuantity\": 0,\n            \"availableQuantity\": 0\n        },\n        {\n            \"date\": \"2019-03-12T12:45:32.961Z\",\n            \"usedQuantity\": 0,\n            \"availableQuantity\": 1\n        },\n        {\n            \"date\": \"2019-04-12T12:45:32.961Z\",\n            \"usedQuantity\": 1,\n            \"availableQuantity\": 1\n        },\n        {\n            \"date\": \"2019-05-12T12:45:32.961Z\",\n            \"usedQuantity\": 0,\n            \"availableQuantity\": 1\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get availability list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/availabilities?assetId=ast_2l7fQps1I3a1gJYz2I3a&page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"availabilities"
									],
									"query": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"description": "String [required]: asset ID"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										}
									]
								},
								"description": "**Permissions**:\n\n- availability:list - lists availabilities if the current user is the owner of the associated asset\n- availability:list:all - lists availabilities from all assets\n"
							},
							"response": [
								{
									"name": "Get availability list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/availabilities?assetId=ast_2l7fQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"availabilities"
											],
											"query": [
												{
													"key": "assetId",
													"value": "ast_2l7fQps1I3a1gJYz2I3a",
													"description": "String: asset ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "",
											"name": "Access-Control-Allow-Credentials",
											"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "",
											"name": "Access-Control-Allow-Headers",
											"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "",
											"name": "Access-Control-Allow-Methods",
											"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*",
											"name": "Access-Control-Allow-Origin",
											"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
										},
										{
											"key": "Access-Control-Expose-Headers",
											"value": "",
											"name": "Access-Control-Expose-Headers",
											"description": "Lets a server whitelist headers that browsers are allowed to access."
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Length",
											"value": "166",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Tue, 24 Apr 2018 14:41:46 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "ETag",
											"value": "W/\"bf-EA0gU/p+4vJoRX7KUScRuQ\"",
											"name": "ETag",
											"description": "An identifier for a specific version of a resource, often a message digest"
										},
										{
											"key": "Server",
											"value": "nginx",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "60",
											"name": "X-RateLimit-Limit",
											"description": "Custom header"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "59",
											"name": "X-RateLimit-Remaining",
											"description": "Custom header"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "1524580966",
											"name": "X-RateLimit-Reset",
											"description": "Custom header"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create availability",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "assetId",
											"value": "ast_2l7fQps1I3a1gJYz2I3a",
											"description": "String [required]: Target asset",
											"type": "text"
										},
										{
											"key": "startDate",
											"value": "2018-04-02T00:00:00.000Z",
											"description": "Date (ISO) [required]: Date from which the asset is available. For performance reasons, the duration period is limited to one year if a recurring availability is specified.",
											"type": "text"
										},
										{
											"key": "endDate",
											"value": "2018-04-06T00:00:00.000Z",
											"description": "Date (ISO) [required]: End of availability period.",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "0",
											"description": "Integer or String [required]: Indicates a quantity that is available during the specified period. That will override the asset quantity for that period. To set a relative quantity (e.g. add/remove some available quantity during a period), you have to use a string as value (\"+2\" or \"-1\") .",
											"type": "text"
										},
										{
											"key": "recurringPattern",
											"value": "null",
											"description": "String (Default: `null`): Indicates a repeat availability. The format is the same as the cron format.  Example: available every Tuesday, the `recurringPattern` is \"0 0 \\* \\* 2\".",
											"type": "text"
										},
										{
											"key": "recurringTimezone",
											"value": "null",
											"description": "String (Default: `null`, UTC): Defines the `recurringPattern` timezone. Example: to use Los Angeles timezone, set this parameter to \"America/Los_Angeles\". You can find a list of timezones here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
											"type": "text"
										},
										{
											"key": "recurringDuration",
											"value": "null",
											"description": "Object with the time unit as key (Default: `null`): Required if `recurringPattern` is provided. The parameter `recurringPattern` indicates the start of each available period. To determine the end of each of them, we need the duration of the period. Example: available every Tuesday, the parameters are `recurringPattern` \"0 0 \\* \\* 2\" and `recurringDuration` { d: 1 }. Allowed time units: \"m\" (for minute), \"h\" (for hour), \"d\" (for day).",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/availabilities",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"availabilities"
									]
								},
								"description": "**Permissions**:\n\n- availability:create - creates an availability if the current user is the owner of the associated asset\n- availability:create:all - creates an availability for all assets"
							},
							"response": [
								{
									"name": "Create availability",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-02T00:00:00.000Z\",\n    \"endDate\": \"2018-04-06T00:00:00.000Z\",\n    \"quantity\": 0\n}"
										},
										"url": {
											"raw": "{{apiBase}}/availabilities",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"availabilities"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"avl_ZnRfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-03-13T22:31:29.961Z\",\n    \"updatedDate\": \"2018-03-13T22:31:29.961Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-02T00:00:00.000Z\",\n    \"endDate\": \"2018-04-06T00:00:00.000Z\",\n    \"quantity\": 0,\n    \"recurringPattern\": null,\n    \"recurringTimezone\": null,\n    \"recurringDuration\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update availability",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "startDate",
											"value": "2018-04-02T00:00:00.000Z",
											"description": "Date (ISO): Date from which the asset is available. For performance reasons, the duration period is limited to one year if a recurring availability is specified.",
											"type": "text"
										},
										{
											"key": "endDate",
											"value": "2018-04-06T00:00:00.000Z",
											"description": "Date (ISO): End of availability period.",
											"type": "text"
										},
										{
											"key": "quantity",
											"value": "0",
											"description": "Integer or String [required]: Indicates a quantity that is available during the specified period. That will override the asset quantity for that period. To set a relative quantity (e.g. add/remove some available quantity during a period), you have to use a string as value (\"+2\" or \"-1\") .",
											"type": "text"
										},
										{
											"key": "recurringPattern",
											"value": "null",
											"description": "String: Indicates a repeat availability. The format is the same as the cron format.  Example: available every Tuesday, the `recurringPattern` is \"0 0 \\* \\* 2\".",
											"type": "text"
										},
										{
											"key": "recurringTimezone",
											"value": "null",
											"description": "String: Defines the `recurringPattern` timezone. If `null`, the time zone is UTC. Example: to use Los Angeles timezone, set this parameter to \"America/Los_Angeles\". You can find a list of timezones here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
											"type": "text"
										},
										{
											"key": "recurringDuration",
											"value": "null",
											"description": "Object with the time unit as key: Required if `recurringPattern` is provided. The parameter `recurringPattern` indicates the start of each available period. To determine the end of each of them, we need the duration of the period. Example: available every Tuesday, the parameters are `recurringPattern` \"0 0 \\* \\* 2\" and `recurringDuration` { d: 1 }. Allowed time units: \"m\" (for minute), \"h\" (for hour), \"d\" (for day).",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/availabilities/:availabilityId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"availabilities",
										":availabilityId"
									],
									"variable": [
										{
											"key": "availabilityId",
											"value": "avl_ZnRfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: availability ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- availability:edit - edit an availability if the current user is the owner of the associated asset\n- availability:edit:all - edit an availability for all assets"
							},
							"response": [
								{
									"name": "Update availability",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"startDate\": \"2018-04-02T00:00:00.000Z\",\n    \"endDate\": \"2018-04-06T00:00:00.000Z\",\n    \"quantity\": 0\n}"
										},
										"url": {
											"raw": "{{apiBase}}/availabilities/avl_ZnRfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"availabilities",
												"avl_ZnRfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"avl_ZnRfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-03-13T22:31:29.961Z\",\n    \"updatedDate\": \"2018-03-13T22:31:29.961Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-02T00:00:00.000Z\",\n    \"endDate\": \"2018-04-06T00:00:00.000Z\",\n    \"quantity\": 0,\n    \"recurringPattern\": null,\n    \"recurringTimezone\": null,\n    \"recurringDuration\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete availability",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/availabilities/:availabilityId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"availabilities",
										":availabilityId"
									],
									"variable": [
										{
											"key": "availabilityId",
											"value": "avl_ZnRfQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: availability ID"
										}
									]
								},
								"description": "**Permissions**:\n\n- availability:remove - removes an availability if the current user is the owner of the associated asset\n- availability:remove:all - removes an availability for all assets"
							},
							"response": [
								{
									"name": "Delete availability",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/availabilities/avl_ZnRfQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"availabilities",
												"avl_ZnRfQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Availability API lets you create and manage your platform assets visibility in *search* depending on search parameters and ability to generate new transactions during precise time slots.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Custom Attribute",
					"item": [
						{
							"name": "Get custom attribute list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/custom-attributes?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=attr_WmwQps1I3a1gJYz2I3a,attr_REFQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"custom-attributes"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `name`, `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "attr_WmwQps1I3a1gJYz2I3a,attr_REFQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										}
									]
								},
								"description": "Returns the list of all custom attributes created, in sorted order, the most recent custom attribute appearing first.\n\nAll parameters are optional.\n\n**Permission**:\n\n- customAttribute:list:all"
							},
							"response": [
								{
									"name": "Get custom attribute list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/custom-attributes",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"custom-attributes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get custom attribute",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/custom-attributes/:customAttributeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"custom-attributes",
										":customAttributeId"
									],
									"variable": [
										{
											"key": "customAttributeId",
											"value": "attr_WmwQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: custom attribute ID"
										}
									]
								},
								"description": "**Permission**:\n\n- customAttribute:read:all"
							},
							"response": [
								{
									"name": "Get custom attribute",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/custom-attributes/attr_WmwQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"custom-attributes",
												"attr_WmwQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"attr_WmwQps1I3a1gJYz2I3a\",\n    \"name\": \"seatingCapacity\",\n    \"type\": \"number\",\n    \"listValues\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create custom attribute",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "seatingCapacity",
											"description": "String [required]: Custom attribute's name. It can't be changed after the creation.",
											"type": "text"
										},
										{
											"key": "type",
											"value": "number",
											"description": "String [required]: either `number`, `boolean`, `text`, `select`, `tags`. It can't be changed after the creation.",
											"type": "text"
										},
										{
											"key": "listValues",
											"value": "",
											"description": "Array of String (Default: `undefined`). Only set when the type is `select` or `tags`",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/custom-attributes",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"custom-attributes"
									]
								},
								"description": "**Permission**:\n\n- customAttribute:create:all"
							},
							"response": [
								{
									"name": "Create custom attribute",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"seatingCapacity\",\n    \"type\": \"number\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/custom-attributes",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"custom-attributes"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"attr_WmwQps1I3a1gJYz2I3a\",\n    \"name\": \"seatingCapacity\",\n    \"type\": \"number\",\n    \"listValues\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update custom attribute",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "listValues",
											"value": "[\"red\", \"blue\"]",
											"description": "Array of values of type \"string\". Only set when the type is `select` or `tags`",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/custom-attributes/:customAttributeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"custom-attributes",
										":customAttributeId"
									],
									"variable": [
										{
											"key": "customAttributeId",
											"value": "attr_WmwQps1I3a1gJYz2I3a",
											"description": "String: custom attribute ID"
										}
									]
								},
								"description": "If you update the field `listValues` and try to remove an existing custom attribute, you should check first if any asset has the custom attribute to be deleted.\n\nIf this is the case, the API will reject the request so you should update or remove the asset custom attribute value before proceeding to the `listValues` update.\n\n**Permission**:\n\n- customAttribute:edit:all"
							},
							"response": [
								{
									"name": "Update custom attribute",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"listValues\": [\"red\", \"blue\"]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/custom-attributes/attr_REFQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"custom-attributes",
												"attr_REFQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"attr_REFQps1I3a1gJYz2I3a\",\n    \"name\": \"color\",\n    \"type\": \"select\",\n    \"listValues\": [\n        \"red\",\n        \"blue\"\n    ],\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete custom attribute",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/custom-attributes/:customAttributeId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"custom-attributes",
										":customAttributeId"
									],
									"variable": [
										{
											"key": "customAttributeId",
											"value": "attr_WmwQps1I3a1gJYz2I3a",
											"type": "string",
											"description": "String: custom attribute ID"
										}
									]
								},
								"description": "The custom attribute cannot be deleted if it still associated with at least one asset type.\n\n**Permission**:\n\n- customAttribute:remove:all"
							},
							"response": [
								{
									"name": "Delete custom attribute",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/custom-attributes/attr_WmwQps1I3a1gJYz2I3a",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"custom-attributes",
												"attr_WmwQps1I3a1gJYz2I3a"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Custom attributes allow you to specify a common data structure to your assets via the asset type and to use them as search filters.\n\nUnlike the custom `metadata`, you cannot assign any value to the asset field `customAttributes` before creating a custom attribute object.\n\nWe support the following types of Custom Attributes:\n\n- number\n- boolean\n- text\n- select (end user is expected to pick one single value in a list)\n- tags (end user can pick several values in a list)\n\nOnce a custom attribute is created, it can be used in the asset field `customAttributes`.\n\n\n##### Custom attributes usage\n\nSuppose we want to use the following custom attributes for our assets:\n\n- seatingCapacity: `number`\n- automaticTransmission: `boolean`\n- make: `select`, single value in 'BMW', 'Honda', 'Toyota' or 'Chevrolet'\n- options: `tags`\n- licensePlate: `text`\n\n```\n{\n  ...\n  \"customAttributes\": {\n    \"seatingCapacity\": 5, // seatingCapacity is 5\n    \"automaticTransmission\": false,\n    \"licensePlate\": \"123456\",\n    \"make\": \"Toyota\",\n    \"options\": [\"bluebooth\", \"gps\", \"sunroof\"]\n  }\n}\n```\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "All platforms have their own kind of Assets, whether they are physical goods, services, skills… And most Stelace features are organized around Assets.\n\nAsset Types and Custom Attributes let you achieve any level of customization.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Search API",
			"item": [
				{
					"name": "Get search results",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "query",
									"value": "DMC",
									"description": "String: fuzzy text search on assets attributes `name`, `description` and text custom attributes.",
									"type": "text"
								},
								{
									"key": "filter",
									"value": "\"price < 30 OR options['gps', 'bluetooth', 'AC'] >= 2\"",
									"description": "Stelace Filter allows to perform powerful boolean logic on your custom attributes and built-ins such as `_price` with JavaScript like syntax. Please refer to our [docs](https://stelace.com/docs/search/#filtering).",
									"type": "text"
								},
								{
									"key": "sort",
									"value": "[{ \"_price\": \"asc\" }, { \"seatingCapacity\": \"desc\" }]",
									"description": "Array of Objects or single Object: each sort step object can have `_available`, `_price` or a custom attribute of type number, boolean or text (max 256 chars) as unique key. The value is either 'desc' or 'asc' order. Multiple sort step objects are processed from first to last item of the array to order assets with equal rank after previous steps. If `sort` isn't specified, it will return assets based on relevance/distance scoring.",
									"type": "text"
								},
								{
									"key": "assetTypeId",
									"value": "[\"typ_MGsfQps1I3a1gJYz2I3a\"]",
									"description": "Array of IDs: filter on assets that have assetTypeId value within the provided list",
									"type": "text"
								},
								{
									"key": "categoryId",
									"value": "[\"ctgy_ejQQps1I3a1gJYz2I3a\", \"ctgy_N1FQps1I3a1gJYz2I3a\"]",
									"description": "Array of IDs: filter on assets that have categoryId value within the provided list",
									"type": "text"
								},
								{
									"key": "location",
									"value": "{ \"latitude\": 34.046713, \"longitude\": -118.107380 }",
									"description": "Geocoordinate Object: used as origin for distance calculation",
									"type": "text"
								},
								{
									"key": "maxDistance",
									"value": "20000",
									"description": "Integer: After this limit, results won't be shown",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2019-04-25T00:00:00.000Z",
									"description": "Date (ISO) (Default: `current time`): Search available assets from this date",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "2019-04-29T00:00:00.000Z",
									"description": "Date (ISO) (Default: `null`): Search available assets before this date",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "1",
									"description": "Integer (Default: `1`): The number of asset units. Will return only available assets that have that number for the specified period.",
									"type": "text"
								},
								{
									"key": "without",
									"value": "[\"ast_2l7fQps1I3a1gJYz2I3a\", \"ast_dmM034s1gi81giDergi8\"]",
									"description": "Array of IDs (Default: `[]`): won't display results with the provided IDs",
									"type": "text"
								},
								{
									"key": "similarTo",
									"value": "[\"ast_2l7fQps1I3a1gJYz2I3a\", \"ast_dmM034s1gi81giDergi8\"]",
									"description": "Array of IDs: get assets similar to the provided assets with provided IDs",
									"type": "text"
								},
								{
									"key": "customAttributes",
									"value": "{}",
									"description": "Object: query object for defined custom attributes",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean: `true` by default, i.e. search only returns assets of which `active` attribute is true. You can disable this filter by setting it to `null` to include all assets (active or not).",
									"type": "text"
								},
								{
									"key": "validated",
									"value": "true",
									"description": "Filters listings in search depending on their `validated` attribute. This filter is disabled by default.",
									"type": "text"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default: `1`): page number",
									"type": "text"
								},
								{
									"key": "nbResultsPerPage",
									"value": "20",
									"description": "Integer (Default: `20`): nb of results per page. MIn: 1, max: 100",
									"type": "text"
								},
								{
									"key": "availabilityFilter",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  enabled",
									"value": "true",
									"description": "Boolean (Default: `true`): if true, unavailable assets won't be displayed. If false `available` attribute will be added to each result",
									"type": "text"
								},
								{
									"key": "  fullPeriod",
									"value": "true",
									"description": "Boolean (Default: `true`): if true and both `startDate` and `endDate` are provided, only display assets that are available during the full searched period",
									"type": "text"
								},
								{
									"key": "  unavailableWhen",
									"value": "[\"validated\", \"completed\"]",
									"description": "Array of String or String: If provided, only transactions with the provided status will result in unavailable periods. Can be set to null or empty array to disable transaction-based availability filtering. If omitted in payload, the asset type attribute `unavailableWhen` will be used.",
									"type": "text"
								},
								{
									"key": "savedSearch",
									"value": "{}",
									"description": "Object with keys below (Default: `undefined`): if provided, it will trigger search based saved searches queries instead of regular search queries (other search parameters must be omitted). Please consult the section *Saved search API* for more information",
									"type": "text"
								},
								{
									"key": "  userId",
									"value": "",
									"description": "String: filters saved searches to those associated with provided `userId`",
									"type": "text"
								},
								{
									"key": "  ids",
									"value": "",
									"description": "Array of String: filters saved searches to those associated with the provided `ids`",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/search",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search"
							]
						},
						"description": "By default, Stelace relies on all text contents to find relevant Assets.\n\n```\n{\n  \"query\": \"DMC\"\n}\n```\n\nTyping errors usually happen in search queries: Stelace Search is __typo-tolerant by design__.\n\nAll search parameters are optional.\n\n\n##### Advanced search\n\n`query` is nice but you probably need more to delight your users.\n\n__Availability by date and quantity__\n\nYou can specify `startDate` and `endDate` to search Assets during a full period and/or in a given `quantity`.\n\nBoth of Asset Transactions and Availabilities impact availability in Search.\n\nPlease refer to our [docs](https://stelace.com/docs/search/#availability-and-future-states) for examples.\n\n_Please note that `startDate` and `endDate` cannot be the exact same dates (same hour, minute, second)._\n\n\n__Search filters__\n\nIf `assetTypeId` list is provided, only Assets having their `assetTypeId` attribute equal to one of the provided values will be returned. Same with `categoryId`.\n\nYou can exclude some Assets from search using `without` array. This can help if you don’t want to show own User’s Assets in Search results.\n\n\n_Distance_\n\nYour users probably don't want to see assets that are really relevant but very far from their location.\n\nYou can use `maxDistance`.\n\n\n_Similar Assets_\n\nHere is all what you need to offer a “More like this” experience: \n\n```\n{\n  \"similarTo\": [\"ast_2l7fQps1I3a1gJYz2I3a\"]\n}\n```\n\nWe look for similar text patterns in all text attributes, including you own Custom Attributes.\n\n_Note: The assets where IDs are in `similarTo` won’t show up anyway._\n\n\n\n##### Search with Custom Attributes\n\nStelace offers:\n\n- a simple interface to filter on few attributes with implicit AND join on one hand, using `customAttributes` option,\n- our own filter language that will let you build your advanced search engine in no time on the other hand, using `filter`.\n\nHave a look at our __[docs to use advanced boolean logic with `filter`](https://stelace.com/docs/search/#filtering)__.\n\nHere’s how you can use simple filtering with `customAttributes` Search parameter.\n\n_Number_\n\n```\n{\n  query: \"any car\",\n  \"customAttributes\": {\n    \"seatingCapacity\": 5 // exact value\n  }\n}\n```\n\n\nMeet the range operators for ranges of values:\n- gt (greater than)\n- gte (greater than or equal)\n- lt (less than)\n- lte (less than or equal)\n\n\n```\n{\n  ...\n  \"customAttributes\": {\n    // seatingCapacity between 2 (excluded) and 7 (included)\n    \"seatingCapacity\": {\n      \"gt\": 2,\n      \"lte\": 7\n    }\n  }\n}\n```\n\n\n_Boolean_\n\n```\n{\n  ...\n  \"customAttributes\": {\n      \"automaticTransmission\": false\n      // true and missing values won’t be returned\n  }\n}\n```\n\n_Select_\n\n```\n{\n  ...\n  \"customAttributes\": {\n      \"make\": \"Toyota\" // single value only\n  }\n}\n```\n\n```\n{\n  ...\n  \"customAttributes\": {\n    // make is \"Toyota\" OR \"BMW\" OR \"Honda\"\n    \"make\": [\"Toyota\", \"BMW\", \"Honda\"]\n  }\n}\n```\n\n_Tags_\n\n```\n{\n  ...\n  \"customAttributes\": {\n    \"options\": \"bluebooth\" // options must include tag \"bluetooth\"\n  }\n}\n```\n\n```\n{\n  ...\n  \"customAttributes\": {\n    // options must have \"bluetooth\" AND \"gps\" AND \"sunroof\"\n    \"options\": [\"bluebooth\", \"gps\", \"sunroof\"]\n  }\n}\n```\n\n\n_Text_\n\n```\n{\n  ...\n  \"customAttributes\": {\n    \"licensePlate\": \"123456\" // exact match\n  }\n}\n```\n\n\n- Text: You can leverage *typo-tolerant* Search for all `text` Custom Attributes via the `query` parameter\n\n```\n{\n  \"query\": \"modern caar\",\n  // returns Assets with text Custom Attribute including \"modern car\"\n  ...\n}\n```\n\n\n_Note: Typo-tolerant search is score-based. Most relevant assets will be returned first._\n\n\n##### Sorting\n\nYou can `sort` your results by price and Custom Attributes of type `number`, `boolean` or `text` (max. 256 chars) in one or several steps. Each additional sort step acts as a tiebreaker.\n\nExample:\n```\n{\n  ...\n  sort: [\n    { \"_price\": \"asc\" }, // built-ins attrs denoted by leading _\n    { \"seatingCapacity\": \"desc\" }\n  ]\n}\n```\n\nIf you use `sort` parameter along with `query` and/or `locations`, please be reminded that irrelevant Assets (too far or not matching query) are excluded from results before sorting.\n\nUse `sort` with no filter to make sure no Asset is ignored if sorting is all you want.\n\n\n_Sort by availability_\n\nTo get both available and unavailable assets, you can set `availabilityFilters.enabled` to `false`. A built-in boolean attribute `available` will be added to each asset in seach results.\n\nIf you want to get available assets first, you can then sort by the `_available` built-in attribute added on the fly by search.\n\n```\n{\n  sort: [\n    { \"_available\": \"desc\" }, // available first and then unavailable assets, use \"asc\" for the opposite\n    { \"yourCustomAttribute\": \"desc\" }\n  ]\n}\n```\n\n\n_Please note that for performance reasons, the availability sorting can only be the first element of the sort array._\n\n\n##### Pagination\n\nYou can customize pagination parameters to fit your needs:\n\n```\n{\n  ...\n  page: 4, // page number\n  nbResultsPerPage: 48\n}\n```\n\nBy default `nbResultsPerPage` is set to 20, with a minimum value of 1 and a maximum value of 100.\n\n\n**Permission**:\n\n- search:list:all"
					},
					"response": [
						{
							"name": "Get search results",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"query\": \"DMC\",\n\t\"sort\": { \"_price\": \"desc\" },\n\t\"assetTypeId\": [\"typ_MGsfQps1I3a1gJYz2I3a\"],\n\t\"categoryId\": [\"ctgy_ejQQps1I3a1gJYz2I3a\"],\n\t\"location\": { \"latitude\": 34.046713, \"longitude\": -118.107380 },\n\t\"maxDistance\": 20000,\n\t\"startDate\": \"2019-04-25T00:00:00.000Z\",\n\t\"endDate\": \"2019-04-29T00:00:00.000Z\",\n\t\"quantity\": 1,\n\t\"page\": 1,\n\t\"nbResultsPerPage\": 20\n}"
								},
								"url": {
									"raw": "{{apiBase}}/search",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"nbResultsPerPage\": 20,\n    \"nbResults\": 1,\n    \"nbPages\": 1,\n    \"exhaustiveNbResults\": true,\n    \"results\": [\n        {\n            \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n            \"name\": \"Delorean\",\n            \"description\": \"The real DeLorean DMC-12\",\n            \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n            \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n            \"validated\": true,\n            \"active\": true,\n            \"locations\": [\n                {\n                    \"latitude\": 34.099426,\n                    \"longitude\": -118.337097\n                }\n            ],\n            \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n            \"quantity\": 1,\n            \"price\": 10,\n            \"deposit\": 150,\n            \"currency\": \"USD\",\n            \"customAttributes\": {},\n            \"metadata\": {},\n            \"platformData\": {},\n            \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n            \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n            \"livemode\": false\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Search is key to any successful platform. Stelace Search API lets you leverage your inventory with powerful matchmaking relying on availability, geography, fuzzy text search and relevance, including *Custom Attributes*.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Saved search API",
			"item": [
				{
					"name": "Get saved search list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/search?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=sch_2l7fQps1I3a1gJYz2I3a,sch_dmM034s1gi81giDergi8&userId=usr_WHlfQps1I3a1gJYz2I3a&active=true",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "id",
									"value": "sch_2l7fQps1I3a1gJYz2I3a,sch_dmM034s1gi81giDergi8",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "userId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `userId`:\n- `userId=id1`\n- `userId[]=id1&userId[]=id2`\n- `userId=id1,id2`"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean, filter on `active`"
								}
							]
						},
						"description": "Returns the list of all saved searches created, in sorted order, the most recent saved search appearing first.\n\nAll parameters are optional.\n\n**Permission**:\n\n- savedSearch:list - lists saved searches if the owner is the current user\n- savedSearch:list:all - lists all saved searches"
					},
					"response": [
						{
							"name": "Get saved search list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/search",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get saved search",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/search/:savedSearchId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search",
								":savedSearchId"
							],
							"variable": [
								{
									"key": "savedSearchId",
									"value": "sch_SWtQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: saved search ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- savedSearch:read - reads a saved search if the owner is the current user\n- savedSearch:read:all - reads a saved search from all users"
					},
					"response": [
						{
							"name": "Get saved search",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/search/sch_SWtQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search",
										"sch_SWtQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"sch_SWtQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2019-04-20T10:23:12.123Z\",\n    \"updatedDate\": \"2019-04-20T10:23:12.123Z\",\n    \"name\": \"My custom search\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"search\": {\n    \t\"query\": \"Delorean\"\n    },\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create saved search",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "My custom search",
									"description": "String [required]: Identify the saved search with a name",
									"type": "text"
								},
								{
									"key": "userId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "String: optional if the request comes from an authenticated user, can be set to any valid user ID when the permission `savedSearch:create:all` is enabled",
									"type": "text"
								},
								{
									"key": "query",
									"value": "DMC",
									"description": "String: fuzzy text search on assets attributes `name`, `description` and text custom attributes.",
									"type": "text"
								},
								{
									"key": "filter",
									"value": "\"price < 30 OR options['gps', 'bluetooth', 'AC'] >= 2\"",
									"description": "Stelace Filter allows to perform powerful boolean logic on your custom attributes and built-ins such as `_price` with JavaScript like syntax. Please refer to our [docs](https://stelace.com/docs/search/#filtering).",
									"type": "text"
								},
								{
									"key": "sort",
									"value": "[{ \"_price\": \"asc\" }, { \"seatingCapacity\": \"desc\" }]",
									"description": "Array of Objects or single Object: each sort step object can have `_available`, `_price` or a custom attribute of type number, boolean or text (max 256 chars) as unique key. The value is either 'desc' or 'asc' order. Multiple sort step objects are processed from first to last item of the array to order assets with equal rank after previous steps. If `sort` isn't specified, it will return assets based on relevance/distance scoring.",
									"type": "text"
								},
								{
									"key": "assetTypeId",
									"value": "[\"typ_MGsfQps1I3a1gJYz2I3a\"]",
									"description": "Array of IDs: filter on assets that have assetTypeId value within the provided list",
									"type": "text"
								},
								{
									"key": "categoryId",
									"value": "[\"ctgy_ejQQps1I3a1gJYz2I3a\", \"ctgy_N1FQps1I3a1gJYz2I3a\"]",
									"description": "Array of IDs: filter on assets that have categoryId value within the provided list",
									"type": "text"
								},
								{
									"key": "location",
									"value": "{ \"latitude\": 34.046713, \"longitude\": -118.107380 }",
									"description": "Geocoordinate Object: used as origin for distance calculation",
									"type": "text"
								},
								{
									"key": "maxDistance",
									"value": "20000",
									"description": "Integer: After this limit, results won't be shown",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2019-04-25T00:00:00.000Z",
									"description": "Date (ISO) (Default: `current time`): Search available assets from this date",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "2019-04-29T00:00:00.000Z",
									"description": "Date (ISO) (Default: `null`): Search available assets before this date",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "1",
									"description": "Integer (Default: `1`): The number of asset units. Will return only available assets that have that number for the specified period.",
									"type": "text"
								},
								{
									"key": "without",
									"value": "[\"ast_2l7fQps1I3a1gJYz2I3a\", \"ast_dmM034s1gi81giDergi8\"]",
									"description": "Array of IDs (Default: `[]`): won't display results with the provided IDs",
									"type": "text"
								},
								{
									"key": "similarTo",
									"value": "[\"ast_2l7fQps1I3a1gJYz2I3a\", \"ast_dmM034s1gi81giDergi8\"]",
									"description": "Array of IDs: get assets similar to the provided assets with provided IDs",
									"type": "text"
								},
								{
									"key": "customAttributes",
									"value": "{}",
									"description": "Object: query object for defined custom attributes",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean: `true` by default, i.e. search only returns assets of which `active` attribute is true. You can disable this filter by setting it to `null` to include all assets (active or not).",
									"type": "text"
								},
								{
									"key": "validated",
									"value": "true",
									"description": "Filters listings in search depending on their `validated` attribute. This filter is disabled by default.",
									"type": "text"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default: `1`): page number",
									"type": "text"
								},
								{
									"key": "nbResultsPerPage",
									"value": "20",
									"description": "Integer (Default: `20`): nb of results per page. MIn: 1, max: 100",
									"type": "text"
								},
								{
									"key": "availabilityFilter",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  enabled",
									"value": "true",
									"description": "Boolean (Default: `true`): if true, unavailable assets won't be displayed. If false `available` attribute will be added to each result",
									"type": "text"
								},
								{
									"key": "  fullPeriod",
									"value": "true",
									"description": "Boolean (Default: `true`): if true and both `startDate` and `endDate` are provided, only display assets that are available during the full searched period",
									"type": "text"
								},
								{
									"key": "  unavailableWhen",
									"value": "[\"validated\", \"completed\"]",
									"description": "Array of String or String: If provided, only transactions with the provided status will result in unavailable periods. Can be set to null or empty array to disable transaction-based availability filtering. If omitted in payload, the asset type attribute `unavailableWhen` will be used.",
									"type": "text"
								},
								{
									"key": "save",
									"value": "true",
									"description": "Boolean [required] : true is the only allowed value",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/search",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search"
							]
						},
						"description": "**Permissions**:\n\n- savedSearch:create - creates a saved search for the current user\n- savedSearch:create:all - creates a saved search on behalf of other users"
					},
					"response": [
						{
							"name": "Create saved search",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My custom search\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"query\": \"Delorean\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/search",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"sch_SWtQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2019-04-20T10:23:12.123Z\",\n    \"updatedDate\": \"2019-04-20T10:23:12.123Z\",\n    \"name\": \"My custom search\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"search\": {\n        \"query\": \"Delorean\"\n    },\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update saved search",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "My custom search",
									"description": "String: Identify the saved search with a name",
									"type": "text"
								},
								{
									"key": "active",
									"value": "",
									"description": "Boolean: If false, it won't be used when `savedSearch.userId` is provided in the search request",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/search/:savedSearchId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search",
								":savedSearchId"
							],
							"variable": [
								{
									"key": "savedSearchId",
									"value": "sch_SWtQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: saved search ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- savedSearch:edit - updates a saved search for the current user\n- savedSearch:edit:all - updates a saved search on behalf of other users"
					},
					"response": [
						{
							"name": "Update saved search",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"My custom search\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/search/sch_SWtQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search",
										"sch_SWtQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"sch_SWtQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2019-04-20T10:23:12.123Z\",\n    \"updatedDate\": \"2019-04-20T10:23:12.123Z\",\n    \"name\": \"My custom search\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"search\": {\n        \"query\": \"Delorean\"\n    },\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete saved search",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/search/:savedSearchId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"search",
								":savedSearchId"
							],
							"variable": [
								{
									"key": "savedSearchId",
									"value": "sch_SWtQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: saved search ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- savedSearch:remove - removes a saved search for the current user\n- savedSearch:remove:all - removes a saved search on behalf of other users"
					},
					"response": [
						{
							"name": "Delete saved search",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{apiBase}}/search/sch_SWtQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"search",
										"sch_SWtQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Users may not find what they search at a specific time because no assets are matching their conditions. But they will if new assets are added or existing ones are modified later.\n\nSaved search API fits this use case. Let the users save their search queries so you can trigger saved search queries later and notify when there are new results.\n\nManage the saved searches with the Saved search API and use the Search API to retrieve results associated to them.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transaction API",
			"item": [
				{
					"name": "Get transaction list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/transactions?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=trn_a3BfQps1I3a1gJYz2I3a,trn_RjhfQps1I3a1gJYz2I3a&assetId=ast_2l7fQps1I3a1gJYz2I3a&assetTypeId=typ_MGsfQps1I3a1gJYz2I3a&ownerId=usr_WHlfQps1I3a1gJYz2I3a&takerId=usr_Y0tfQps1I3a1gJYz2I3a&value=100&ownerAmount=95&takerAmount=115&platformAmount=20&createdDate=2019-01-01&updatedDate=2019-01-01",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "id",
									"value": "trn_a3BfQps1I3a1gJYz2I3a,trn_RjhfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "assetId",
									"value": "ast_2l7fQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `assetId`:\n- `assetId=id1`\n- `assetId[]=id1&assetId[]=id2`\n- `assetId=id1,id2`"
								},
								{
									"key": "assetTypeId",
									"value": "typ_MGsfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `assetTypeId`:\n- `assetTypeId=id1`\n- `assetTypeId[]=id1&assetTypeId[]=id2`\n- `assetTypeId=id1,id2`"
								},
								{
									"key": "ownerId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `ownerId`:\n- `ownerId=id1`\n- `ownerId[]=id1&ownerId[]=id2`\n- `ownerId=id1,id2`"
								},
								{
									"key": "takerId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `takerId`:\n- `takerId=id1`\n- `takerId[]=id1&takerId[]=id2`\n- `takerId=id1,id2`"
								},
								{
									"key": "value",
									"value": "100",
									"description": "Number or Object:\n- use Number for exact match: `value=100`\n- use an Object for range query: `value[gte]=100` (fetch all objects with value greater than 100). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "ownerAmount",
									"value": "95",
									"description": "Number or Object:\n- use Number for exact match: `ownerAmount=95`\n- use an Object for range query: `ownerAmount[gte]=95` (fetch all objects with ownerAmount greater than 95). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "takerAmount",
									"value": "115",
									"description": "Number or Object:\n- use Number for exact match: `takerAmount=115`\n- use an Object for range query: `takerAmount[gte]=115` (fetch all objects with takerAmount greater than 115). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "platformAmount",
									"value": "20",
									"description": "Number or Object:\n- use Number for exact match: `platformAmount=20`\n- use an Object for range query: `platformAmount[gte]=20` (fetch all objects with platformAmount greater than 20). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "createdDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "updatedDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								}
							]
						},
						"description": "Will display all the previously created transactions in sorted order, with the most recent transaction first.\n\nAll parameters are optional.\n\nIf a user has the permission `transaction:list` but not `transaction:list:all`, she has to provide the parameter `ownerId` or `takerId` with her ID as value to get the transactions she is related to and she must be authenticated.\n\n**Permissions**:\n\n- transaction:list - lists transactions if the current user is their owner or taker\n- transaction:list:all - lists transactions from all users\n"
					},
					"response": [
						{
							"name": "Get transaction list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/transactions",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get transaction",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/transactions/:transactionId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions",
								":transactionId"
							],
							"variable": [
								{
									"key": "transactionId",
									"value": "trn_a3BfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: transaction ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- transaction:read - reads a transaction if the current user is the transaction owner or taker\n- transaction:read:all - reads a transaction from all users"
					},
					"response": [
						{
							"name": "Get transaction",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/transactions/trn_a3BfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions",
										"trn_a3BfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-13T12:45:23.351Z\",\n    \"updatedDate\": \"2018-04-13T12:45:23.351Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"assetSnapshot\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"assetType\": {\n        \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"name\": \"Sharing\",\n        \"timeBased\": true,\n        \"infiniteStock\": false,\n        \"pricing\": {\n            \"ownerFeesPercent\": 5,\n            \"takerFeesPercent\": 15\n        },\n        \"timing\": {\n            \"timeUnit\": \"d\",\n            \"maxDuration\": {\n                \"d\": 100\n            },\n            \"minDuration\": {\n                \"d\": 1\n            }\n        },\n        \"namespaces\": {\n            \"visibility\": {\n                \"protected\": [\n                    \"confirmed\",\n                    \"accepted\"\n                ]\n            }\n        },\n        \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n        \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n        \"active\": true,\n        \"metadata\": {},\n        \"platformData\": {},\n        \"livemode\": false\n    },\n    \"status\": \"draft\",\n    \"statusHistory\": [\n        {\n            \"status\": \"draft\",\n            \"date\": \"2018-04-13T12:45:23.351Z\"\n        }\n    ],\n    \"completedDate\": null,\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"takerId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"endDate\": \"2018-04-20T00:00:00.000Z\",\n    \"duration\": {\n        \"d\": 8\n    },\n    \"unitPrice\": 10,\n    \"value\": 80,\n    \"ownerAmount\": 76,\n    \"takerAmount\": 94.1,\n    \"platformAmount\": 18.1,\n    \"currency\": \"USD\",\n    \"deposit\": 150,\n    \"cancelledDate\": null,\n    \"cancellationReason\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Preview transaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assetId",
									"value": "ast_2l7fQps1I3a1gJYz2I3a",
									"description": "String [required]: an asset can be attached to a transaction after its creation",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2018-04-13T00:00:00.000Z",
									"description": "Date (ISO): required for business with dates (`timeBased === true`, like renting or events). Indicates when the transaction should start",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "",
									"description": "Date (ISO): if `assetId` is provided, can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "{ d: 8 }",
									"description": "Object: can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends and `quantity` isn't released at the end of the Transaction period. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "1",
									"description": "Integer (Default: `1`): Number of asset units to book",
									"type": "text"
								},
								{
									"key": "value",
									"value": "",
									"description": "Number: Represents the value of the transaction based on the quantity and the duration if `timeBased` is true. It is automatically computed. You can override it if you have the permission 'transaction:config:all'. Note: `ownerAmount` and `takerAmount` will be based on the overriding value if any.",
									"type": "text"
								},
								{
									"key": "ownerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that goes to owner. It is based on the transaction value minus `ownerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'.",
									"type": "text"
								},
								{
									"key": "takerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that should pay the taker. It is based on the transaction value plus `takerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/transactions/preview",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions",
								"preview"
							]
						},
						"description": "This endpoint accepts the same parameters as the transaction creation endpoint. It can be used to \"preview\" the transaction (e.g. to view the pricing values) without creating a transaction. \n\n**Permissions**:\n\n- transaction:preview:all - previews a transaction"
					},
					"response": [
						{
							"name": "Preview transaction",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"duration\": { \"d\": 8 },\n    \"quantity\": 1\n}"
								},
								"url": {
									"raw": "{{apiBase}}/transactions/preview",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions",
										"preview"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"assetSnapshot\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"assetType\": {\n        \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"name\": \"Sharing\",\n        \"timeBased\": true,\n        \"infiniteStock\": false,\n        \"pricing\": {\n            \"ownerFeesPercent\": 5,\n            \"takerFeesPercent\": 15\n        },\n        \"timing\": {\n            \"timeUnit\": \"d\",\n            \"maxDuration\": {\n                \"d\": 100\n            },\n            \"minDuration\": {\n                \"d\": 1\n            }\n        },\n        \"namespaces\": {\n            \"visibility\": {\n                \"protected\": [\n                    \"confirmed\",\n                    \"accepted\"\n                ]\n            }\n        },\n        \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n        \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n        \"active\": true,\n        \"metadata\": {},\n        \"platformData\": {},\n        \"livemode\": false\n    },\n    \"status\": \"draft\",\n    \"statusHistory\": [\n        {\n            \"status\": \"draft\",\n            \"date\": \"2018-04-13T12:45:23.351Z\"\n        }\n    ],\n    \"completedDate\": null,\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"takerId\": null,\n    \"quantity\": 1,\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"endDate\": \"2018-04-20T00:00:00.000Z\",\n    \"duration\": {\n        \"d\": 8\n    },\n    \"unitPrice\": 10,\n    \"value\": 80,\n    \"ownerAmount\": 76,\n    \"takerAmount\": 94.1,\n    \"platformAmount\": 18.1,\n    \"currency\": \"USD\",\n    \"deposit\": 150,\n    \"cancelledDate\": null,\n    \"cancellationReason\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create transaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assetId",
									"value": "ast_2l7fQps1I3a1gJYz2I3a",
									"description": "String: Optional. An asset can be attached after creation.",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2018-04-13T00:00:00.000Z",
									"description": "Date (ISO): if `assetId` is provided, required for business with dates (`timeBased === true`, like renting or events). Indicates when the transaction should start",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "",
									"description": "Date (ISO): if `assetId` is provided, can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends and `quantity` isn't released at the end of the Transaction period. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "{ d: 8 }",
									"description": "Object: if `assetId` is provided, this can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends and `quantity` isn't released at the end of the Transaction period. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "1",
									"description": "Integer (Default: `1`): Number of asset units to book",
									"type": "text"
								},
								{
									"key": "takerId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "String: optional if the request comes from an authenticated user, can be set to any valid user ID when the permission \"transaction:create:all\" is enabled. ID of the user that books the asset",
									"type": "text"
								},
								{
									"key": "value",
									"value": "",
									"description": "Number: Represents the value of the transaction based on the quantity and the duration if `timeBased` is true. It is automatically computed. You can override it if you have the permission 'transaction:config:all'. Note: `ownerAmount` and `takerAmount` will be based on the overriding value if any.",
									"type": "text"
								},
								{
									"key": "ownerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that goes to owner. It is based on the transaction value minus `ownerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'.",
									"type": "text"
								},
								{
									"key": "takerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that should pay the taker. It is based on the transaction value plus `takerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/transactions",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions"
							]
						},
						"description": "For maximum flexibility, you can attach an Asset later if none is provided when creating the transaction (`assetId` not provided).\n\nThis can be useful to implement any kind of prepaid transaction happening before matchmaking.\n\n**Permissions**:\n\n- transaction:create - creates a transaction if the current user is the taker\n- transaction:create:all - creates a transaction on behalf of other users"
					},
					"response": [
						{
							"name": "Create transaction",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"duration\": { \"d\": 8 },\n    \"quantity\": 1\n}"
								},
								"url": {
									"raw": "{{apiBase}}/transactions",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-13T12:45:23.351Z\",\n    \"updatedDate\": \"2018-04-13T12:45:23.351Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"assetSnapshot\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"assetType\": {\n        \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"name\": \"Sharing\",\n        \"timeBased\": true,\n        \"infiniteStock\": false,\n        \"pricing\": {\n            \"ownerFeesPercent\": 5,\n            \"takerFeesPercent\": 15\n        },\n        \"timing\": {\n            \"timeUnit\": \"d\",\n            \"maxDuration\": {\n                \"d\": 100\n            },\n            \"minDuration\": {\n                \"d\": 1\n            }\n        },\n        \"namespaces\": {\n            \"visibility\": {\n                \"protected\": [\n                    \"confirmed\",\n                    \"accepted\"\n                ]\n            }\n        },\n        \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n        \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n        \"active\": true,\n        \"metadata\": {},\n        \"platformData\": {},\n        \"livemode\": false\n    },\n    \"status\": \"draft\",\n    \"statusHistory\": [\n        {\n            \"status\": \"draft\",\n            \"date\": \"2018-04-13T12:45:23.351Z\"\n        }\n    ],\n    \"completedDate\": null,\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"takerId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"endDate\": \"2018-04-20T00:00:00.000Z\",\n    \"duration\": {\n        \"d\": 8\n    },\n    \"unitPrice\": 10,\n    \"value\": 80,\n    \"ownerAmount\": 76,\n    \"takerAmount\": 94.1,\n    \"platformAmount\": 18.1,\n    \"currency\": \"USD\",\n    \"deposit\": 150,\n    \"cancelledDate\": null,\n    \"cancellationReason\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update transaction",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assetId",
									"value": "ast_2l7fQps1I3a1gJYz2I3a",
									"description": "String: optional. Cannot be provided if transaction has already an assetId, unless `transaction:config:all` permission is granted.",
									"type": "text"
								},
								{
									"key": "startDate",
									"value": "2018-04-13T00:00:00.000Z",
									"description": "Date (ISO): if assetId is provided, required for business with dates (renting, events). Indicates when the transaction should start",
									"type": "text"
								},
								{
									"key": "endDate",
									"value": "",
									"description": "Date (ISO): if `assetId` is provided, can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends and `quantity` isn't released at the end of the Transaction period. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "{ d: 8 }",
									"description": "Object: if `assetId` is provided, can be specified when `assetType.timeBased` is `true`. When both `endDate` and `duration` are omitted, the transaction never ends and `quantity` isn't released at the end of the Transaction period. `endDate` and `duration` are exclusive.",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "1",
									"description": "Integer (Default: `1`): Number of asset units to book",
									"type": "text"
								},
								{
									"key": "value",
									"value": "",
									"description": "Number: Represents the value of the transaction based on the quantity and the duration if `timeBased` is true. It is automatically computed. You can override it if you have the permission 'transaction:config:all'. Note: `ownerAmount` and `takerAmount` will be based on the overriding value if any. Anytime the quantity or the duration changes, `value` is recomputed. You have to set it again for a custom amount.",
									"type": "text"
								},
								{
									"key": "ownerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that goes to owner. It is based on the transaction value minus `ownerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'. Anytime the quantity or the duration changes, `value` is recomputed. You have to set it again for a custom amount.",
									"type": "text"
								},
								{
									"key": "takerAmount",
									"value": "",
									"description": "Number: Represents the transaction amount that should pay the taker. It is based on the transaction value plus `takerFeesPercent` defined in asset type. It is automatically computed. You can override it if you have the permission 'transaction:config:all'. Anytime the quantity or the duration changes, `value` is recomputed. You have to set it again for a custom amount.",
									"type": "text"
								},
								{
									"key": "status",
									"value": "draft",
									"description": "String: Can be set to anything. You can create your own transaction workflow by using  the Stelace Workflows. Needs the permission \"transaction:config:all\"",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/transactions/:transactionId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions",
								":transactionId"
							],
							"variable": [
								{
									"key": "transactionId",
									"value": "trn_a3BfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: transaction ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- transaction:edit - edits a transaction if the current user is the taker\n- transaction:edit:all - edits a transaction on behalf of other users\n- transaction:config:all - grants rights to update status on all transactions\n"
					},
					"response": [
						{
							"name": "Update transaction",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"duration\": {\"d\": 8},\n    \"quantity\": 1\n}"
								},
								"url": {
									"raw": "{{apiBase}}/transactions/trn_a3BfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions",
										"trn_a3BfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-13T12:45:23.351Z\",\n    \"updatedDate\": \"2018-04-13T12:45:23.351Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"assetSnapshot\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"assetType\": {\n        \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"name\": \"Sharing\",\n        \"timeBased\": true,\n        \"infiniteStock\": false,\n        \"pricing\": {\n            \"ownerFeesPercent\": 5,\n            \"takerFeesPercent\": 15\n        },\n        \"timing\": {\n            \"timeUnit\": \"d\",\n            \"maxDuration\": {\n                \"d\": 100\n            },\n            \"minDuration\": {\n                \"d\": 1\n            }\n        },\n        \"namespaces\": {\n            \"visibility\": {\n                \"protected\": [\n                    \"confirmed\",\n                    \"accepted\"\n                ]\n            }\n        },\n        \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n        \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n        \"active\": true,\n        \"metadata\": {},\n        \"platformData\": {},\n        \"livemode\": false\n    },\n    \"status\": \"draft\",\n    \"statusHistory\": [\n        {\n            \"status\": \"draft\",\n            \"date\": \"2018-04-13T12:45:23.351Z\"\n        }\n    ],\n    \"completedDate\": null,\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"takerId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"endDate\": \"2018-04-20T00:00:00.000Z\",\n    \"duration\": {\n        \"d\": 8\n    },\n    \"unitPrice\": 10,\n    \"value\": 80,\n    \"ownerAmount\": 76,\n    \"takerAmount\": 94.1,\n    \"platformAmount\": 18.1,\n    \"currency\": \"USD\",\n    \"deposit\": 150,\n    \"cancelledDate\": null,\n    \"cancellationReason\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create transaction transition",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "accept",
									"description": "String [required]: Name of transition defined in associated asset type's transaction process",
									"type": "text"
								},
								{
									"key": "data",
									"value": "",
									"description": "Object (Default: `{}`): Currently only the `cancel` transition needs `data.cancellationReason` (String, any value)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/transactions/:transactionId/transitions",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"transactions",
								":transactionId",
								"transitions"
							],
							"variable": [
								{
									"key": "transactionId",
									"value": "trn_a3BfQps1I3a1gJYz2I3a",
									"description": "String: transaction ID"
								}
							]
						},
						"description": "**Permissions**:\n\n- transaction:transition - create a transaction transition if the current user is part of the transaction (owner or taker)\n- transaction:transition:all - create a transaction transition on behalf of other users"
					},
					"response": [
						{
							"name": "Create transaction transition",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"accept\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/transactions/trn_a3BfQps1I3a1gJYz2I3a/transitions",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"transactions",
										"trn_a3BfQps1I3a1gJYz2I3a",
										"transitions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-13T12:45:23.351Z\",\n    \"updatedDate\": \"2018-04-13T12:45:23.351Z\",\n    \"assetId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"assetSnapshot\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n    \"assetType\": {\n        \"id\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"name\": \"Sharing\",\n        \"timeBased\": true,\n        \"infiniteStock\": false,\n        \"pricing\": {\n            \"ownerFeesPercent\": 5,\n            \"takerFeesPercent\": 15\n        },\n        \"timing\": {\n            \"timeUnit\": \"d\",\n            \"maxDuration\": {\n                \"d\": 100\n            },\n            \"minDuration\": {\n                \"d\": 1\n            }\n        },\n        \"namespaces\": {\n            \"visibility\": {\n                \"protected\": [\n                    \"confirmed\",\n                    \"accepted\"\n                ]\n            }\n        },\n        \"createdDate\": \"2018-03-12T18:26:55.717Z\",\n        \"updatedDate\": \"2018-04-13T16:20:54.648Z\",\n        \"active\": true,\n        \"metadata\": {},\n        \"platformData\": {},\n        \"livemode\": false\n    },\n    \"status\": \"accepted\",\n    \"statusHistory\": [\n        {\n            \"status\": \"accepted\",\n            \"date\": \"2018-05-13T12:45:23.351Z\"\n        },\n        {\n            \"status\": \"draft\",\n            \"date\": \"2018-04-13T12:45:23.351Z\"\n        }\n    ],\n    \"completedDate\": null,\n    \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"takerId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"quantity\": 1,\n    \"startDate\": \"2018-04-13T00:00:00.000Z\",\n    \"endDate\": \"2018-04-20T00:00:00.000Z\",\n    \"duration\": {\n        \"d\": 8\n    },\n    \"unitPrice\": 10,\n    \"value\": 80,\n    \"ownerAmount\": 76,\n    \"takerAmount\": 94.1,\n    \"platformAmount\": 18.1,\n    \"currency\": \"USD\",\n    \"deposit\": 150,\n    \"cancelledDate\": null,\n    \"cancellationReason\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				}
			],
			"description": "Stelace Transactions can be your single source of truth to proceed with payments, transactional emails, or anything related to the value generated by your platform.\n\nEach transaction `status` name can also be used for namespace visibility (see *Metadata* section).\n\n\n#### Default Transaction process\n\n![Transaction process](https://user-images.githubusercontent.com/25850444/60614329-fb81fc80-9dcc-11e9-8dd7-58333fbf49f1.png)\n\nIf the default transaction process doesn't suit your needs, you can use define your custom transaction process in Asset Types. Please refer to our [docs](https://stelace.com/docs/transactions).\n\nHere's the default transaction process config:\n```\n{\n  initStatus: 'draft',\n  cancelStatus: 'cancelled',\n  transitions: [\n    { name: 'accept', from: 'draft', to: 'accepted', actors: ['owner'] },\n    { name: 'confirm', from: 'draft', to: 'confirmed', actors: ['taker'] },\n    { name: 'pay', from: 'draft', to: 'pending-acceptance', actors: ['taker'] },\n    { name: 'confirmAndPay', from: 'draft', to: 'pending-acceptance', actors: ['taker'] },\n\n    { name: 'pay', from: 'confirmed', to: 'pending-acceptance', actors: ['taker'] },\n    { name: 'accept', from: 'confirmed', to: 'pending-payment', actors: ['owner'] },\n\n    { name: 'pay', from: 'accepted', to: 'validated', actors: ['taker'] },\n    { name: 'confirmAndPay', from: 'accepted', to: 'validated', actors: ['taker'] },\n    { name: 'confirm', from: 'accepted', to: 'pending-payment', actors: ['taker'] },\n\n    { name: 'accept', from: 'pending-acceptance', to: 'validated', actors: ['owner'] },\n\n    { name: 'pay', from: 'pending-payment', to: 'validated', actors: ['taker'] },\n\n    { name: 'complete', from: 'validated', to: 'completed' },\n    { name: 'cancel', from: '*', to: 'cancelled' }\n  ]\n}\n```\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Order API",
			"item": [
				{
					"name": "Order",
					"item": [
						{
							"name": "Preview order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "transactionIds",
											"value": "[\"trn_a3BfQps1I3a1gJYz2I3a\"]",
											"description": "Array of IDs: by providing the transactions IDs, the order will automatically compute order lines.",
											"type": "text"
										},
										{
											"key": "lines",
											"value": "[]",
											"description": "Array of line objects (Default: `[]`): see *Order line* for the parameters",
											"type": "text"
										},
										{
											"key": "moves",
											"value": "[]",
											"description": "Array of move objects (Default: `[]`): see *Order move* for the parameters",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/orders/preview",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"orders",
										"preview"
									]
								},
								"description": "Previewing an order can be convenient for your User Interface and also lets you adjust parameters like quantity if needed.\n\nYou just need `transactionIds` or `lines` to preview an order.\n\n**Permission**:\n\n- order:preview - previews an order if the current user is the payer or one of the receivers of this order\n- order:preview:all - previews an order from all users"
							},
							"response": [
								{
									"name": "Preview order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transactionIds\": [\"trn_a3BfQps1I3a1gJYz2I3a\"]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/orders/preview",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"orders",
												"preview"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"lines\": [\n        {\n            \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerAmount\": 1177,\n            \"receiverId\": null,\n            \"receiverAmount\": null,\n            \"platformAmount\": 177,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {},\n            \"livemode\": false\n        },\n        {\n            \"id\": \"ordl_BLusYs1mlp1h0inwmlp\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerId\": null,\n            \"payerAmount\": null,\n            \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n            \"receiverAmount\": 1000,\n            \"platformAmount\": 50,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {}\n        }\n    ],\n    \"moves\": [],\n    \"amountDue\": 1177,\n    \"amountPaid\": 0,\n    \"amountRemaining\": 1177,\n    \"currency\": \"USD\",\n    \"payerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"paymentAttempted\": false,\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Get order list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/orders?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=ord_Vuz9KRs10NK1gAHrp0NK,ord_ndKcBks1TV21ggvMqTV2&payerId=usr_WHlfQps1I3a1gJYz2I3a&receiverId=usr_Y0tfQps1I3a1gJYz2I3a&transactionId=trn_4FqUqs1zln1h9gZhzln",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "ord_Vuz9KRs10NK1gAHrp0NK,ord_ndKcBks1TV21ggvMqTV2",
											"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										},
										{
											"key": "payerId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `payerId`:\n- `payerId=id1`\n- `payerId[]=id1&payerId[]=id2`\n- `payerId=id1,id2`"
										},
										{
											"key": "receiverId",
											"value": "usr_Y0tfQps1I3a1gJYz2I3a",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `receiverId`:\n- `receiverId=id1`\n- `receiverId[]=id1&receiverId[]=id2`\n- `receiverId=id1,id2`"
										},
										{
											"key": "transactionId",
											"value": "trn_4FqUqs1zln1h9gZhzln",
											"description": "Single ID, array of IDs or comma separated IDs, filter on `transactionId`:\n- `transactionId=id1`\n- `transactionId[]=id1&transactionId[]=id2`\n- `transactionId=id1,id2`"
										}
									]
								},
								"description": "**Permission**:\n\n- order:list - lists orders if the current user is the payer or receiver of all selected orders\n- order:list:all - lists orders from all users"
							},
							"response": [
								{
									"name": "Get order list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/orders",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get order",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/orders/:orderId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "ord_eP0hwes1jwf1gxMLCjwf",
											"type": "string",
											"description": "String: order ID"
										}
									]
								},
								"description": "**Permission**:\n\n- order:read - reads an order if the current user is the payer or one of the receivers of this order\n- order:read:all - reads an order from all users"
							},
							"response": [
								{
									"name": "Get order",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/orders/ord_eP0hwes1jwf1gxMLCjwf",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"orders",
												"ord_eP0hwes1jwf1gxMLCjwf"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"lines\": [\n        {\n            \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerAmount\": 1177,\n            \"receiverId\": null,\n            \"receiverAmount\": null,\n            \"platformAmount\": 177,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {},\n            \"livemode\": false\n        },\n        {\n            \"id\": \"ordl_BLusYs1mlp1h0inwmlp\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerId\": null,\n            \"payerAmount\": null,\n            \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n            \"receiverAmount\": 1000,\n            \"platformAmount\": 50,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {}\n        }\n    ],\n    \"moves\": [],\n    \"amountDue\": 1177,\n    \"amountPaid\": 0,\n    \"amountRemaining\": 1177,\n    \"currency\": \"USD\",\n    \"payerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"paymentAttempted\": false,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "transactionIds",
											"value": "[\"trn_a3BfQps1I3a1gJYz2I3a\"]",
											"description": "Array of IDs: by providing the transactions IDs, the order will automatically compute order lines.",
											"type": "text"
										},
										{
											"key": "lines",
											"value": "[]",
											"description": "Array of line objects (Default: `[]`): see *Order line* for the parameters",
											"type": "text"
										},
										{
											"key": "moves",
											"value": "[]",
											"description": "Array of move objects (Default: `[]`): see *Order move* for the parameters",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/orders",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"orders"
									]
								},
								"description": "An order needs `transactionIds` or `lines` to be created.\n\n**Permission**:\n\n- order:create - creates an order if the current user is the payer or one of the receivers of this order\n- order:create:all - creates an order from all users"
							},
							"response": [
								{
									"name": "Create order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transactionIds\": [\"trn_a3BfQps1I3a1gJYz2I3a\"]\n}"
										},
										"url": {
											"raw": "{{apiBase}}/orders",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"lines\": [\n        {\n            \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerAmount\": 1177,\n            \"receiverId\": null,\n            \"receiverAmount\": null,\n            \"platformAmount\": 177,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {},\n            \"livemode\": false\n        },\n        {\n            \"id\": \"ordl_BLusYs1mlp1h0inwmlp\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerId\": null,\n            \"payerAmount\": null,\n            \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n            \"receiverAmount\": 1000,\n            \"platformAmount\": 50,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {}\n        }\n    ],\n    \"moves\": [],\n    \"amountDue\": 1177,\n    \"amountPaid\": 0,\n    \"amountRemaining\": 1177,\n    \"currency\": \"USD\",\n    \"payerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"paymentAttempted\": false,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update order",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/orders/:orderId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "ord_eP0hwes1jwf1gxMLCjwf",
											"type": "string",
											"description": "String: order ID"
										}
									]
								},
								"description": "**Permission**:\n\n- order:edit - edits an order if the current user is the payer or one of the receivers of this order\n- order:edit:all - edits an order from all users"
							},
							"response": [
								{
									"name": "Update order",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"metadata\": {\n    \t\"customData\": true\n    }\n}"
										},
										"url": {
											"raw": "{{apiBase}}/orders/ord_eP0hwes1jwf1gxMLCjwf",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"orders",
												"ord_eP0hwes1jwf1gxMLCjwf"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"lines\": [\n        {\n            \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerAmount\": 1177,\n            \"receiverId\": null,\n            \"receiverAmount\": null,\n            \"platformAmount\": 177,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {},\n            \"livemode\": false\n        },\n        {\n            \"id\": \"ordl_BLusYs1mlp1h0inwmlp\",\n            \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n            \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n            \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n            \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n            \"reversal\": false,\n            \"payerId\": null,\n            \"payerAmount\": null,\n            \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n            \"receiverAmount\": 1000,\n            \"platformAmount\": 50,\n            \"currency\": \"USD\",\n            \"metadata\": {},\n            \"platformData\": {}\n        }\n    ],\n    \"moves\": [],\n    \"amountDue\": 1177,\n    \"amountPaid\": 0,\n    \"amountRemaining\": 1177,\n    \"currency\": \"USD\",\n    \"senderId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"paymentAttempted\": false,\n    \"metadata\": {\n        \"customData\": true\n    },\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						}
					],
					"description": "Order object relies on Transactions to generate Order `lines`, that you can also add manually. Order `moves` let you track payments.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Order line",
					"item": [
						{
							"name": "Get order line",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/order-lines/:orderLineId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-lines",
										":orderLineId"
									],
									"variable": [
										{
											"key": "orderLineId",
											"value": "ordl_KdA9vs1st51h6q3wst5",
											"type": "string",
											"description": "String: order line ID"
										}
									]
								},
								"description": "**Permission**:\n\n- orderLine:read - reads an order line of which the current user is the payer or receiver\n- orderLine:read:all - reads an order line from all users"
							},
							"response": [
								{
									"name": "Get order line",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/order-lines/ordl_KdA9vs1st51h6q3wst5",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-lines",
												"ordl_KdA9vs1st51h6q3wst5"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"metadata\": {},\n    \"marketplaceData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create order line",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "orderId",
											"value": "ord_eP0hwes1jwf1gxMLCjwf",
											"description": "String [required]: the order ID",
											"type": "text"
										},
										{
											"key": "transactionId",
											"value": "trn_a3BfQps1I3a1gJYz2I3a",
											"description": "String (Default: `undefined`): the transaction referenced by this order line",
											"type": "text"
										},
										{
											"key": "reversal",
											"value": "false",
											"description": "Boolean (Default: `false`): Set to true if this order line is supposed to reversed another order line (like a refund after a cancellation)",
											"type": "text"
										},
										{
											"key": "payerId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "String (Default: `null`): the payer user. Required if payer amount is not null. If `transactionId` is passed, `payerId` must match the `transaction.takerId`",
											"type": "text"
										},
										{
											"key": "payerAmount",
											"value": "1177",
											"description": "Number (Default: `null`): the amount that should be taken from the payer at the start of the transaction",
											"type": "text"
										},
										{
											"key": "receiverId",
											"value": "null",
											"description": "String (Default: `null`): the receiver user. Required if receiver amount is not null. If `transactionId` is passed, `receiverId` is automatically set to the owner",
											"type": "text"
										},
										{
											"key": "receiverAmount",
											"value": "null",
											"description": "Number (Default: `null`): the amount that should be transferred to the receiver at the end of the transaction. That's basically the transaction `payerAmount` - `platformAmount`",
											"type": "text"
										},
										{
											"key": "platformAmount",
											"value": "177",
											"description": "Number (Default: `null`): the amount that should be transferred to the platform at the end of the transaction",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"description": "String [required]: the order line currency",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/order-lines",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-lines"
									]
								},
								"description": "**Permission**:\n\n- orderLine:create - creates an order line of which the current user is the payer or receiver\n- orderLine:create:all - creates an order line from all users"
							},
							"response": [
								{
									"name": "Create order line",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\"\n}"
										},
										"url": {
											"raw": "{{apiBase}}/order-lines",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-lines"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update order line",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "metadata",
											"value": "",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/order-lines/:orderLineId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-lines",
										":orderLineId"
									],
									"variable": [
										{
											"key": "orderLineId",
											"value": "ordl_KdA9vs1st51h6q3wst5",
											"type": "string",
											"description": "String: order line ID"
										}
									]
								},
								"description": "**Permission**:\n\n- orderLine:edit - edits an order line if the current user is the payer or receiver of this order line\n- orderLine:edit:all - edits an order line from all users"
							},
							"response": [
								{
									"name": "Update order line",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"metadata\": {\n    \t\"customData\": true\n    }\n}"
										},
										"url": {
											"raw": "{{apiBase}}/order-lines/ordl_KdA9vs1st51h6q3wst5",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-lines",
												"ordl_KdA9vs1st51h6q3wst5"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordl_KdA9vs1st51h6q3wst5\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"metadata\": {\n        \"customData\": true\n    },\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						}
					],
					"description": "Order lines include all the details about transactions and expected money transfers. Order lines can be generated automatically when creating an Order with `transactionIds`.\n\nYou can also manually add discounts and refunds as additional lines.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Order move",
					"item": [
						{
							"name": "Get order move",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/order-moves/:orderMoveId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-moves",
										":orderMoveId"
									],
									"variable": [
										{
											"key": "orderMoveId",
											"value": "ordm_yJLKVs101Q1gDyYe01Q",
											"type": "string",
											"description": "String: order move ID"
										}
									]
								},
								"description": "**Permission**:\n\n- orderMove:read - reads an order move if the current user is the payer or receiver of this order move\n- orderMove:read:all - reads an order move from all users"
							},
							"response": [
								{
									"name": "Get order move",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/order-moves/ordm_yJLKVs101Q1gDyYe01Q",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-moves",
												"ordm_yJLKVs101Q1gDyYe01Q"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordm_yJLKVs101Q1gDyYe01Q\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"real\": {\n        \"payerAmount\": 1038,\n        \"platformAmount\": 156,\n        \"currency\": \"EUR\"\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create order move",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "orderId",
											"value": "ord_eP0hwes1jwf1gxMLCjwf",
											"description": "String [required]: the order ID",
											"type": "text"
										},
										{
											"key": "transactionId",
											"value": "trn_a3BfQps1I3a1gJYz2I3a",
											"description": "String (Default: `undefined`): the transaction referenced by this order move",
											"type": "text"
										},
										{
											"key": "reversal",
											"value": "false",
											"description": "Boolean (Default: `false`): Set to true if this order move is supposed to reversed another order move (like a refund after a cancellation)",
											"type": "text"
										},
										{
											"key": "payerId",
											"value": "usr_WHlfQps1I3a1gJYz2I3a",
											"description": "String (Default: `null`): the payer user. Required if payer amount is not null",
											"type": "text"
										},
										{
											"key": "payerAmount",
											"value": "1177",
											"description": "Number (Default: `null`): the amount that is taken from the payer",
											"type": "text"
										},
										{
											"key": "receiverId",
											"value": "null",
											"description": "String (Default: `null`): the receiver user. Required if receiver amount is not null",
											"type": "text"
										},
										{
											"key": "receiverAmount",
											"value": "null",
											"description": "Number (Default: `null`): the amount that is transferred to the receiver",
											"type": "text"
										},
										{
											"key": "platformAmount",
											"value": "177",
											"description": "Number (Default: `null`): the amount that is transferred to the platform",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"description": "String [required]: the order move currency. Must be the same as the order line",
											"type": "text"
										},
										{
											"key": "real",
											"value": "{}",
											"description": "Object with keys below. Optional, this object describes the amounts with the real currency.",
											"type": "text"
										},
										{
											"key": "  payerAmount",
											"value": "1038",
											"description": "Number (Default: `null`): the amount that is taken from the payer",
											"type": "text"
										},
										{
											"key": "  receiverAmount",
											"value": "null",
											"description": "Number (Default: `null`): the amount that is transferred to the receiver",
											"type": "text"
										},
										{
											"key": "  platformAmount",
											"value": "156",
											"description": "Number (Default: `null`): the amount that is transferred to the platform",
											"type": "text"
										},
										{
											"key": "  currency",
											"value": "EUR",
											"description": "String [required]: the order move real currency",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/order-moves",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-moves"
									]
								},
								"description": "**Permission**:\n\n- orderMove:create - creates an order move if the current user is the payer or receiver of this order move\n- orderMove:create:all - creates an order move from all users"
							},
							"response": [
								{
									"name": "Create order move",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"real\": {\n        \"payerAmount\": 1038,\n        \"platformAmount\": 156,\n        \"currency\": \"EUR\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/order-moves",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-moves"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordm_yJLKVs101Q1gDyYe01Q\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"real\": {\n        \"payerAmount\": 1038,\n        \"platformAmount\": 156,\n        \"currency\": \"EUR\"\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update order move",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "real",
											"value": "{}",
											"description": "Object with keys below. Optional, this object describes the amounts with the real currency.",
											"type": "text"
										},
										{
											"key": "  payerAmount",
											"value": "1038",
											"description": "Number (Default: `null`): the amount that is taken from the payer",
											"type": "text"
										},
										{
											"key": "  platformAmount",
											"value": "156",
											"description": "Number (Default: `null`): the amount that is transferred to the platform",
											"type": "text"
										},
										{
											"key": "  receiverAmount",
											"value": "null",
											"description": "Number (Default: `null`): the amount that is transferred to the receiver",
											"type": "text"
										},
										{
											"key": "  currency",
											"value": "EUR",
											"description": "String [required]: the order move real currency",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										},
										{
											"key": "platformData",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/order-moves/:orderMoveId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"order-moves",
										":orderMoveId"
									],
									"variable": [
										{
											"key": "orderMoveId",
											"value": "ordm_yJLKVs101Q1gDyYe01Q",
											"type": "string",
											"description": "String: order move ID"
										}
									]
								},
								"description": "**Permission**:\n\n- orderMove:edit - edits an order move if the current user is the payer or receiver of this order move\n- orderMove:edit:all - edits an order move from all users"
							},
							"response": [
								{
									"name": "Update order move",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"real\": {\n        \"payerAmount\": 1038,\n        \"platformAmount\": 156,\n        \"currency\": \"EUR\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiBase}}/order-moves/ordm_yJLKVs101Q1gDyYe01Q",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"order-moves",
												"ordm_yJLKVs101Q1gDyYe01Q"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ordm_yJLKVs101Q1gDyYe01Q\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"orderId\": \"ord_eP0hwes1jwf1gxMLCjwf\",\n    \"transactionId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"reversal\": false,\n    \"payerAmount\": 1177,\n    \"receiverId\": null,\n    \"receiverAmount\": null,\n    \"platformAmount\": 177,\n    \"currency\": \"USD\",\n    \"real\": {\n        \"senderAmount\": 1038,\n        \"platformAmount\": 156,\n        \"currency\": \"EUR\"\n    },\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
								}
							]
						}
					],
					"description": "Order moves let you record payments processed by your payment gateway or any kind of money flow between the `payer` (called `taker` in Transactions) and one or multiple `receiver`s (usually owners of Assets).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Order API lets you group transactions and build an e-commerce experience with shopping cart functionality.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Event API",
			"item": [
				{
					"name": "Get event stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/events/stats?page=1&nbResultsPerPage=10&orderBy=count&order=desc&groupBy=object.assetTypeId&field=object.value&avgPrecision=0&id=&createdDate=2019-01-01&type=transaction__status_changed&objectType=transaction&objectId=&emitter=core&emitterId=&object=%7B%22status%22%3A%22completed%22%7D&metadata=",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"events",
								"stats"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "count",
									"description": "String (Default `avg`): Can be `avg`, `count`, `sum`, `min` or `max`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "groupBy",
									"value": "object.assetTypeId",
									"description": "String [required]: Can be one of the following values:\n- `type`\n- `objectType`\n- `objectId`\n- `parentId`\n- `emitter`\n- `emitterId`\n- `object.path.to.property` (any property path for `object`)\n- `metadata.path.to.property` (any property path for `metadata`)"
								},
								{
									"key": "field",
									"value": "object.value",
									"description": "String: Can specify any custom `object` or `metadata` property path that must be a number. If specified, the fields `avg`, `sum`, `min`, `max` will be computed"
								},
								{
									"key": "avgPrecision",
									"value": "0",
									"description": "Integer (Default: `2`): Number of decimals for computed `avg` number"
								},
								{
									"key": "id",
									"value": "",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "createdDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "type",
									"value": "transaction__status_changed",
									"description": "Single String, array of Strings or comma separated Strings:\n- `type=type1`\n- `type[]=type1&type[]=type2`\n- `type=type1,type2`"
								},
								{
									"key": "objectType",
									"value": "transaction",
									"description": "Single String, array of Strings or comma separated Strings"
								},
								{
									"key": "objectId",
									"value": "",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `objectId`:\n- `objectId=id1`\n- `objectId[]=id1&objectId[]=id2`\n- `objectId=id1,id2`"
								},
								{
									"key": "emitter",
									"value": "core",
									"description": "String: Possible values are `core` or `custom`"
								},
								{
									"key": "emitterId",
									"value": "",
									"description": "Single String, array of Strings or comma separated Strings"
								},
								{
									"key": "object",
									"value": "%7B%22status%22%3A%22completed%22%7D",
									"description": "Object:  Matching events having an `object` that contains this filter object (c.f. [`@>` PostgreSQL operator](https://www.postgresql.org/docs/10/functions-json.html)). You can use:\n- URL query parameter object notation like `object.status=completed` in this example.\n- or URI encoded parameters (e.g. `object=${encodeURIComponent(JSON.stringify({ status: 'completed' }))}`)."
								},
								{
									"key": "metadata",
									"value": "",
									"description": "Object:  Matching events have of which `metadata` contain this filter object (c.f. [`@>` PostgreSQL operator](https://www.postgresql.org/docs/10/functions-json.html)). You can use:\n- URL query parameter object notation like `object[parent][nested]=false`\n- or URI encoded parameters (e.g. `object=${encodeURIComponent(JSON.stringify({ parent: { nested: false, }, tags: [1, 2] }))}`)."
								}
							]
						},
						"description": "Events store the state of API objects in `object` and `metadata` at a specific time and you may want to aggregate this data over time for reporting.\n\nStelace provides aggregated functions out of the box to do so. You just need to provide the `groupBy` parameter to get aggregated stats.\n\nLet’s suppose we want to compute the total amount of Transaction value per Asset Type.\n\nSet the following parameters:\n- `type = 'transaction__status_changed'`\n- `groupBy = 'object.assetTypeId'` (`object` represents a Transaction with `transaction__status_changed` event `type`)\n- `field = 'object.value'` (`object` represents a Transaction with this event `type`)\n- `object = ${encodeURIComponent(JSON.stringify({ status: 'completed' }))}` if you only care about completed transactions. Note that you could also use `object.status=completed` as URL query parameter.\n\n\nBecause `field` is provided, each result line will get:\n- avg: the average value for the asset type\n- count: the number of transactions for the asset type\n- sum: the value sum for the asset type\n- min: the minimum value for the asset type\n- max: the maximum value for the asset type\n\nIf there is no `field` specified, only the property `count` will be computed.\n\n**Permission**:\n\n- event:stats:all"
					},
					"response": [
						{
							"name": "Get event stats",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/events/stats?groupBy=object.assetTypeId&field=object.value&type=transaction__status_changed&objectType=transaction&emitter=core&object=${encodeURIComponent(JSON.stringify({ status: 'completed' }))}",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"events",
										"stats"
									],
									"query": [
										{
											"key": "groupBy",
											"value": "object.assetTypeId"
										},
										{
											"key": "field",
											"value": "object.value"
										},
										{
											"key": "type",
											"value": "transaction__status_changed"
										},
										{
											"key": "objectType",
											"value": "transaction"
										},
										{
											"key": "emitter",
											"value": "core"
										},
										{
											"key": "object",
											"value": "${encodeURIComponent(JSON.stringify({ status: 'completed' }))}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"nbResultsPerPage\": 20,\n    \"nbResults\": 2,\n    \"nbPages\": 1,\n    \"results\": [\n        {\n            \"count\": 2,\n            \"sum\": 1500,\n            \"avg\": 750,\n            \"min\": 500,\n            \"max\": 1000,\n            \"groupBy\": \"object.assetTypeId\",\n            \"groupByValue\": \"typ_MGsfQps1I3a1gJYz2I3a\"\n        },\n        {\n            \"count\": 1,\n            \"sum\": 200,\n            \"avg\": 200,\n            \"min\": 200,\n            \"max\": 200,\n            \"groupBy\": \"object.assetTypeId\",\n            \"groupByValue\": \"typ_Vr001Be1JBF1hlzxYJBE\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get event list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/events?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=evt_WWRfQps1I3a1gJYz2I3a,evt_2l7fQps1I3a1gJYz2I3a&createdDate=2019-01-01&type=user__created&objectType=user&objectId=usr_WHlfQps1I3a1gJYz2I3a&emitter=custom&emitterId=someId&object=%7B%22status%22%3A%22completed%22%7D&metadata",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default: `createdDate`): Can be `name`, `createdDate` or `type`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "id",
									"value": "evt_WWRfQps1I3a1gJYz2I3a,evt_2l7fQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "createdDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "type",
									"value": "user__created",
									"description": "Single String, array of Strings or comma separated Strings:\n- `type=type1`\n- `type[]=type1&type[]=type2`\n- `type=type1,type2`"
								},
								{
									"key": "objectType",
									"value": "user",
									"description": "Single String, array of Strings or comma separated Strings"
								},
								{
									"key": "objectId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `objectId`:\n- `objectId=id1`\n- `objectId[]=id1&objectId[]=id2`\n- `objectId=id1,id2`"
								},
								{
									"key": "emitter",
									"value": "custom",
									"description": "String: Possible values are `core` or `custom`"
								},
								{
									"key": "emitterId",
									"value": "someId",
									"description": "Single String, array of Strings or comma separated Strings"
								},
								{
									"key": "object",
									"value": "%7B%22status%22%3A%22completed%22%7D",
									"description": "Object:  Matching events having an `object` that contains this filter object (c.f. [`@>` PostgreSQL operator](https://www.postgresql.org/docs/10/functions-json.html)). You can use:\n- URL query parameter object notation like `object.status=completed` in this example.\n- or URI encoded parameters (e.g. `object=${encodeURIComponent(JSON.stringify({ status: 'completed' }))}`)."
								},
								{
									"key": "metadata",
									"value": null,
									"description": "Object:  Matching events have of which `metadata` contain this filter object (c.f. [`@>` PostgreSQL operator](https://www.postgresql.org/docs/10/functions-json.html)). You can use:\n- URL query parameter object notation like `object[parent][nested]=false`\n- or URI encoded parameters (e.g. `object=${encodeURIComponent(JSON.stringify({ parent: { nested: false, }, tags: [1, 2] }))}`)."
								}
							]
						},
						"description": "Returns the list of all events created, in sorted order, the most recent event appearing first.\n\nAll parameters are optional.\n\n**Permission**:\n\n- event:list:all"
					},
					"response": [
						{
							"name": "Get event list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/events",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get event",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/events/:eventId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "evt_WWRfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: event ID"
								}
							]
						},
						"description": "**Permission**:\n\n- event:read:all\n"
					},
					"response": [
						{
							"name": "Get event",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/events/evt_WWRfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"events",
										"evt_WWRfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"evt_WWRfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"type\": \"asset__created\",\n    \"apiVersion\": \"2019-05-04\",\n    \"objectType\": \"asset\",\n    \"objectId\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n    \"object\": {\n        \"id\": \"ast_2l7fQps1I3a1gJYz2I3a\",\n        \"name\": \"Delorean\",\n        \"description\": \"The real DeLorean DMC-12\",\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"validated\": true,\n        \"active\": true,\n        \"locations\": [\n            {\n                \"latitude\": 34.099426,\n                \"longitude\": -118.337097\n            }\n        ],\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\",\n        \"quantity\": 1,\n        \"price\": 10,\n        \"deposit\": 150,\n        \"currency\": \"USD\",\n        \"customAttributes\": {},\n        \"metadata\": {},\n        \"platformData\": {},\n        \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n        \"updatedDate\": \"2018-04-06T16:04:39.331Z\",\n        \"livemode\": false\n    },\n    \"changesRequested\": null,\n    \"relatedObjectsIds\": {\n        \"ownerId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n        \"categoryId\": \"ctgy_ejQQps1I3a1gJYz2I3a\",\n        \"assetTypeId\": \"typ_MGsfQps1I3a1gJYz2I3a\"\n    },\n    \"parentId\": null,\n    \"emitter\": \"core\",\n    \"metadata\": {}\n}"
						}
					]
				},
				{
					"name": "Create custom event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "type",
									"value": "custom_type_created",
									"description": "String [required]: Any String is accepted, the only restriction is not to use 2 underscore characters in a row in the type (e.g. `custom_type__created` is forbidden)",
									"type": "text"
								},
								{
									"key": "objectId",
									"value": "",
									"description": "String: If the ID matches an object, then `object` will be automatically populated by a copy of this object. That can serve if a workflow is listening to this event `type`.",
									"type": "text"
								},
								{
									"key": "emitterId",
									"value": "",
									"description": "String: Can be used if you have multiple emitter sources so you can filter events easily via `emitterId`",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/events",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"events"
							]
						},
						"description": "**Permission**:\n\n- event:create:all\n"
					},
					"response": [
						{
							"name": "Create custom event",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"custom_type_created\",\n    \"metadata\": {\n        \"customMetadata\": true\n    }\n}"
								},
								"url": {
									"raw": "{{apiBase}}/events",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"evt_WWRfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-03-27T21:54:34.233Z\",\n    \"type\": \"custom_type_created\",\n    \"apiVersion\": \"2019-05-04\",\n    \"objectType\": null,\n    \"objectId\": null,\n    \"object\": null,\n    \"changesRequested\": null,\n    \"relatedObjectsIds\": null,\n    \"metadata\": {\n    \t\"customMetadata\": true\n    }\n}"
						}
					]
				}
			],
			"description": "Events are our way of letting you know when something interesting happens on your platform, and enable powerful customization.\n\nEvents occur when the state of any API object changes. Here is the list of events you can use:\n\n\n##### API key\n```\napi_key__created\napi_key__updated\napi_key__deleted\n```\n\n##### Asset\n```\nasset__created\nasset__activated\nasset__deactivated\nasset__validated\nasset__updated\nasset__name_changed\nasset__description_changed\nasset__category_switched\nasset__locations_changed\nasset__pricing_changed\nasset__quantity_changed\nasset__custom_attribute_changed\nasset__type_switched\nasset__deleted\n```\n\n##### Asset type\n```\nasset_type__created\nasset_type__updated\nasset_type__deleted\n```\n\n##### Availability\n```\navailability__created\navailability__updated\navailability__deleted\n```\n\n\n##### Category\n```\ncategory__created\ncategory__updated\ncategory__deleted\n```\n\n##### Custom attributes\n```\ncustom_attribute__created\ncustom_attribute__updated\ncustom_attribute__deleted\n```\n\n##### Entry\n```\nentry__created\nentry__updated\nentry__deleted\n```\n\n##### Message\n```\nmessage__created\n```\n\n##### Password\n```\npassword__changed\npassword__reset_requested\npassword__reset_confirmed\n```\n\n##### Order\n```\norder__created\norder__updated\n```\n\n##### Search\n```\nassets__searched\n```\n\n##### Token\n```\ntoken__check_requested\ntoken__check_confirmed\n```\n\n##### Transaction\n```\ntransaction__created\ntransaction__updated\ntransaction__status_changed\n```\n\n##### User\n```\nuser__created\nuser__updated\nuser__deleted\nuser__organization_joined\nuser__organization_left\nuser__organization_rights_changed\n```\n\n### Event object\n\nEach event is triggered on a specific object, standardized in camelCase like `assetType` that is the object of any `asset_type__*` event and you can get as `event.object`.\n\nFor more info about powerful event-driven development with Workflows, please refer to *Workflows API* section.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Workflows API",
			"item": [
				{
					"name": "Get workflow list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/workflows",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"workflows"
							]
						},
						"description": "**Permission**:\n\n- workflow:list:all"
					},
					"response": [
						{
							"name": "Get workflow list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/workflows",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get workflow",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/workflows/:workflowId?logs=",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"workflows",
								":workflowId"
							],
							"query": [
								{
									"key": "logs",
									"value": "",
									"description": "If appended to query params, workflow logs will be added to response object."
								}
							],
							"variable": [
								{
									"key": "workflowId",
									"value": "wfw_SEIfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: workflow ID"
								}
							]
						},
						"description": "**Permission**:\n\n- workflow:read:all\n\n\nYou can use this endpoint to get Workflow logs and ease debugging."
					},
					"response": [
						{
							"name": "Get workflow",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/workflows/wfw_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"workflows",
										"wfw_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"wfw_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Workflow test\",\n    \"description\": \"\",\n    \"context\": [],\n    \"notifyUrl\": \"https://example.com/webhook\",\n    \"event\": \"asset__created\",\n    \"run\": null,\n    \"computed\": null,\n    \"stats\": {\n        \"nbTimesRun\": 0\n    },\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create workflow",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test workflow",
									"description": "String [required]: Name to easily identify the workflow",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"description": "String: Description to explain the workflow runs",
									"type": "text"
								},
								{
									"key": "context",
									"value": "[]",
									"description": "Array of String (Default: `[]`): By specifying contexts, you can use configured environment variables. Please consult the section *Update workflow environment variables in private config*",
									"type": "text"
								},
								{
									"key": "notifyUrl",
									"value": "https://example.com/webhook",
									"description": "String: notify URL. You can provide this _and_ `run` object to receive raw events _and_ execute logic on Stelace servers.",
									"type": "text"
								},
								{
									"key": "event",
									"value": "\"asset__created\"",
									"description": "String (Default: `\"\"`): event listed in the Event API to listen",
									"type": "text"
								},
								{
									"key": "apiVersion",
									"value": "2019-05-04",
									"description": "String (Default to platform version): Can use a specific version. Event object will be transformed to match the API version",
									"type": "text"
								},
								{
									"key": "computed",
									"value": "{ contextValue: \"_.get(asset, 'metadata.dynamicPrice', 10)\" }",
									"description": "Object (Default: `null`). Each value must be a valid JavaScript expression. Only used in `run` steps. `S` helper can be used to safely get values from workflow context.",
									"type": "text"
								},
								{
									"key": "run",
									"value": "[{…}] Run step structure below",
									"description": "Array of Objects or single Object: provides Workflow actions logic. Workflow won’t execute anything if this not provided.",
									"type": "text"
								},
								{
									"key": "  name",
									"value": "Asset update",
									"description": "String: Name a run step to easily access step result in `responses[name]`object",
									"type": "text"
								},
								{
									"key": "  description",
									"value": "Increment the asset by 1",
									"description": "String: Description of the run step to explain what the step is about",
									"type": "text"
								},
								{
									"key": "  stop",
									"value": "\"asset.price > 100\"",
									"description": "String (Default: `false`): Javascript expression. If it is evaluated to a truthy value, current and remaining steps won’t be executed. Note that you can use computed object properties defined in current step too.",
									"type": "text"
								},
								{
									"key": "  skip",
									"value": "\"!asset.metadata.checked\"",
									"description": "String (Default: `false`): Javascript expression. If it is evaluated to a truthy value, only current won’t be executed. Note that you can use computed object properties defined in current step too.",
									"type": "text"
								},
								{
									"key": "  computed",
									"value": "{ contextValue2: \"_.get(asset, 'metadata.customDescription')\" }",
									"description": "Object (Default: `null`). Each value must be a valid JavaScript expression. Only used in `run` steps. `S` helper can be used to safely get values from workflow context. Run step `computed` has the same role as the root `computed` it extends. It allows you to define or overwrite values before executing current action. Any new values will be saved for subsequent actions.",
									"type": "text"
								},
								{
									"key": "  endpointMethod",
									"value": "\"PATCH\"",
									"description": "String [required]: HTTP verb to use for the endpoint. Can be set to \"PATCH\", \"POST\" or \"DELETE\"",
									"type": "text"
								},
								{
									"key": "  endpointUri",
									"value": "\"/assets/${asset.id}\"",
									"description": "String [required]: Endpoint URI that can be a Stelace API endoint or an external URL. A Javascript expression is expected.",
									"type": "text"
								},
								{
									"key": "  endpointPayload",
									"value": "{ price: \"asset.price + 1\" }",
									"description": "Object (Default: `null`): The payload object will be sent to the specified endpoint. Each value must be a valid JavaScript expression.",
									"type": "text"
								},
								{
									"key": "  endpointHeaders",
									"value": "{}",
									"description": "Object (Default: `{}`): Endpoint headers that can be used to set custom headers (e.g. authorization headers for external endpoints)",
									"type": "text"
								},
								{
									"key": "  handleErrors",
									"value": "false",
									"description": "Boolean (Default: `false`): If true, then if an error occurs in this step, it won't stop the workflow. To retrieve the error, you can hit the endpoint `/workflows/:workflowId?logs=` and search for the log that matches your run step.",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean (Default: `true`): if false, the workflow will be deactivated and won't send any events.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{ workflowMetadataExample: true }",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/workflows",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"workflows"
							]
						},
						"description": "**Permission**:\n\n- workflow:create:all"
					},
					"response": [
						{
							"name": "Create workflow",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Booked\",\n\t\"event\": \"transaction__status_changed\",\n\t\"computed\": {\n\t\t\"transactionId\": \"transaction.id\",\n\t\t\"assetId\": \"asset.id\",\n\t\t\"newPrice\": \"asset.price + 1\"\n\t},\n\t\"run\": [\n\t\t{\n    \t\"filter\": \"transaction.status === 'booked'\",\n\t\t\t\"action\": \"PATCH\",\n\t\t\t\"endpointPath\": \"/assets/${asset.id}\",\n\t\t\t\"endpointPayload\": {\n\t\t\t\t\"price\": \"computed.newPrice\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{apiBase}}/workflows",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"workflows"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"wfw_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Booked\",\n    \"description\": \"\",\n    \"context\": [],\n    \"notifyUrl\": null,\n    \"event\": \"transaction__status_changed\",\n    \"apiVersion\": \"2019-05-04\",\n    \"computed\": {\n        \"transactionId\": \"transaction.id\",\n        \"assetId\": \"asset.id\",\n        \"newPrice\": \"asset.price + 1\"\n    },\n    \"run\": [\n        {\n            \"filter\": \"transaction.status === 'booked'\",\n            \"action\": \"PATCH\",\n            \"endpointPath\": \"/assets/${asset.id}\",\n            \"endpointPayload\": {\n                \"price\": \"computed.newPrice\"\n            }\n        }\n    ],\n    \"stats\": null,\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update workflow",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Workflow test",
									"description": "String: Name to easily identify the workflow",
									"type": "text"
								},
								{
									"key": "description",
									"value": "",
									"description": "String: Description to explain how you’re designing the workflow",
									"type": "text"
								},
								{
									"key": "context",
									"value": "[]",
									"description": "Array of String: By specifying contexts, you can use configured environment variables. Please consult the section *Update workflow environment variables in private config*",
									"type": "text"
								},
								{
									"key": "event",
									"value": "\"transaction__created\"",
									"description": "String: event listed in the Event API to listen",
									"type": "text"
								},
								{
									"key": "apiVersion",
									"value": "2019-05-04",
									"description": "String: Can use a specific version. Event object will be transformed to match the API version",
									"type": "text"
								},
								{
									"key": "computed",
									"value": "{ contextValue: \"_.get(asset, 'metadata.dynamicPrice', 10)\" }",
									"description": "Object. Each value must be a valid JavaScript expression. Only used in `run` steps. `S` helper can be used to safely get values from workflow context.",
									"type": "text"
								},
								{
									"key": "run",
									"value": "[{…}] Run step structure below",
									"description": "Array of Objects or single Object: provides Workflow actions logic. Workflow won’t execute anything if this not provided.",
									"type": "text"
								},
								{
									"key": "  name",
									"value": "Asset update",
									"description": "String: Name a run step to easily access step result in `responses[name]`object",
									"type": "text"
								},
								{
									"key": "  description",
									"value": "Increment the asset by 1",
									"description": "String: Description of the run step to explain what the step is about",
									"type": "text"
								},
								{
									"key": "  stop",
									"value": "\"asset.price > 100\"",
									"description": "String (Default: `false`): Javascript expression. If it is evaluated to a truthy value, current and remaining steps won’t be executed. Note that you can use computed object properties defined in current step too.",
									"type": "text"
								},
								{
									"key": "  skip",
									"value": "\"!asset.metadata.checked\"",
									"description": "String (Default: `false`): Javascript expression. If it is evaluated to a truthy value, only current won’t be executed. Note that you can use computed object properties defined in current step too.",
									"type": "text"
								},
								{
									"key": "  computed",
									"value": "{ contextValue2: \"_.get(asset, 'metadata.customDescription')\" }",
									"description": "Object (Default: `null`). Each value must be a valid JavaScript expression. Only used in `run` steps. `S` helper can be used to safely get values from workflow context. Run step `computed` has the same role as the root `computed` it extends. It allows you to define or overwrite values before executing current action. Any new values will be saved for subsequent actions.",
									"type": "text"
								},
								{
									"key": "  endpointMethod",
									"value": "\"PATCH\"",
									"description": "String [required]: HTTP verb to use for the endpoint. Can be set to \"PATCH\", \"POST\" or \"DELETE\".",
									"type": "text"
								},
								{
									"key": "  endpointUri",
									"value": "\"/assets/${asset.id}\"",
									"description": "String [required]: Endpoint URI that can be a Stelace API endoint or an external URL. A Javascript expression is expected.",
									"type": "text"
								},
								{
									"key": "  endpointPayload",
									"value": "{ price: \"asset.price + 1\" }",
									"description": "Object (Default: `null`): The payload object will be sent to the specified endpoint. Each value must be a valid JavaScript expression.",
									"type": "text"
								},
								{
									"key": "  endpointHeaders",
									"value": "{}",
									"description": "Object (Default: `{}`): Endpoint headers that can be used to set custom headers (e.g. authorization headers for external endpoints)",
									"type": "text"
								},
								{
									"key": "  handleErrors",
									"value": "false",
									"description": "Boolean (Default: `false`): If true, then if an error occurs in this step, it won't stop the workflow. To retrieve the error, you can hit the endpoint `/workflows/:workflowId?logs=` and search for the log that matches your run step.",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean: if false, the workflow will be deactivated and won't send any events.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/workflows/:workflowId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"workflows",
								":workflowId"
							],
							"variable": [
								{
									"key": "workflowId",
									"value": "wfw_SEIfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: workflow ID"
								}
							]
						},
						"description": "**Permission**:\n\n- workflow:edit:all"
					},
					"response": [
						{
							"name": "Update workflow",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Booked\",\n\t\"event\": \"transaction__status_changed\",\n\t\"computed\": {\n\t\t\"transactionId\": \"transaction.id\",\n\t\t\"assetId\": \"asset.id\",\n\t\t\"newPrice\": \"asset.price + 1\"\n\t},\n\t\"run\": [\n\t\t{\n      \"filter\": \"transaction.status === 'booked'\",\n\t\t\t\"action\": \"PATCH\",\n\t\t\t\"endpointPath\": \"/assets/${asset.id}\",\n\t\t\t\"endpointPayload\": {\n\t\t\t\t\"price\": \"computed.newPrice\"\n\t\t\t}\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{apiBase}}/workflows/wfw_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"workflows",
										"wfw_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"wfw_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Booked\",\n    \"description\": \"\",\n    \"context\": [],\n    \"notifyUrl\": null,\n    \"event\": \"transaction__status_changed\",\n    \"apiVersion\": \"2019-05-04\",\n    \"computed\": {\n        \"transactionId\": \"transaction.id\",\n        \"assetId\": \"asset.id\",\n        \"newPrice\": \"asset.price + 1\"\n    },\n    \"run\": [\n        {\n            \"filter\": \"transaction.status === 'booked'\",\n            \"action\": \"PATCH\",\n            \"endpointPath\": \"/assets/${asset.id}\",\n            \"endpointPayload\": {\n                \"price\": \"computed.newPrice\"\n            }\n        }\n    ],\n    \"stats\": null,\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete workflow",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/workflows/:workflowId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"workflows",
								":workflowId"
							],
							"variable": [
								{
									"key": "workflowId",
									"value": "wfw_SEIfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: workflow ID"
								}
							]
						},
						"description": "**Permission**:\n\n- workflow:remove:all"
					},
					"response": [
						{
							"name": "Delete workflow",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/workflows/wfw_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"workflows",
										"wfw_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update workflow environment variables in private config",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "stelace",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  workflow",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "    contexts",
									"value": "{ contextName: { SOME_STRING: 'test', A_NUMBER: 150 } }",
									"description": "Object with context names as keys and an object composed of primitive types as value. The context names defined here can be used via the `context` property in the Workflow object.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/config/private",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config",
								"private"
							]
						},
						"description": "There are some use cases where you need to use secrets in workflows (e.g. calling an external API protected by an API key) or other kinds of environment variables.\n\nOne way is to directly hard-code such values into the workflow code, but there are two main issues:\n- security: secrets will be displayed when fetching workflows\n- maintenance: whenever a secret changes, each dependent workflow needs to be updated\n\nStelace API offers you a better way solve that issue by storing secrets and other variables directly using Private Config API so that they are automatically loaded by Stelace servers when executing workflows.\n\nSecrets are stored by context. Workflows can reference one or several of them via the property `context`, which accepts an array or a single string.\n\nTo use the secrets, use the special object `env` in the workflow code.\n\nExample:\n\n```\n// PATCH /config/private\n{\n\tstelace: {\n\t\tworkflow: {\n\t\t\tcontexts: {\n\t\t\t\texternalApi: {\n\t\t\t\t\tSECRET_VALUE: 'someSecret'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// POST /workflows\n{\n\t// other workflow properties\n    ...\n    context: ['externalApi'],\n\trun: [\n\t\t{\n\t\t\taction: 'PATCH',\n\t\t\tendpointPath: 'https://external-api.com',\n\t\t\tendpointPayload: {\n\t\t\t\tsecretValue: 'env.SECRET_VALUE'\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\nBy convention, we suggest to use capitalized variable names as their value is constant.\n\n_Note: when referencing multiple contexts, if several variable names collide, then the variable from the context referenced last in `context` array will override the others._\n\n**Permission**:\n\n- config:edit:all"
					},
					"response": [
						{
							"name": "Update workflow environment variables in private config",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stelace\": {\n    \t\"workflow\": {\n    \t\t\"contexts\": {\n    \t\t\t\"contextName\": {\n    \t\t\t\t\"SOME_STRING\": \"test\",\n    \t\t\t\t\"A_NUMBER\": 150\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/config/private",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config",
										"private"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n    \t\"workflow\": {\n    \t\t\"contexts\": {\n    \t\t\t\"contextName\": {\n    \t\t\t\t\"SOME_STRING\": \"test\",\n    \t\t\t\t\"A_NUMBER\": 150\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n}"
						}
					]
				}
			],
			"description": "*Stelace Workflows* are the most powerful and convenient way to create advanced and automated workflows using *Events*.\n\nEvents trigger appropriate Workflows you previously defined so you can execute automated JavaScript logic on our servers, like you would on a service like Zapier for instance, but *leveraging all Stelace API endpoints*.\n\n#### How to trigger a Workflow\nWorkflows are triggered as the result of an action executed on your platform (new transaction, new asset, user updated, etc.). Whenever a matching event occurs, workflow’s `run` actions are executed on Stelace servers.\n\nIf `notifyUrl` is provided, the raw event is also sent to this specified URI to trigger your own server’s logic.\n\n\n#### Workflow context\nIn Workflow’s `run` steps, you can use any of the raw `event` attributes, like the `event.object` itself. Please refer to *Events API* section for more details about Event object structure and to the table below to check the events exposing the `object` in Workflows.\n\nMore attributes are available during Stelace Workflows execution to allow powerful automated workflows.\n\n**Changes in update events**\n\nUpdate events expose a `changesRequested` object exposing which exact changes were submitted to the `object`’s update endpoint, which originally triggered the event.\n\n**Related objects**\n\nEach object can have *related objects*, like any asset’s `owner` you could get manually using `asset.ownerId`. All of these relatedObjects’ IDs are included in a `relatedObjectsIds` object to enable any workflows.\n\nStelace Workflows automatically populate their context with each of these *related objects* on the fly before running you logic. Related object `owner` is available in any `asset__*` or `transaction__*` event’s workflow for instance.\n\nNote than *related objects* are populated in Workflows only, not in your event payload sent to your predefined `notifyUrl`.\nWarning: if the object ID is an external ID (if you're external authentication for instance), the object will not populated as it doesn't exist in Stelace. Instead, it will be set to `null`.\n\nClick on the table below to expand and see all the events specifics in Workflows.\n\n#### Additional event attributes in Workflow context\n\n| Event                         |object|changesRequested| related objects  |\n| --------------------------    |:------:|:--------------:|:-----------------:|\n| **ApiKey Events**             ||||\n| api_key__created              |  ✓   |      |      |\n| api_key__updated              |  ✓   |  ✓  |      |\n| api_key__deleted              |  ✓    |     |      |\n| **Asset Events**            ||| *assetType, category, owner*|\n| asset__created              |  ✓   |      |   ✓   |\n| asset__updated              |  ✓   |  ✓  |   ✓   |\n| asset__activated            |       |  ✓  |  ✓    |\n| asset__deactivated          |       |  ✓  |  ✓    |\n| asset__validated            |       |  ✓  |  ✓    |\n| asset__name_changed         |       |  ✓  |  ✓    |\n| asset__description_changed  |       |  ✓  |  ✓    |\n| asset__category_switched    |       |  ✓  |  ✓    |\n| asset__locations_changed    |       |  ✓  |  ✓    |\n| asset__pricing_changed      |       |  ✓  |  ✓    |\n| asset__quantity_changed     |       |  ✓  |  ✓    |\n| asset__custom_attribute_changed |   |  ✓  |  ✓    |\n| asset__type_switched        |       |  ✓  |  ✓    |\n| asset__type_deleted         |  ✓    |      |  ✓   |\n| **AssetType Events**        ||||\n| asset_type__created         |  ✓   |     |      |\n| asset_type__updated         |  ✓   |  ✓   |      |\n| asset_type__deleted         |✓    |     |      |\n| **Availability Events** ||| *asset* |\n| availability__created |  ✓   |      |  ✓   |\n| availability__updated |  ✓   |  ✓  |   ✓   |\n| availability__deleted |  ✓    |      |  ✓   |\n| **Category Events**    ||||\n| category__created     |  ✓   |       |      |\n| category__updated     |  ✓   |  ✓   |      |\n| category__deleted     |  ✓  |        |      |\n| **CustomAttribute Events**    ||||\n| custom_attribute__created     |  ✓   |      |      |\n| custom_attribute__updated     |  ✓   |  ✓  |     |\n| custom_attribute__deleted     |  ✓    |     |      |\n| **Entry Events**             ||||\n| entry__created       |  ✓   |      |      |\n| entry__updated       |  ✓   |  ✓   |      |\n| entry__deleted       |  ✓   |      |      |\n| **Order Events**             ||||\n| order__created       |  ✓   |      |      |\n| order__updated       |  ✓   |      |      |\n| **Message Events**             ||||\n| message__created       |  ✓   |      |      |\n| **Search Events**     ||||\n| assets__searched            |1st result|      |       |\n| **Token Events**      ||||\n| token__check_requested              |user|      |token in metadata|\n| token__check_confirmed              |user|      |token in metadata|\n| **Transaction Events**            ||| *asset, taker, owner* |\n| transaction__created              |  ✓   |      |   ✓   |\n| transaction__updated              |  ✓   |  ✓  |   ✓   |\n| transaction__status_changed       |  ✓   |      |  ✓    |\n| **User Events**               ||||\n| user__created                 |  ✓   |      |      |\n| user__updated                 |  ✓   |  ✓   |      |\n| user__deleted                 |  ✓   |      |      |\n| user__organization_joined         |  ✓   |      |      |\n| user__organization_left           |  ✓   |      |      |\n| user__organization_rights_changed |  ✓   |      |      |\n| password__changed             |  ✓   |      |      |\n| password__reset_requested     |  ✓   |  ✓   |      |\n| password__reset_confirmed     |  ✓   |      |      |\n\n\n\n#### Workflow run object\n\nEach workflow can have one or more several *run steps* in `run` array, executed in order in _Workflow context_.\n\nEach step must provide an `endpointMethod` (HTTP method) and the appropriate Stelace `endpointUri` string, with `endpointPayload` object if needed. `stop`, `skip` expressions and `computed` object are optional.\n\n**JavaScript expressions**\n\n`endpointPayload` and `computed` nested values are all expected to be valid Javascript expressions evaluated against _workflow context_. `enpointPayload` accepts nested objects as well.\n\n`stop` and `skip` must also be valid Javascript expressions\n\nPassing a plain string as an expression is as simple as wrapping it in additional quotes in your JSON payload, like `\"myString\": \"'in simple quotes'\"`.\n\nTo inject IDs in `endpointUri` and `endpointHeaders` strings, you can use [JavaScript ES6 template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) interpolation with `${expression}` syntax. You don’t need to add the expected backticks `` ` `` that will automatically wrap the string value during Workflow execution. So you can set `\"endpointUri\": \"/assets/${computed.assetId}\"` in your Workflow, which will be turned into `\"/assets/ast_2l7fQps1I3a1gJYz2I3a\"` during execution.\n\n\n**Computed object**\n\n`computed` object allows you to set properties in Workflow context to use in `endpointUri`, `endpointPayload` or `stop` for current *and* next steps.\n\n`computed` can be initialized before all steps and assigned more properties or overwritten with new property values in each step.\n\n**Endpoint payload**\n\n`endpointPayload` is sent during current step’s `PATCH` or `POST` action and can use any attribute in context exactly like `endpointUri`.\n\n**Endpoint responses**\n\nEach response of previous run steps is prepended (most recent first in the array) to `lastResponses` array.\n\n*Named responses*\n\nIf a name is provided for a run step, the response will be available in the object `responses` with the step name as key.\n\n**Filters**\n\n`stop` will prevent current and next Workflow _steps_ from being executed if it’s evaluated to `true` as a JavaScript expression in _Workflow context_.\n\n`skip` will only prevent _current step_ from being executed if it’s true.\n\n**Logging**\n\nSuccessful and stopped executions are logged, and errors as well\n\n\n**Lodash**\n\n[Lodash v4.17](https://lodash.com/docs/4.17.11) is injected into Workflow runs to ease development.\nFor instance, to safely access deep object attributes, you can use the Lodash [_.get](https://lodash.com/docs/4.17.11#get) function.\n\n**Intl**\n\nIntl with all locales is injected into Workflow so you can use it to format string programmatically if needed.\nLike:\n```\nnew Intl.DateTimeFormat('en-GB', {\n  day: 'numeric',\n  month : 'long',\n  year : 'numeric'\n}).format(new Date('2019-10-22'))\n```\n\n\n**Limitations**\n\n- Timeout is set to 1000 milliseconds in each `run` step. An error will be thrown after this delay.\n- You can’t `require` npm modules in sandboxed environment, for security reasons.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Task API",
			"item": [
				{
					"name": "Get task list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/tasks?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=usr_WHlfQps1I3a1gJYz2I3a,usr_Y0tfQps1I3a1gJYz2I3a&createdDate=2019-01-01&updatedDate=2019-01-01&eventType&eventObjectId&active",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "id",
									"value": "usr_WHlfQps1I3a1gJYz2I3a,usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "createdDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "updatedDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "eventType",
									"value": null,
									"description": "Single ID, array of IDs or comma separated types, filter on  `eventType`:\n-  `eventType=type1`\n- `eventType[]=type1&eventType[]=type2`\n- `eventType=type1,type2`"
								},
								{
									"key": "eventObjectId",
									"value": null,
									"description": "Single ID, array of IDs or comma separated IDs, filter on `eventObjectId`:\n- `eventObjectId=id1`\n- `eventObjectId[]=id1&eventObjectId[]=id2`\n- `eventObjectId=id1,id2`"
								},
								{
									"key": "active",
									"value": null,
									"description": "Boolean"
								}
							]
						},
						"description": "**Permission**:\n\n- task:list:all"
					},
					"response": [
						{
							"name": "Get task list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/tasks",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get task",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/tasks/:taskId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "task_4bJEZe1bA91i7IQYbA8",
									"type": "string",
									"description": "String: task ID"
								}
							]
						},
						"description": "**Permission**:\n\n- task:read:all"
					},
					"response": [
						{
							"name": "Get task",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/tasks/task_4bJEZe1bA91i7IQYbA8",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"tasks",
										"task_4bJEZe1bA91i7IQYbA8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"task_4bJEZe1bA91i7IQYbA8\",\n    \"executionDate\": \"2019-04-14T08:53:59.076Z\",\n    \"recurringPattern\": null,\n    \"recurringTimezone\": null,\n    \"eventType\": \"customType\",\n    \"eventMetadata\": {},\n    \"eventObjectId\": \"objectIdExample\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create task",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "executionDate",
									"value": "2019-04-14T08:53:59.076Z",
									"description": "Date (ISO): the task will be scheduled for this date. Please note that it won't be exactly triggered at this date. The provided date will be rounded to the nearest minute.\n\nNote: `executionDate` and `recurringPattern` cannot be defined simultaneously.",
									"type": "text"
								},
								{
									"key": "recurringPattern",
									"value": "",
									"description": "String (Default: `null`): Indicates the task trigger pattern. The format is the same as the cron format.  Example: available every Tuesday, the `recurringPattern` is \"0 0 \\* \\* 2\".\n\nNote: `executionDate` and `recurringPattern` cannot be defined simultaneously.",
									"type": "text"
								},
								{
									"key": "recurringTimezone",
									"value": "",
									"description": "String (Default: `null`, UTC): Defines the `recurringPattern` timezone. Example: to use Los Angeles timezone, set this parameter to \"America/Los_Angeles\". You can find a list of timezones here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
									"type": "text"
								},
								{
									"key": "eventType",
									"value": "",
									"description": "String [required]: Event type that will be passed when creating the event",
									"type": "text"
								},
								{
									"key": "eventMetadata",
									"value": "",
									"description": "Object (Default: `{}`): Event metadata that will be passed when creating the event",
									"type": "text"
								},
								{
									"key": "eventObjectId",
									"value": "objectIdExample",
									"description": "String (Default: `null`): API object ID that will be passed to populate the event",
									"type": "text"
								},
								{
									"key": "active",
									"value": "",
									"description": "Boolean (Default: `true`): If false, the task is deactivated and won't trigger at the scheduled date",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/tasks",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "**Permission**:\n\n- task:create:all"
					},
					"response": [
						{
							"name": "Create task",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"executionDate\": \"2019-04-14T08:53:59.076Z\",\n    \"eventType\": \"customType\",\n    \"eventObjectId\": \"objectIdExample\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/tasks",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"task_4bJEZe1bA91i7IQYbA8\",\n    \"executionDate\": \"2019-04-14T08:54:00.000Z\",\n    \"recurringPattern\": null,\n    \"recurringTimezone\": null,\n    \"eventType\": \"customType\",\n    \"eventMetadata\": {},\n    \"eventObjectId\": \"objectIdExample\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update task",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "executionDate",
									"value": "2019-04-14T08:53:59.076Z",
									"description": "Date (ISO): the task will be scheduled for this date. Please note that it won't be exactly triggered at this date. The provided date will be rounded to the nearest minute.\n\nNote: `executionDate` and `recurringPattern` cannot be defined simultaneously.",
									"type": "text"
								},
								{
									"key": "recurringPattern",
									"value": "",
									"description": "String: Indicates the task trigger pattern. The format is the same as the cron format.  Example: available every Tuesday, the `recurringPattern` is \"0 0 \\* \\* 2\".\n\nNote: `executionDate` and `recurringPattern` cannot be defined simultaneously.",
									"type": "text"
								},
								{
									"key": "recurringTimezone",
									"value": "",
									"description": "String: Defines the `recurringPattern` timezone. Example: to use Los Angeles timezone, set this parameter to \"America/Los_Angeles\". You can find a list of timezones here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
									"type": "text"
								},
								{
									"key": "eventType",
									"value": "",
									"description": "String: Event type that will be passed when creating the event",
									"type": "text"
								},
								{
									"key": "eventMetadata",
									"value": "",
									"description": "Object: Event metadata that will be passed when creating the event",
									"type": "text"
								},
								{
									"key": "eventObjectId",
									"value": "objectIdExample",
									"description": "String: API object ID that will be passed to populate the event",
									"type": "text"
								},
								{
									"key": "active",
									"value": "",
									"description": "Boolean: If false, the task is deactivated and won't trigger at the scheduled date",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/tasks/:taskId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "task_4bJEZe1bA91i7IQYbA8",
									"type": "string",
									"description": "String: task ID"
								}
							]
						},
						"description": "**Permission**:\n\n- task:edit:all"
					},
					"response": [
						{
							"name": "Update task",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"executionDate\": \"2019-04-14T08:53:59.076Z\",\n    \"eventType\": \"customType\",\n    \"eventObjectId\": \"objectIdExample\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/tasks/task_4bJEZe1bA91i7IQYbA8",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"tasks",
										"task_4bJEZe1bA91i7IQYbA8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"task_4bJEZe1bA91i7IQYbA8\",\n    \"executionDate\": \"2019-04-14T08:54:00.000Z\",\n    \"recurringPattern\": null,\n    \"recurringTimezone\": null,\n    \"eventType\": \"customType\",\n    \"eventMetadata\": {},\n    \"eventObjectId\": \"objectIdExample\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete task",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/tasks/:taskId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "task_4bJEZe1bA91i7IQYbA8",
									"type": "string",
									"description": "String: task ID"
								}
							]
						},
						"description": "_Note: For convenience, any task with an `eventObjectId` is automatically removed when the underlying API object ID is removed._\n\n**Permission**:\n\n- task:remove:all"
					},
					"response": [
						{
							"name": "Delete task",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/tasks/task_4bJEZe1bA91i7IQYbA8",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"tasks",
										"task_4bJEZe1bA91i7IQYbA8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Task API lets you schedule custom event creation for advanced automation.\n\nHere are a few examples of the many things you can do with Tasks and Workflows:\n\n- cancel a Transaction after some delay if there is no interaction\n- run a workflow every week to send reports to your platform users\n- send specific data to an external database every hour\n\n\nA task is composed of scheduling properties and event creation parameters.\n\nScheduling properties:\n\n- `executionDate`\n- `recurringPattern`\n- `recurringTimezone`\n\n`executionDate` and `recurringPattern` cannot be used simultaneously and only one of them should be defined.\n\nEvent parameters explicitly map to custom Event creation endpoint parameters:\n\n- `eventType` maps to `type`\n- `eventMetadata` maps to `metadata`\n- `eventObjectId` maps to `objectId`",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Check API",
			"item": [
				{
					"name": "Request check token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "String: optional if the request comes from an authenticated user",
									"type": "text"
								},
								{
									"key": "type",
									"value": "email",
									"description": "String [required]: Check process type like`email`, any value is accepted",
									"type": "text"
								},
								{
									"key": "expirationDate",
									"value": "2018-05-30T09:12:56.456Z",
									"description": "Date (ISO): If provided, any token that is checked after the `expirationDate` will be considered as expired",
									"type": "text"
								},
								{
									"key": "redirectUrl",
									"value": "",
									"description": "String: Users will be redirected to this URL after a token check.",
									"type": "text"
								},
								{
									"key": "data",
									"value": "{ email: 'john@example.com' }",
									"description": "Object (Default: `{}`): Use it to put any data needed to perform the check (e.g. user email)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/token/check/request",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"token",
								"check",
								"request"
							]
						},
						"description": "After the request, `token__check_requested` Event is emitted with some metadata. Here’s an example to verify an email address:\n```\n{\n  token: 'RFpfQps1I3a1gJYz2I3a', // transmit this value to the user\n  type: 'email',\n  expirationDate: '2018-05-30T09:12:56.456Z',\n  data: {\n    email: 'john@example.com'\n  }\n}\n```\n\n**Permission**:\n\n- token:check"
					},
					"response": [
						{
							"name": "Confirm check token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n\t\"type\": \"email\",\n\t\"expirationDate\": \"2018-05-30T09:12:56.456Z\",\n\t\"data\": {\n\t\t\"email\": \"john@example.com\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/token/check/request",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"token",
										"check",
										"request"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"success\": true\n}"
						}
					]
				},
				{
					"name": "Validate check token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/token/check/:token?redirect=",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"token",
								"check",
								":token"
							],
							"query": [
								{
									"key": "redirect",
									"value": "",
									"description": "Boolean (Default: `false`): omit this param to get plain JSON response."
								}
							],
							"variable": [
								{
									"key": "token",
									"value": "RFpfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: token value (retrieved from the event `token__check_requested`)"
								}
							]
						},
						"description": "The token validation result can be returned with or without an URL redirection, depending on `redirect` parameter.\n\n- If a redirection is requested (`redirect=true`), a redirection to `redirectUrl`. The `token` and `status` params will be appended to the URL.\n\n- If there is no redirection, a JSON object will simply be returned. Here's an example:\n\n```\n{\n    \"status\": \"valid\",\n    \"type\": \"email\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"expirationDate\": \"2018-05-30T09:12:56.456Z\",\n    \"data\": {\n        \"email\": \"john@example.com\"\n    }\n}\n```\n\n\n`status` can be any of the following values:\n\n- `valid`: token is valid, and the procedure is now complete and `token__check_confirmed` Event is emitted.\n- `alreadyChecked`: the status `valid` is returned only once, any subsequent request to this endpoint will return `alreadyChecked`\n- `invalid`: the token is invalid or there is some configuration issue (e.g. `redirect=true` requested but there is no redirect URL configured)\n- `expired`: the check is performed after the expiration date\n\n\n### Direct request to Stelace API\n\nTo allow users to directly hit Stelace API, this endpoint is specially designed to accept the token without any API Key or permission. This way you can easily embed the check link in an email or SMS."
					},
					"response": [
						{
							"name": "Confirm check token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{apiBase}}/token/check/r12x6q54f12d",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"token",
										"check",
										"r12x6q54f12d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"valid\",\n    \"type\": \"email\",\n    \"userId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"expirationDate\": \"2018-05-30T09:12:56.456Z\",\n    \"data\": {\n        \"email\": \"john@example.com\"\n    }\n}"
						}
					]
				}
			],
			"description": "Check API makes it simple to verify some user information like email address or phone number, and also lets you grant access to protected resources for a specific period of time.\n\nThe check process is splitted into the following steps:\n\n1. request a check token with optional data to verify (POST `/token/check/request`)\n2. send this token to the user via a secure channel\n3. the user sends it back to Stelace API, e.g. by clicking a link (GET `/token/check/:token`)\n4. Stelace API verifies the token, emits the result, and optionally redirects\n\nGenerated events:\n\n```\ntoken__check_requested\ntoken__check_confirmed\n```\n\nCheck API plays well with other Events and Workflow API. For instance you can automatically check some user info upon signup (`user__created`) or grant some additional access after specific business custom Events.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Webhooks API",
			"item": [
				{
					"name": "Get webhook list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/webhooks",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"webhooks"
							]
						},
						"description": "**Permission**:\n\n- webhook:list:all"
					},
					"response": [
						{
							"name": "Get webhook list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/webhooks",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"webhooks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get webhook",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/webhooks/:webhookId?logs=",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"webhooks",
								":webhookId"
							],
							"query": [
								{
									"key": "logs",
									"value": "",
									"description": "If appended to query params, workflow logs will be added to response object."
								}
							],
							"variable": [
								{
									"key": "webhookId",
									"value": "whk_SEIfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: webhook ID"
								}
							]
						},
						"description": "**Permission**:\n\n- webhook:read:all\n\n\nYou can use this endpoint to get Webhook logs and ease debugging."
					},
					"response": [
						{
							"name": "Get workflow",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/webhooks/whk_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"webhooks",
										"whk_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"whk_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Webhook test\",\n    \"targetUrl\": \"https://example.com/webhook\",\n    \"event\": \"asset__created\",\n    \"apiVersion\": \"2019-05-04\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create webhook",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test webhook",
									"description": "String [required]: Name to easily identify the webhook",
									"type": "text"
								},
								{
									"key": "targetUrl",
									"value": "https://example.com/webhook",
									"description": "String: target URL",
									"type": "text"
								},
								{
									"key": "event",
									"value": "asset__created",
									"description": "String: event listed in the Event API to listen",
									"type": "text"
								},
								{
									"key": "apiVersion",
									"value": "2019-05-04",
									"description": "String (Default to platform version): Can use a specific version. Event object will be transformed to match the API version",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean (Default: `true`): if `false`, the webhook will be deactivated and won't send any events.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{ webhookMetadataExample: true }",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/webhooks",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"webhooks"
							]
						},
						"description": "**Permission**:\n\n- webhook:create:all"
					},
					"response": [
						{
							"name": "Create webhook",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Webhook test\",\n    \"targetUrl\": \"https://example.com/webhook\",\n    \"event\": \"asset__created\",\n    \"apiVersion\": \"2019-05-04\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/webhooks",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"webhooks"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"whk_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Webhook test\",\n    \"targetUrl\": \"https://example.com/webhook\",\n    \"event\": \"asset__created\",\n    \"apiVersion\": \"2019-05-04\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update webhook",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Webhook test",
									"description": "String: Name to easily identify the webhook",
									"type": "text"
								},
								{
									"key": "event",
									"value": "transaction__created",
									"description": "String: event listed in the Event API to listen",
									"type": "text"
								},
								{
									"key": "apiVersion",
									"value": "2019-05-04",
									"description": "String: Can use a specific version. Event object will be transformed to match the API version",
									"type": "text"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Boolean: if `false`, the webhook will be deactivated and won't send any events.",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/webhooks/:webhookId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"webhooks",
								":webhookId"
							],
							"variable": [
								{
									"key": "webhookId",
									"value": "whk_SEIfQps1I3a1gJYz2I3a",
									"description": "String: webhook ID"
								}
							]
						},
						"description": "**Permission**:\n\n- webhook:edit:all"
					},
					"response": [
						{
							"name": "Update webhook",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Webhook test\",\n    \"event\": \"asset__created\",\n    \"active\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/webhooks/whk_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"webhooks",
										"whk_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"whk_SEIfQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"name\": \"Webhook test\",\n    \"targetUrl\": \"https://example.com/webhook\",\n    \"event\": \"asset__created\",\n    \"apiVersion\": \"2019-05-04\",\n    \"active\": true,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete webhook",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/webhooks/:webhookId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"webhooks",
								":webhookId"
							],
							"variable": [
								{
									"key": "webhookId",
									"value": "whk_SEIfQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: webhook ID"
								}
							]
						},
						"description": "**Permission**:\n\n- webhook:remove:all"
					},
					"response": [
						{
							"name": "Delete webhook",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/webhooks/whk_SEIfQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"webhooks",
										"whk_SEIfQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "*Stelace Webhooks* are the most convenient way to create custom logic on your servers using *Events*.\n\n### When do we trigger a Webhook?\nWorkflows are triggered as the result of an action executed on your platform (new transaction, new asset, user updated, etc.). Whenever a matching event occurs, the event is sent to your predefined webhook endpoint.\n\n\n**Changes in update events**\n\nUpdate events expose a `changesRequested` object exposing which exact changes were submitted to the `object`’s update endpoint, which originally triggered the event.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ratings API",
			"item": [
				{
					"name": "Get rating stats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/ratings/stats?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&groupBy=authorId&computeRanking=true&authorId=usr_WHlfQps1I3a1gJYz2I3a&targetId=usr_Y0tfQps1I3a1gJYz2I3a&assetId=ast_4FqUqs1zln1h9gZhzlnb&transactionId=trn_UG1fQps1I3a1gJYz2I3a&label",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings",
								"stats"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default `avg`): Can be `avg`, `count`, `sum`, `min` or `max`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "groupBy",
									"value": "authorId",
									"description": "String [required]: Can be `authorId`, `targetId`, `assetId`, `transactionId`"
								},
								{
									"key": "computeRanking",
									"value": "true",
									"description": "Boolean: if `true`, add a ranking attribute to the result"
								},
								{
									"key": "authorId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `authorId`:\n- `authorId=id1`\n- `authorId[]=id1&authorId[]=id2`\n- `authorId=id1,id2`"
								},
								{
									"key": "targetId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `targetId`:\n- `targetId=id1`\n- `targetId[]=id1&targetId[]=id2`\n- `targetId=id1,id2`"
								},
								{
									"key": "assetId",
									"value": "ast_4FqUqs1zln1h9gZhzlnb",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `assetId`:\n- `assetId=id1`\n- `assetId[]=id1&assetId[]=id2`\n- `assetId=id1,id2`"
								},
								{
									"key": "transactionId",
									"value": "trn_UG1fQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `transactionId`:\n- `transactionId=id1`\n- `transactionId[]=id1&transactionId[]=id2`\n- `transactionId=id1,id2`"
								},
								{
									"key": "label",
									"value": null,
									"description": "Single String, array of Strings or comma separated Strings, filter on `label`. Wildcard formats accepted like \"myCustomRatingType:*\""
								}
							]
						},
						"description": "A single rating isn’t enough to ascertain an asset’s popularity. Get all ratings corresponding to the asset and compute the average.\n\nStelace provides aggregated functions out of the box. You just need to provide the `groupBy` parameter to get stats on it.\n\nLet's get the rating stats for each asset. You just have to set `groupBy` to \"assetId\".\n\nEach result line will get:\n- avg: the average score for this asset\n- count: the number of ratings for this asset\n- sum: the score sum for this asset\n- min: the minimum score for this asset\n- max: the maximum score for this asset\n\nIf you enable the parameter `computeRanking`, you will also get `ranking` and `lowestRanking` attributes on the result line.\n\nIt's easy to see if some user is one of the top most rated users of your platform by providing the following parameters:\n- `groupBy = 'targetId'`\n- `computedRanking = true`\n- `targetId = 'usr_1'` (the user you're interested in)\n\n**Permission**:\n\n- rating:stats:all"
					},
					"response": [
						{
							"name": "Get rating stats",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/ratings/stats?groupBy=targetId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings",
										"stats"
									],
									"query": [
										{
											"key": "groupBy",
											"value": "targetId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"nbResultsPerPage\": 20,\n    \"nbResults\": 2,\n    \"nbPages\": 1,\n    \"results\": [\n        {\n            \"count\": 2,\n            \"sum\": 150,\n            \"avg\": 75,\n            \"min\": 50,\n            \"max\": 100,\n            \"targetId\": \"usr_WHlfQps1I3a1gJYz2I3a\"\n        },\n        {\n            \"count\": 1,\n            \"sum\": 60,\n            \"avg\": 60,\n            \"min\": 60,\n            \"max\": 60,\n            \"targetId\": \"usr_Y0tfQps1I3a1gJYz2I3a\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get rating list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/ratings?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=rtg_Vuz9KRs10NK1gAHrp0NK,rtg_ndKcBks1TV21ggvMqTV2&authorId=usr_WHlfQps1I3a1gJYz2I3a&targetId=usr_Y0tfQps1I3a1gJYz2I3a&assetId=ast_4FqUqs1zln1h9gZhzlnb&transactionId=trn_UG1fQps1I3a1gJYz2I3a&label",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer: the default value is 1"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer: the default value is 20. Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String: the default value is \"createdDate\". Can be \"createdDate\" or \"updatedDate\""
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String: the default value is \"desc\". Can be \"asc\" or \"desc\""
								},
								{
									"key": "id",
									"value": "rtg_Vuz9KRs10NK1gAHrp0NK,rtg_ndKcBks1TV21ggvMqTV2",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "authorId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `authorId`:\n- `authorId=id1`\n- `authorId[]=id1&authorId[]=id2`\n- `authorId=id1,id2`"
								},
								{
									"key": "targetId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `targetId`:\n- `targetId=id1`\n- `targetId[]=id1&targetId[]=id2`\n- `targetId=id1,id2`"
								},
								{
									"key": "assetId",
									"value": "ast_4FqUqs1zln1h9gZhzlnb",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `assetId`:\n- `assetId=id1`\n- `assetId[]=id1&assetId[]=id2`\n- `assetId=id1,id2`"
								},
								{
									"key": "transactionId",
									"value": "trn_UG1fQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `transactionId`:\n- `transactionId=id1`\n- `transactionId[]=id1&transactionId[]=id2`\n- `transactionId=id1,id2`"
								},
								{
									"key": "label",
									"value": null,
									"description": "Single String, array of Strings or comma separated Strings, filter on `label`. Wildcard formats accepted like \"myCustomRatingType:*\""
								}
							]
						},
						"description": "**Permission**:\n\n- rating:list - lists ratings if the current user is the author or target user of all selected ratings\n- rating:list:all - lists ratings from all users"
					},
					"response": [
						{
							"name": "Get rating list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/ratings",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get rating",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/ratings/:ratingId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings",
								":ratingId"
							],
							"variable": [
								{
									"key": "ratingId",
									"value": "rtg_2l7fQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: rating ID"
								}
							]
						},
						"description": "**Permission**:\n\n- rating:read - reads a rating if the current user is the author or target user of this rating\n- rating:read:all - reads a rating from all users"
					},
					"response": [
						{
							"name": "Get rating",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/ratings/rtg_2l7fQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings",
										"rtg_2l7fQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"rtg_2l7fQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"score\": 80,\n    \"authorId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"targetId\": \"usr_T2VfQps1I3a1gJYz2I3a\",\n    \"comment\": \"Super\",\n    \"assetId\": \"ast_0TYM7rs1OwP1gQRuCOwP\",\n    \"transactionId\": \"trn_UG1fQps1I3a1gJYz2I3a\",\n    \"label\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create rating",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "score",
									"value": "80",
									"description": "Number [required]: Rating score, must be an integer between 0 and 100",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "Super",
									"description": "String (Default: `null`): Rating comment",
									"type": "text"
								},
								{
									"key": "authorId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "String:  Rating author. Automatically set to the current user if authenticated.",
									"type": "text"
								},
								{
									"key": "targetId",
									"value": "usr_T2VfQps1I3a1gJYz2I3a",
									"description": "String [required]: Rating target user",
									"type": "text"
								},
								{
									"key": "assetId",
									"value": "ast_0TYM7rs1OwP1gQRuCOwP",
									"description": "String (Default: `null`): Provide it if the rating is related to an asset",
									"type": "text"
								},
								{
									"key": "transactionId",
									"value": "trn_UG1fQps1I3a1gJYz2I3a",
									"description": "String (Default: `null`): Provide it if the rating is related to a transaction",
									"type": "text"
								},
								{
									"key": "label",
									"value": "",
									"description": "String (Default: `null`): Rating label. Provide it if you need multiple types of rating. Accepts format like 'myCustomRatingType:myCustomAttribute' for advanced filtering and aggregated stats",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/ratings",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings"
							]
						},
						"description": "**Permission**:\n\n- rating:create - creates a rating as the author of the rating\n- rating:create:all - creates a rating on behalf of other users"
					},
					"response": [
						{
							"name": "Create rating",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"score\": 80,\n    \"targetId\": \"usr_T2VfQps1I3a1gJYz2I3a\",\n    \"comment\": \"Super\",\n    \"assetId\": \"ast_0TYM7rs1OwP1gQRuCOwP\",\n    \"transactionId\": \"trn_UG1fQps1I3a1gJYz2I3a\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/ratings",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"rtg_2l7fQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"score\": 80,\n    \"authorId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"targetId\": \"usr_T2VfQps1I3a1gJYz2I3a\",\n    \"comment\": \"Super\",\n    \"assetId\": \"ast_0TYM7rs1OwP1gQRuCOwP\",\n    \"transactionId\": \"trn_UG1fQps1I3a1gJYz2I3a\",\n    \"label\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update rating",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "score",
									"value": "80",
									"description": "Number: Rating score, must be an integer between 0 and 100",
									"type": "text"
								},
								{
									"key": "comment",
									"value": "Super",
									"description": "String: Rating comment",
									"type": "text"
								},
								{
									"key": "label",
									"value": "",
									"description": "String: Rating label. Provide it if you need multiple types of rating. Accepts format like \"myCustomRatingType:myCustomAttribute\" for advanced filtering and aggregated stats",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/ratings/:ratingId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings",
								":ratingId"
							],
							"variable": [
								{
									"key": "ratingId",
									"value": "rtg_2l7fQps1I3a1gJYz2I3a",
									"description": "String: rating ID"
								}
							]
						},
						"description": "**Permission**:\n\n- rating:edit - edits a rating if the current user is the author or target user of this rating\n- rating:edit:all - edits a rating on behalf of other users"
					},
					"response": [
						{
							"name": "Update rating",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"score\": 80,\n    \"comment\": \"Super\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/ratings/rtg_2l7fQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings",
										"rtg_2l7fQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"rtg_2l7fQps1I3a1gJYz2I3a\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"score\": 80,\n    \"authorId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"targetId\": \"usr_T2VfQps1I3a1gJYz2I3a\",\n    \"comment\": \"Super\",\n    \"assetId\": \"ast_0TYM7rs1OwP1gQRuCOwP\",\n    \"transactionId\": \"trn_UG1fQps1I3a1gJYz2I3a\",\n    \"label\": null,\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete rating",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/ratings/:ratingId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"ratings",
								":ratingId"
							],
							"variable": [
								{
									"key": "ratingId",
									"value": "rtg_2l7fQps1I3a1gJYz2I3a",
									"type": "string",
									"description": "String: rating ID"
								}
							]
						},
						"description": "**Permission**:\n\n- rating:remove - removes a rating if the current user is the author or target user of this rating\n- rating:remove:all - removes a rating on behalf of other users"
					},
					"response": [
						{
							"name": "Delete rating",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/ratings/rtg_2l7fQps1I3a1gJYz2I3a",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"ratings",
										"rtg_2l7fQps1I3a1gJYz2I3a"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Ratings increase trust and help distinguish popular assets on your platform.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Messages API",
			"item": [
				{
					"name": "Get message list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/messages?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=msg_Vuz9KRs10NK1gAHrp0NK,msg_ndKcBks1TV21ggvMqTV2&senderId=usr_WHlfQps1I3a1gJYz2I3a&receiverId=usr_Y0tfQps1I3a1gJYz2I3a&userId=usr_WHlfQps1I3a1gJYz2I3a&conversationId=conv_4FqUqs1zln1h9gZhzln&topicId=trn_a3BfQps1I3a1gJYz2I3a&createdDate=2019-01-01&updatedDate=2019-01-01",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Integer (Default `1`)"
								},
								{
									"key": "nbResultsPerPage",
									"value": "10",
									"description": "Integer (Default: `20`): Min: 1, max: 100"
								},
								{
									"key": "orderBy",
									"value": "createdDate",
									"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
								},
								{
									"key": "order",
									"value": "desc",
									"description": "String (Default: `desc`): Can be `asc` or `desc`"
								},
								{
									"key": "id",
									"value": "msg_Vuz9KRs10NK1gAHrp0NK,msg_ndKcBks1TV21ggvMqTV2",
									"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
								},
								{
									"key": "senderId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `senderId`:\n- `senderId=id1`\n- `senderId[]=id1&senderId[]=id2`\n- `senderId=id1,id2`"
								},
								{
									"key": "receiverId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `receiverId`:\n- `receiverId=id1`\n- `receiverId[]=id1&receiverId[]=id2`\n- `receiverId=id1,id2`"
								},
								{
									"key": "userId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `senderId` or `receiverId`:\n- `userId=id1`\n- `userId[]=id1&userId[]=id2`\n- `userId=id1,id2`"
								},
								{
									"key": "conversationId",
									"value": "conv_4FqUqs1zln1h9gZhzln",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `conversationId`:\n- `conversationId=id1`\n- `conversationId[]=id1&conversationId[]=id2`\n- `conversationId=id1,id2`"
								},
								{
									"key": "topicId",
									"value": "trn_a3BfQps1I3a1gJYz2I3a",
									"description": "Single ID, array of IDs or comma separated IDs, filter on `topicId`:\n- `topicId=id1`\n- `topicId[]=id1&topicId[]=id2`\n- `topicId=id1,id2`"
								},
								{
									"key": "createdDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								},
								{
									"key": "updatedDate",
									"value": "2019-01-01",
									"description": "Date (ISO) or Object:\n- use Date for exact match: `createdDate=2019-01-01`\n- use an Object for date range query: `createdDate[gte]=2019-01-01` (fetch all objects created after the date 2019-01-01). Supported operators: lt (less than), lte (less than or equal), gt (greater then), gte (greater than or equal)"
								}
							]
						},
						"description": "**Permission**:\n\n- message:list - lists messages if the current user is the sender or receiver of all selected messages\n- message:list:all - lists messages from all users"
					},
					"response": [
						{
							"name": "Get message list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"url": {
									"raw": "{{apiBase}}/messages",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get message",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/messages/:messageId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"messages",
								":messageId"
							],
							"variable": [
								{
									"key": "messageId",
									"value": "msg_Vuz9KRs10NK1gAHrp0NK",
									"type": "string",
									"description": "String: message ID"
								}
							]
						},
						"description": "**Permission**:\n\n- message:read - reads a message if the current user is the sender or receiver of this message\n- message:read:all - reads a message from all users"
					},
					"response": [
						{
							"name": "Get message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/messages/msg_Vuz9KRs10NK1gAHrp0NK",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"messages",
										"msg_Vuz9KRs10NK1gAHrp0NK"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"msg_Vuz9KRs10NK1gAHrp0NK\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"topicId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"conversationId\": \"conv_4FqUqs1zln1h9gZhzln\",\n    \"content\": \"Hello\",\n    \"attachments\": [],\n    \"read\": false,\n    \"senderId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Create message",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "topicId",
									"value": "trn_a3BfQps1I3a1gJYz2I3a",
									"description": "String [required]: ID of the object that is the topic of the message. Can be an asset, a transaction or anything else",
									"type": "text"
								},
								{
									"key": "conversationId",
									"value": "",
									"description": "String (Default: `undefined`): `conversationId` is automatically created at the message creation. You can provide one to link this message to previous messages from this conversation. Must be a conversation with the same users.",
									"type": "text"
								},
								{
									"key": "content",
									"value": "Hello",
									"description": "String [required]: the message content",
									"type": "text"
								},
								{
									"key": "attachments",
									"value": "[]",
									"description": "Array of Object (Default: `[]`): Can be any objects that are related to the conversation (external media objects, ...)",
									"type": "text"
								},
								{
									"key": "read",
									"value": "false",
									"description": "Boolean (Default: `false`): Mark the message as read for the receiver user",
									"type": "text"
								},
								{
									"key": "senderId",
									"value": "usr_WHlfQps1I3a1gJYz2I3a",
									"description": "String: Sender user. Automatically set to the current user if authenticated.",
									"type": "text"
								},
								{
									"key": "receiverId",
									"value": "usr_Y0tfQps1I3a1gJYz2I3a",
									"description": "String [required]: Receiver user",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object (Default: `{}`)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/messages",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"messages"
							]
						},
						"description": "**Permission**:\n\n- message:create - creates a message as the sender of the message\n- message:create:all - creates a message on behalf of other users"
					},
					"response": [
						{
							"name": "Create message",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"topicId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"content\": \"Hello\",\n    \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\"\n}"
								},
								"url": {
									"raw": "{{apiBase}}/messages",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"messages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"msg_Vuz9KRs10NK1gAHrp0NK\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"topicId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"conversationId\": \"conv_4FqUqs1zln1h9gZhzln\",\n    \"content\": \"Hello\",\n    \"attachments\": [],\n    \"read\": false,\n    \"senderId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Update message",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "read",
									"value": "true",
									"description": "Boolean: Mark the message as read for the receiver user",
									"type": "text"
								},
								{
									"key": "metadata",
									"value": "{}",
									"description": "Object",
									"type": "text"
								},
								{
									"key": "platformData",
									"value": "{}",
									"description": "Object",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/messages/:messageId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"messages",
								":messageId"
							],
							"variable": [
								{
									"key": "messageId",
									"value": "msg_Vuz9KRs10NK1gAHrp0NK",
									"description": "String: message ID"
								}
							]
						},
						"description": "**Permission**:\n\n- message:edit - edits a message if the current user is the sender or receiver of this message\n- message:edit:all - edits a message on behalf of other users"
					},
					"response": [
						{
							"name": "Update message",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"read\": true\n}"
								},
								"url": {
									"raw": "{{apiBase}}/messages/msg_Vuz9KRs10NK1gAHrp0NK",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"messages",
										"msg_Vuz9KRs10NK1gAHrp0NK"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"msg_Vuz9KRs10NK1gAHrp0NK\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"topicId\": \"trn_a3BfQps1I3a1gJYz2I3a\",\n    \"conversationId\": \"conv_4FqUqs1zln1h9gZhzln\",\n    \"content\": \"Hello\",\n    \"attachments\": [],\n    \"read\": true,\n    \"senderId\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"receiverId\": \"usr_Y0tfQps1I3a1gJYz2I3a\",\n    \"metadata\": {},\n    \"platformData\": {},\n    \"livemode\": false\n}"
						}
					]
				},
				{
					"name": "Delete message",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBase}}/messages/:messageId",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"messages",
								":messageId"
							],
							"variable": [
								{
									"key": "messageId",
									"value": "msg_Vuz9KRs10NK1gAHrp0NK",
									"type": "string",
									"description": "String: message ID"
								}
							]
						},
						"description": "**Permission**:\n\n- message:remove - removes a message if the current user is the sender or receiver of this message\n- message:remove:all - removes a message on behalf of other users"
					},
					"response": [
						{
							"name": "Delete message",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{apiBase}}/messages/msg_Vuz9KRs10NK1gAHrp0NK",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"messages",
										"msg_Vuz9KRs10NK1gAHrp0NK"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Messages let you build a real community on your platform or ease Transactions between providers and other Users on a platform.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Signal API",
			"item": [
				{
					"name": "Send signal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "destination",
									"value": "\"usr_WHlfQps1I3a1gJYz2I3a\"",
									"description": "String: ID of the channel to send this signal to. When omitted, `signal:create:all` permission is required to broadcast the message to all channels of your platform.",
									"type": "text"
								},
								{
									"key": "event",
									"value": "\"chatMessage\"",
									"description": "String (Default: `\"signal\"`): any event name with alphanumeric characters, dash or underscore.",
									"type": "text"
								},
								{
									"key": "message",
									"value": "{ content: \"Some text\", context: { anything: true } }",
									"description": "Any type (Default: `undefined`): signal message content",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/signal",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"signal"
							]
						},
						"description": "**Permission**:\n\n- signal:create\n- signal:create:all - broadcast a signal (to all channels)"
					},
					"response": [
						{
							"name": "Send signal",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"destination\": \"usr_WHlfQps1I3a1gJYz2I3a\",\n    \"event\": \"chatMessage\",\n    \"message\": {\n        \"content\": \"Some text\",\n        \"context\": {\n            \"anything\": true\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/signal",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"signal"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Stelace Signal enables real-time communication on your platform.\n\nAny device can create or join _channels_ and send a signal to a single of these channels, unless _broadcasting_ to all channels is needed.\n\n[Socket.io client](https://socket.io/docs/client-api/) is how your client can interact with Signal API. Please have a look at [our docs](https://stelace.com/docs/signal) for client implementation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Email API",
			"item": [
				{
					"name": "Send email",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "html",
									"value": "<html><div>Hello world!</div></html>",
									"description": "String: HTML that will be sent",
									"type": "text"
								},
								{
									"key": "text",
									"value": "Hello world!",
									"description": "String: Text version of the provided HTML. If empty, it will try to retrieve text between the HTML elements with class `.headerContainer` and `.bodyContainer`",
									"type": "text"
								},
								{
									"key": "from",
									"value": "\"Awesome Service\" <awesome@service.com>",
									"description": "[Address object](https://nodemailer.com/message/addresses/): Sender information. Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "to",
									"value": "['\"John Locke\" <john.locke@example.com>']",
									"description": "[Address object](https://nodemailer.com/message/addresses/) or array of [Address object](https://nodemailer.com/message/addresses/): Receiver(s) information.  Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "Welcome",
									"description": "String: Email subject",
									"type": "text"
								},
								{
									"key": "replyTo",
									"value": "awesome@service.com",
									"description": "[Address object](https://nodemailer.com/message/addresses/): The receiver(s) will reply to this. Please consult [Nodemailer advanced fields](https://nodemailer.com/message/#more-advanced-fields) for more information",
									"type": "text"
								},
								{
									"key": "headers",
									"value": "{ 'custom-header': 'test' }",
									"description": "Object: Send email with specified headers. Please consult [Nodemailer headers](https://nodemailer.com/message/custom-headers/) for more information",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/emails/send",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"emails",
								"send"
							]
						},
						"description": "**Permission**:\n\n- email:send:all"
					},
					"response": [
						{
							"name": "Send email",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"html\": \"<html><div>Hello world!</div></html>\",\n\t\"text\": \"Hello world!\",\n\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n\t\"to\": \"['\\\"John Locke\\\" <john.locke@example.com>']\",\n\t\"subject\": \"Welcome\",\n\t\"replyTo\": \"awesome@service.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/emails/send",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"emails",
										"send"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"success\": true\n}"
						}
					]
				},
				{
					"name": "Send email via a template",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "welcome",
									"description": "String [required]: Entry name in the collection `email`",
									"type": "text"
								},
								{
									"key": "data",
									"value": "{ receiverName: 'John Locke' }",
									"description": "Object (Default: `{}`): root properties expected for this object. They will be injected and compiled in your email entry fields if they have ICU placeholders.",
									"type": "text"
								},
								{
									"key": "locale",
									"value": "en",
									"description": "String: Use the entry with this locale. If not provided, it will defaults to the global locale defined in the config `stelace.instant.locale`",
									"type": "text"
								},
								{
									"key": "currency",
									"value": "USD",
									"description": "String: The currency may be used if there is currency type in ICU placeholders. If not provided, it will defaults to the global locale defined in the config `stelace.instant.currency`",
									"type": "text"
								},
								{
									"key": "from",
									"value": "\"Awesome Service\" <awesome@service.com>",
									"description": "[Address object](https://nodemailer.com/message/addresses/): Sender information. Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "to",
									"value": "['\"John Locke\" <john.locke@example.com>']",
									"description": "[Address object](https://nodemailer.com/message/addresses/) or array of [Address object](https://nodemailer.com/message/addresses/): Receiver(s) information.  Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "Welcome",
									"description": "String: Email subject",
									"type": "text"
								},
								{
									"key": "replyTo",
									"value": "awesome@service.com",
									"description": "[Address object](https://nodemailer.com/message/addresses/): The receiver(s) will reply to this. Please consult [Nodemailer advanced fields](https://nodemailer.com/message/#more-advanced-fields) for more information",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/emails/send-template",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"emails",
								"send-template"
							]
						},
						"description": "If sending raw HTML emails aren't enough, Stelace API also provides powerful compilation to handle variables and i18n in your emails.\n\nHere's the default email template with Handlebars: [Template](https://github.com/stelace/stelace-core/blob/dev/plugins/email/templates/general.html)\n\nIt has the following fields:\n- `subject`\n- `preview_content` (HTML allowed)\n- `preheader_content` (HTML allowed)\n- `service_logo__url`\n- `header_title` (HTML allowed)\n- `leading_content` (HTML allowed)\n- `notification_image__href`\n- `notification_image__alt`\n- `notification_image__url`\n- `notification_image__width`\n- `notification_image__max_width`\n- `notification_image__custom_styles`\n- `content` (HTML allowed)\n- `cta__button_url`\n- `cta_button__text` (HTML allowed)\n- `trailing_content` (HTML allowed)\n- `featured__block`\n- `featured__image__href`\n- `featured__image__alt`\n- `featured__image__url`\n- `featured__title` (HTML allowed)\n- `featured__content` (HTML allowed)\n- `end_content` (HTML allowed)\n- `footer_content` (HTML allowed)\n- `legal_notice` (HTML allowed)\n- `style__color_brand`\n- `style__color_calltoaction`\n\nHTML is allowed in some template fields and will be escaped for the others.\n\nTemplate fields represent content placeholders.\n\n\n### Email entries\n\nEmails can be grouped by type such as registration emails, reset password email...\nEmails with the same type have similar content. However there may be some content customization such as receiver name or asset price.\n\nTo avoid repeating all those fields for each email with the same type, Email API is connected with Content API. Entries in the `email` collection is used by Email API to build emails.\n\nFor registration emails, you can create an email entry with name `registration`.\n\nThe entry fields maps to the above template fields.\n\nEntry example:\n```\n{\n\tid: 'ent_4KquHhs1WeG1hK71uWeG',\n\tname: 'registration',\n\tfields: {\n\t\tcontent: 'Welcome'\n\t},\n\t...\n}\n```\n\nThe email will be sent with the template field `content` replaced by 'Welcome'.\n\n\n### Variables and i18n\n\nTo improve the previous email example, we want to mention the user name in the content.\n\nEntry:\n```\n{\n\tid: 'ent_4KquHhs1WeG1hK71uWeG',\n\tname: 'registration',\n\tlocale: 'en',\n\tfields: {\n\t\tcontent: 'Welcome {name}'\n\t},\n\t...\n}\n```\n\nEndpoint `data` parameter:\n```\n{\n    name: 'registration',\n    locale: 'en',\n\tdata: {\n\t\tname: 'John Locke'\n\t},\n\t...\n}\n```\n\nThe name will be injected in the entry content field and be compiled to be rendered as 'Welcome John Locke' in the final email.\n\nThe entry fields are considered as ICU format strings. So pluralization is included out-of-the-box.\n\nEntry:\n```\n{\n\tid: 'ent_4KquHhs1WeG1hK71uWeG',\n\tname: 'registration',\n\tlocale: 'en',\n\tfields: {\n\t\tcontent: 'You have {nbCars, plural, =0 {0 car} one {one car} {# cars}}'\n\t},\n\t...\n}\n```\n\nEndpoint `data` parameter:\n```\n{\n    name: 'registration',\n    locale: 'en',\n\tdata: {\n\t\tnbCars: 2\n\t},\n\t...\n}\n```\n\nThe content will be compiled into 'You have 2 cars'.\n\n\n### Rich editing emails\n\nStelace API expects HTML strings in the email fields. However if you need to add rich editing to allow your users to edit in other formats (such as Markdown), you can specify a transform object with the property `transformed`.\n\nEntry:\n```\n{\n\tid: 'ent_4KquHhs1WeG1hK71uWeG',\n\tname: 'registration',\n\tfields: {\n\t\tcontent: {\n\t\t\teditable: '# Welcome',\n\t\t\ttransform: 'markdown',\n\t\t\ttransformed: '<h1>Welcome</h1>' // this is the only expected field\n\t\t}\n\t},\n\t...\n}\n```\n\n\n**Permission**:\n\n- email:send:all"
					},
					"response": [
						{
							"name": "Send email via a template",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"welcome\",\n\t\"data\": {\n\t\t\"receiverName\": \"John Locke\"\n\t},\n\t\"locale\": \"en\",\n\t\"currency\": \"USD\",\n\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n\t\"to\": \"['\\\"John Locke\\\" <john.locke@example.com>']\",\n\t\"subject\": \"Welcome\",\n\t\"replyTo\": \"awesome@service.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/emails/send-template",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"emails",
										"send-template"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n\t\"success\": true\n}"
						}
					]
				},
				{
					"name": "Update email configuration in private config",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "stelace",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "  email",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "    host",
									"value": "smtp.example.com",
									"description": "String: SMTP connection host",
									"type": "text"
								},
								{
									"key": "    port",
									"value": "465",
									"description": "Integer: SMTP connection port",
									"type": "text"
								},
								{
									"key": "    secure",
									"value": "false",
									"description": "Boolean: If true, the connection will use TLS; if false, it will use TLS only if the server supports STARTTLS. Please consult [Nodemailer TLS options](https://nodemailer.com/smtp/#tls-options) for more information",
									"type": "text"
								},
								{
									"key": "    ignoreTLS",
									"value": "false",
									"description": "Boolean: If true and `secure` is false, TLS is not used even if the server supports STARTTLS extension. Please consult [Nodemailer TLS options](https://nodemailer.com/smtp/#tls-options) for more information",
									"type": "text"
								},
								{
									"key": "    requireTLS",
									"value": "true",
									"description": "Boolean: If true and `secure` is false, Nodemailer tries to use STARTTLS even if the server does not advertise support for it. Please consult [Nodemailer TLS options](https://nodemailer.com/smtp/#tls-options) for more information",
									"type": "text"
								},
								{
									"key": "    auth",
									"value": "{}",
									"description": "Object with keys below",
									"type": "text"
								},
								{
									"key": "      user",
									"value": "someUser",
									"description": "String: Username to authenticate the connection",
									"type": "text"
								},
								{
									"key": "      pass",
									"value": "secretPassword",
									"description": "String: Password to authenticate the connection",
									"type": "text"
								},
								{
									"key": "    defaults",
									"value": "{}",
									"description": "Object with keys below (can be `null`): Please consult [Nodemailer default options](https://nodemailer.com/smtp/)",
									"type": "text"
								},
								{
									"key": "      from",
									"value": "\"Awesome Service\" <awesome@service.com>",
									"description": "[Address object](https://nodemailer.com/message/addresses/): Default email sender information. It can be overriden via send endpoints. Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "      cc",
									"value": "cc@example.com",
									"description": "[Address object](https://nodemailer.com/message/addresses/) or array of [Address object](https://nodemailer.com/message/addresses/): Default email cc(s) information.  Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "      bcc",
									"value": "bcc1@example.com,bcc2@example.com",
									"description": "[Address object](https://nodemailer.com/message/addresses/) or array of [Address object](https://nodemailer.com/message/addresses/): Default email bcc(s) information.  Please consult [Nodemailer common fields](https://nodemailer.com/message/#common-fields) for more information",
									"type": "text"
								},
								{
									"key": "      replyTo",
									"value": "awesome@service.com",
									"description": "[Address object](https://nodemailer.com/message/addresses/): The receiver will reply to this. Please consult [Nodemailer advanced fields](https://nodemailer.com/message/#more-advanced-fields) for more information",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiBase}}/config/private",
							"protocol": "https",
							"host": [
								"{{apiBase}}"
							],
							"path": [
								"config",
								"private"
							]
						},
						"description": "**Permission**:\n\n- config:edit:all"
					},
					"response": [
						{
							"name": "Update email configuration in private config",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{secretApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stelace\": {\n\t\t\"email\": {\n        \t\"host\": \"smtp.example.com\",\n        \t\"port\": 465,\n        \t\"secure\": false,\n        \t\"ignoreTLS\": false,\n        \t\"requireTLS\": true,\n        \t\"auth\": {\n        \t\t\"user\": \"someUser\",\n        \t\t\"pass\": \"secretPassword\"\n        \t},\n        \t\"defaults\": {\n        \t\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n        \t\t\"cc\": \"cc@example.com\",\n        \t\t\"bcc\": \"bcc1@example.com,bcc2@example.com\",\n        \t\t\"replyTo\": \"awesome@service.com\"\n        \t}\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiBase}}/config/private",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"config",
										"private"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"stelace\": {\n        \"email\": {\n        \t\"host\": \"smtp.example.com\",\n        \t\"port\": 465,\n        \t\"secure\": false,\n        \t\"ignoreTLS\": false,\n        \t\"requireTLS\": true,\n        \t\"auth\": {\n        \t\t\"user\": \"someUser\",\n        \t\t\"pass\": \"secretPassword\"\n        \t},\n        \t\"defaults\": {\n        \t\t\"from\": \"\\\"Awesome Service\\\" <awesome@service.com>\",\n        \t\t\"cc\": \"cc@example.com\",\n        \t\t\"bcc\": \"bcc1@example.com,bcc2@example.com\",\n        \t\t\"replyTo\": \"awesome@service.com\"\n        \t}\n        }\n    }\n}"
						}
					]
				}
			],
			"description": "Before sending emails, the email connection must be specified via the private config.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Content API",
			"item": [
				{
					"name": "Entries",
					"item": [
						{
							"name": "Get entry list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/entries?page=1&nbResultsPerPage=10&orderBy=createdDate&order=desc&id=ent_4KquHhs1WeG1hK71uWeG,ent_f5HQIUs1Wwq1hKPjJWwq&collection=email&locale=&name=",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"entries"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Integer (Default `1`)"
										},
										{
											"key": "nbResultsPerPage",
											"value": "10",
											"description": "Integer (Default: `20`): Min: 1, max: 100"
										},
										{
											"key": "orderBy",
											"value": "createdDate",
											"description": "String (Default: `createdDate`): Can be `createdDate` or `updatedDate`"
										},
										{
											"key": "order",
											"value": "desc",
											"description": "String (Default: `desc`): Can be `asc` or `desc`"
										},
										{
											"key": "id",
											"value": "ent_4KquHhs1WeG1hK71uWeG,ent_f5HQIUs1Wwq1hKPjJWwq",
											"description": "Single ID, array of IDs or comma separated IDs:\n- `id=id1`\n- `id[]=id1&id[]=id2`\n- `id=id1,id2`"
										},
										{
											"key": "collection",
											"value": "email",
											"description": "String: entries are regrouped into collections"
										},
										{
											"key": "locale",
											"value": "",
											"description": "String: entry locale"
										},
										{
											"key": "name",
											"value": "",
											"description": "String: entry name"
										}
									]
								},
								"description": "**Permission**:\n\n- entry:list:all"
							},
							"response": [
								{
									"name": "Get entry list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"url": {
											"raw": "{{apiBase}}/entries",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"entries"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get entry",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/entries/:entryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"entries",
										":entryId"
									],
									"variable": [
										{
											"key": "entryId",
											"value": "ent_4KquHhs1WeG1hK71uWeG",
											"type": "string",
											"description": "String: entry ID"
										}
									]
								},
								"description": "**Permission**:\n\n- entry:read:all"
							},
							"response": [
								{
									"name": "Get entry",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/entries/ent_4KquHhs1WeG1hK71uWeG",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"entries",
												"ent_4KquHhs1WeG1hK71uWeG"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ent_4KquHhs1WeG1hK71uWeG\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"collection\": \"email\",\n    \"locale\": \"en-US\",\n    \"name\": \"welcome\",\n    \"fields\": {\n        \"subject\": \"Hello\",\n        \"body\": \"Welcome\"\n    },\n    \"metadata\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Create entry",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "collection",
											"value": "email",
											"description": "String [required]: entries are regrouped into collections (e.g. 'website', or 'email')",
											"type": "text"
										},
										{
											"key": "locale",
											"value": "",
											"description": "String [required]: entry locale",
											"type": "text"
										},
										{
											"key": "name",
											"value": "registration",
											"description": "String [required]: an entry represent an entity that can be a webpage or an email or anything else",
											"type": "text"
										},
										{
											"key": "fields",
											"value": "{ subject: 'Hello', body: 'Welcome' }",
											"description": "Object: any content for your entry. Dotted keys are accepted if needed (e.g. for i18n)",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object (Default: `{}`)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/entries",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"entries"
									]
								},
								"description": "**Permission**:\n\n- entry:create:all"
							},
							"response": [
								{
									"name": "Create entry",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": \"email\",\n    \"locale\": \"en-US\",\n    \"name\": \"registration\",\n    \"fields\": {\n        \"subject\": \"Hello\",\n        \"body\": \"Welcome\"\n    }\n}"
										},
										"url": {
											"raw": "{{apiBase}}/entries",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"entries"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ent_4KquHhs1WeG1hK71uWeG\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"collection\": \"registration\",\n    \"locale\": \"en-US\",\n    \"name\": \"welcome\",\n    \"fields\": {\n        \"subject\": \"Hello\",\n        \"body\": \"Welcome\"\n    },\n    \"metadata\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Update entry",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "collection",
											"value": "email",
											"description": "String: entries are regrouped into collections (e.g. 'website', or 'email')",
											"type": "text"
										},
										{
											"key": "name",
											"value": "registration",
											"description": "String: an entry represent an entity that can be a webpage or an email or anything else",
											"type": "text"
										},
										{
											"key": "fields",
											"value": "{ subject: 'Hello', body: 'Welcome' }",
											"description": "Object: any content for your entry. Dotted keys are accepted if needed (e.g. for i18n). Provide only keys that need to be updated. Stelace API applies object merging.",
											"type": "text"
										},
										{
											"key": "metadata",
											"value": "{}",
											"description": "Object",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{apiBase}}/entries/:entryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"entries",
										":entryId"
									],
									"variable": [
										{
											"key": "entryId",
											"value": "ent_4KquHhs1WeG1hK71uWeG",
											"description": "String: entry ID"
										}
									]
								},
								"description": "**Permission**:\n\n- entry:edit:all"
							},
							"response": [
								{
									"name": "Update entry",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": \"email\",\n    \"name\": \"registration\",\n    \"fields\": {\n        \"subject\": \"Hello\",\n        \"body\": \"Welcome\"\n    }\n}"
										},
										"url": {
											"raw": "{{apiBase}}/entries/ent_4KquHhs1WeG1hK71uWeG",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"entries",
												"ent_4KquHhs1WeG1hK71uWeG"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"id\": \"ent_4KquHhs1WeG1hK71uWeG\",\n    \"createdDate\": \"2018-04-14T08:53:59.076Z\",\n    \"updatedDate\": \"2018-04-14T08:53:59.076Z\",\n    \"collection\": \"registration\",\n    \"locale\": \"en-US\",\n    \"name\": \"welcome\",\n    \"fields\": {\n        \"subject\": \"Hello\",\n        \"body\": \"Welcome\"\n    },\n    \"metadata\": {},\n    \"livemode\": false\n}"
								}
							]
						},
						{
							"name": "Delete entry",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiBase}}/entries/:entryId",
									"protocol": "https",
									"host": [
										"{{apiBase}}"
									],
									"path": [
										"entries",
										":entryId"
									],
									"variable": [
										{
											"key": "entryId",
											"value": "ent_4KquHhs1WeG1hK71uWeG",
											"type": "string",
											"description": "String: entry ID"
										}
									]
								},
								"description": "**Permission**:\n\n- entry:remove:all"
							},
							"response": [
								{
									"name": "Delete entry",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic {{secretApiKey}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{apiBase}}/entries/ent_4KquHhs1WeG1hK71uWeG",
											"protocol": "https",
											"host": [
												"{{apiBase}}"
											],
											"path": [
												"entries",
												"ent_4KquHhs1WeG1hK71uWeG"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "Entries are the entity that structure your content. They can be a webpage, an email or anything having content `fields`.\n\nEntries are regrouped by `locale` and `collection`.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Changelog",
			"item": [],
			"description": "This section lists backwards-incompatible changes you should be aware of before catching up with a newer version.\n"
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiBase",
			"value": "http://localhost:4100",
			"type": "string"
		}
	]
}
